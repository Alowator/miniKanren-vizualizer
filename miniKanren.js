this.anyf = (...args) => {
    addNode(args.toString());
};

this.callf = (x) => {
//    console.log(x);
//    console.log(x[1][1].c);

    addNode(x + " ");
};

this.unifyf = (x) => {
    console.log(x);

    addNode("unify " + x);
};

this.freshf = (x) => {
    addNode("fresh " + x);
};

this.endf = () => {
    end();
};


function runAppendo() {
    return jscode.runAppendo(null);
}


// --verbose ?? посомтреть доп. флаги
// --wrapped true/false борачивает либу в либу
// diff


// Generated by js_of_ocaml 4.0.0
(function(Object)
   {typeof globalThis
    !==
    "object"
    &&
    (this
      ?get()
      :(Object.defineProperty
         (Object.prototype,"_T_",{configurable:true,get:get}),
        _T_));
    function get()
     {var global=this || self;
      global.globalThis = global;
      delete Object.prototype._T_}}
  (Object));
(function(globalThis)
   {"use strict";
    function Base_am_testing(x){return 0}
    function caml_mul(a,b){return Math.imul(a,b)}
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_jsbytes(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w
        =
        s.charCodeAt(i)
        |
        s.charCodeAt(i + 1)
        <<
        8
        |
        s.charCodeAt(i + 2)
        <<
        16
        |
        s.charCodeAt(i + 3)
        <<
        24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s.charCodeAt(i + 2) << 16;
        case 2:w |= s.charCodeAt(i + 1) << 8;
        case 1:w |= s.charCodeAt(i);h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    var caml_int64_offset=Math.pow(2,- 24);
    function caml_raise_constant(tag){throw tag}
    var caml_global_data=[0];
    function caml_raise_zero_divide()
     {caml_raise_constant(caml_global_data.Division_by_zero)}
    function MlInt64(lo,mi,hi)
     {this.lo = lo & 0xffffff;this.mi = mi & 0xffffff;this.hi = hi & 0xffff}
    MlInt64.prototype.caml_custom = "_j";
    MlInt64.prototype.copy
    =
    function(){return new MlInt64(this.lo,this.mi,this.hi)};
    MlInt64.prototype.ucompare
    =
    function(x)
     {if(this.hi > x.hi)return 1;
      if(this.hi < x.hi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.compare
    =
    function(x)
     {var hi=this.hi << 16,xhi=x.hi << 16;
      if(hi > xhi)return 1;
      if(hi < xhi)return - 1;
      if(this.mi > x.mi)return 1;
      if(this.mi < x.mi)return - 1;
      if(this.lo > x.lo)return 1;
      if(this.lo < x.lo)return - 1;
      return 0};
    MlInt64.prototype.neg
    =
    function()
     {var lo=- this.lo,mi=- this.mi + (lo >> 24),hi=- this.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.add
    =
    function(x)
     {var
       lo=this.lo + x.lo,
       mi=this.mi + x.mi + (lo >> 24),
       hi=this.hi + x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.sub
    =
    function(x)
     {var
       lo=this.lo - x.lo,
       mi=this.mi - x.mi + (lo >> 24),
       hi=this.hi - x.hi + (mi >> 24);
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.mul
    =
    function(x)
     {var
       lo=this.lo * x.lo,
       mi=(lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
       hi=
        (mi * caml_int64_offset | 0)
        +
        this.hi
        *
        x.lo
        +
        this.mi
        *
        x.mi
        +
        this.lo
        *
        x.hi;
      return new MlInt64(lo,mi,hi)};
    MlInt64.prototype.isZero
    =
    function(){return (this.lo | this.mi | this.hi) == 0};
    MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0};
    MlInt64.prototype.and
    =
    function(x)
     {return new MlInt64(this.lo & x.lo,this.mi & x.mi,this.hi & x.hi)};
    MlInt64.prototype.or
    =
    function(x)
     {return new MlInt64(this.lo | x.lo,this.mi | x.mi,this.hi | x.hi)};
    MlInt64.prototype.xor
    =
    function(x)
     {return new MlInt64(this.lo ^ x.lo,this.mi ^ x.mi,this.hi ^ x.hi)};
    MlInt64.prototype.shift_left
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo << s,
                this.mi << s | this.lo >> 24 - s,
                this.hi << s | this.mi >> 24 - s);
      if(s < 48)
       return new
               MlInt64
               (0,this.lo << s - 24,this.mi << s - 24 | this.lo >> 48 - s);
      return new MlInt64(0,0,this.lo << s - 48)};
    MlInt64.prototype.shift_right_unsigned
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | this.hi << 24 - s,
                this.hi >> s);
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,this.hi >> s - 24,0);
      return new MlInt64(this.hi >> s - 48,0,0)};
    MlInt64.prototype.shift_right
    =
    function(s)
     {s = s & 63;
      if(s == 0)return this;
      var h=this.hi << 16 >> 16;
      if(s < 24)
       return new
               MlInt64
               (this.lo >> s | this.mi << 24 - s,
                this.mi >> s | h << 24 - s,
                this.hi << 16 >> s >>> 16);
      var sign=this.hi << 16 >> 31;
      if(s < 48)
       return new
               MlInt64
               (this.mi >> s - 24 | this.hi << 48 - s,
                this.hi << 16 >> s - 24 >> 16,
                sign & 0xffff);
      return new MlInt64(this.hi << 16 >> s - 32,sign,sign)};
    MlInt64.prototype.lsl1
    =
    function()
     {this.hi = this.hi << 1 | this.mi >> 23;
      this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
      this.lo = this.lo << 1 & 0xffffff};
    MlInt64.prototype.lsr1
    =
    function()
     {this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
      this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
      this.hi = this.hi >>> 1};
    MlInt64.prototype.udivmod
    =
    function(x)
     {var
       offset=0,
       modulus=this.copy(),
       divisor=x.copy(),
       quotient=new MlInt64(0,0,0);
      while(modulus.ucompare(divisor) > 0){offset++;divisor.lsl1()}
      while(offset >= 0)
       {offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0)
         {quotient.lo++;modulus = modulus.sub(divisor)}
        divisor.lsr1()}
      return {quotient:quotient,modulus:modulus}};
    MlInt64.prototype.div
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi ^ y.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var q=x.udivmod(y).quotient;
      if(sign & 0x8000)q = q.neg();
      return q};
    MlInt64.prototype.mod
    =
    function(y)
     {var x=this;
      if(y.isZero())caml_raise_zero_divide();
      var sign=x.hi;
      if(x.hi & 0x8000)x = x.neg();
      if(y.hi & 0x8000)y = y.neg();
      var r=x.udivmod(y).modulus;
      if(sign & 0x8000)r = r.neg();
      return r};
    MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24};
    MlInt64.prototype.toFloat
    =
    function()
     {return (this.hi << 16)
             *
             Math.pow(2,32)
             +
             this.mi
             *
             Math.pow(2,24)
             +
             this.lo};
    MlInt64.prototype.toArray
    =
    function()
     {return [this.hi >> 8,
              this.hi & 0xff,
              this.mi >> 16,
              this.mi >> 8 & 0xff,
              this.mi & 0xff,
              this.lo >> 16,
              this.lo >> 8 & 0xff,
              this.lo & 0xff]};
    MlInt64.prototype.lo32
    =
    function(){return this.lo | (this.mi & 0xff) << 24};
    MlInt64.prototype.hi32
    =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16};
    function caml_int64_create_lo_mi_hi(lo,mi,hi)
     {return new MlInt64(lo,mi,hi)}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_lo32(v){return v.lo32()}
    function caml_int64_hi32(v){return v.hi32()}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_subarray_to_jsbytes(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,a.slice(i,i + Math.min(len,1024)));
      return s}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_jsbytes(s.c,0,s.c.length);
      s.t = 0}
    function caml_jsbytes_of_string(s)
     {s.t & 6 && caml_convert_string_to_bytes(s);return s.c}
    function caml_hash_mix_string(h,v)
     {return caml_hash_mix_jsbytes(h,caml_jsbytes_of_string(v))}
    function caml_hash_mix_bytes_arr(h,s)
     {var len=s.length,i,w;
      for(i = 0;i + 4 <= len;i += 4)
       {w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
        h = caml_hash_mix_int(h,w)}
      w = 0;
      switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h = caml_hash_mix_int(h,w)
        }
      h ^= len;
      return h}
    function jsoo_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString
    =
    function()
     {switch(this.t)
       {case 9:return this.c;
        default:caml_convert_string_to_bytes(this);case 0:
         if(jsoo_is_ascii(this.c)){this.t = 9;return this.c}this.t = 8;
        case 8:return this.c
        }};
    MlBytes.prototype.toUtf16
    =
    function()
     {var r=this.toString();
      if(this.t == 9)return r;
      return caml_utf16_of_utf8(r)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_ml_bytes_content(s)
     {switch(s.t & 6)
       {default:caml_convert_string_to_bytes(s);case 0:return s.c;
        case 4:return s.c
        }}
    function caml_hash_mix_bytes(h,v)
     {var content=caml_ml_bytes_content(v);
      return typeof content === "string"
              ?caml_hash_mix_jsbytes(h,content)
              :caml_hash_mix_bytes_arr(h,content)}
    function caml_int32_bits_of_float(x)
     {var float32a=new (globalThis.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (globalThis.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_to_bytes(x){return x.toArray()}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      if(ba.caml_custom == "_bigarr02")
       for(var i=0;i < ba.dims.length;i++)
        if(ba.dims[i] < 0xffff)
         writer.write(16,ba.dims[i]);
        else
         {writer.write(16,0xffff);
          writer.write(32,0);
          writer.write(32,ba.dims[i])}
      else
       for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_bytes_of_jsbytes(s){return new MlBytes(0,s,s.length)}
    function caml_string_of_jsbytes(s){return caml_bytes_of_jsbytes(s)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_string_of_jsbytes(msg))}
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=globalThis,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (globalThis.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (globalThis.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return new
              MlInt64
              (a[7] << 0 | a[6] << 8 | a[5] << 16,
               a[4] << 0 | a[3] << 8 | a[2] << 16,
               a[1] << 0 | a[0] << 8)}
    function caml_int64_float_of_bits(x)
     {var lo=x.lo,mi=x.mi,hi=x.hi,exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return new
              MlInt64
              (lo & 0xffffff,
               lo >>> 24 & 0xff | (hi & 0xffff) << 8,
               hi >>> 16 & 0xffff)}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    var caml_ba_custom_name="_bigarr02";
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_failwith(msg)
     {if(! caml_global_data.Failure)
       caml_global_data.Failure = [248,caml_string_of_jsbytes("Failure"),- 3];
      caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz,name)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      if(name == "_bigarr02")
       for(var i=0;i < num_dims;i++)
        {var size_dim=reader.read16u();
         if(size_dim == 0xffff)
          {var size_dim_hi=reader.read32u(),size_dim_lo=reader.read32u();
           if(size_dim_hi != 0)
            caml_failwith("input_value: bigarray dimension overflow in 32bit");
           size_dim = size_dim_lo}
         dims.push(size_dim)}
      else
       for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y,total){return x.compare(y)}
    function caml_int64_hash(v){return v.lo32() ^ v.hi32()}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarray")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader,sz){return caml_ba_deserialize(reader,sz,"_bigarr02")},
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h = caml_mul(h,0x85ebca6b | 0);
      h ^= h >>> 13;
      h = caml_mul(h,0xc2b2ae35 | 0);
      h ^= h >>> 16;
      return h}
    function caml_is_ml_bytes(s){return s instanceof MlBytes}
    function caml_is_ml_string(s){return caml_is_ml_bytes(s)}
    function caml_hash(count,limit,seed,obj)
     {var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
      if(sz < 0 || sz > 256)sz = 256;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
      while(rd < wr && num > 0)
       {v = queue[rd++];
        if(v && v.caml_custom)
         {if
           (caml_custom_ops[v.caml_custom]
            &&
            caml_custom_ops[v.caml_custom].hash)
           {var hh=caml_custom_ops[v.caml_custom].hash(v);
            h = caml_hash_mix_int(h,hh);
            num--}}
        else
         if(v instanceof Array && v[0] === (v[0] | 0))
          switch(v[0])
           {case 248:h = caml_hash_mix_int(h,v[2]);num--;break;
            case 250:queue[--rd] = v[1];break;
            default:
             var tag=v.length - 1 << 10 | v[0];
             h = caml_hash_mix_int(h,tag);
             for(i = 1,len = v.length;i < len;i++)
              {if(wr >= sz)break;queue[wr++] = v[i]}
             break}
         else
          if(caml_is_ml_bytes(v))
           {h = caml_hash_mix_bytes(h,v);num--}
          else
           if(caml_is_ml_string(v))
            {h = caml_hash_mix_string(h,v);num--}
           else
            if(typeof v === "string")
             {h = caml_hash_mix_jsbytes(h,v);num--}
            else
             if(v === (v | 0))
              {h = caml_hash_mix_int(h,v + v + 1);num--}
             else
              if(v === + v){h = caml_hash_mix_float(h,v);num--}}
      h = caml_hash_mix_final(h);
      return h & 0x3FFFFFFF}
    function Base_hash_double(d){return caml_hash(1,1,0,d)}
    function caml_int64_shift_right_unsigned(x,s)
     {return x.shift_right_unsigned(s)}
    function caml_int64_is_zero(x){return + x.isZero()}
    function caml_int64_to_int32(x){return x.toInt()}
    function Base_int_math_int64_clz(x)
     {var n=64,y;
      y = caml_int64_shift_right_unsigned(x,32);
      if(! caml_int64_is_zero(y)){n = n - 32;x = y}
      y = caml_int64_shift_right_unsigned(x,16);
      if(! caml_int64_is_zero(y)){n = n - 16;x = y}
      y = caml_int64_shift_right_unsigned(x,8);
      if(! caml_int64_is_zero(y)){n = n - 8;x = y}
      y = caml_int64_shift_right_unsigned(x,4);
      if(! caml_int64_is_zero(y)){n = n - 4;x = y}
      y = caml_int64_shift_right_unsigned(x,2);
      if(! caml_int64_is_zero(y)){n = n - 2;x = y}
      y = caml_int64_shift_right_unsigned(x,1);
      if(! caml_int64_is_zero(y))return n - 2;
      return n - caml_int64_to_int32(x)}
    function caml_int64_and(x,y){return x.and(y)}
    function caml_int64_of_int32(x)
     {return new MlInt64(x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff)}
    function Base_int_math_int64_ctz(x)
     {if(caml_int64_is_zero(x))return 64;
      var n=1;
      function is_zero(x){return caml_int64_is_zero(x)}
      function land(x,y){return caml_int64_and(x,y)}
      function small_int64(x){return caml_int64_create_lo_mi_hi(x,0,0)}
      if
       (is_zero(land(x,caml_int64_create_lo_mi_hi(0xFFFFFF,0x0000FF,0x0000))))
       {n = n + 32;x = caml_int64_shift_right_unsigned(x,32)}
      if(is_zero(land(x,small_int64(0x00FFFF))))
       {n = n + 16;x = caml_int64_shift_right_unsigned(x,16)}
      if(is_zero(land(x,small_int64(0x0000FF))))
       {n = n + 8;x = caml_int64_shift_right_unsigned(x,8)}
      if(is_zero(land(x,small_int64(0x00000F))))
       {n = n + 4;x = caml_int64_shift_right_unsigned(x,4)}
      if(is_zero(land(x,small_int64(0x000003))))
       {n = n + 2;x = caml_int64_shift_right_unsigned(x,2)}
      return n - caml_int64_to_int32(caml_int64_and(x,small_int64(0x000001)))}
    function caml_int64_mul(x,y){return x.mul(y)}
    function Base_int_math_int64_pow_stub(base,exponent)
     {var one=caml_int64_create_lo_hi(1,0),mul=[one,base,one,one],res=one;
      while(! caml_int64_is_zero(exponent))
       {mul[1] = caml_int64_mul(mul[1],mul[3]);
        mul[2] = caml_int64_mul(mul[1],mul[1]);
        mul[3] = caml_int64_mul(mul[2],mul[1]);
        res = caml_int64_mul(res,mul[caml_int64_lo32(exponent) & 3]);
        exponent = caml_int64_shift_right_unsigned(exponent,2)}
      return res}
    function Base_int_math_int32_clz(x)
     {var n=32,y;
      y = x >> 16;
      if(y != 0){n = n - 16;x = y}
      y = x >> 8;
      if(y != 0){n = n - 8;x = y}
      y = x >> 4;
      if(y != 0){n = n - 4;x = y}
      y = x >> 2;
      if(y != 0){n = n - 2;x = y}
      y = x >> 1;
      if(y != 0)return n - 2;
      return n - x}
    function Base_int_math_int_clz(x){return Base_int_math_int32_clz(x)}
    function Base_int_math_int32_ctz(x)
     {if(x === 0)return 32;
      var n=1;
      if((x & 0x0000FFFF) === 0){n = n + 16;x = x >> 16}
      if((x & 0x000000FF) === 0){n = n + 8;x = x >> 8}
      if((x & 0x0000000F) === 0){n = n + 4;x = x >> 4}
      if((x & 0x00000003) === 0){n = n + 2;x = x >> 2}
      return n - (x & 1)}
    function Base_int_math_int_ctz(x){return Base_int_math_int32_ctz(x)}
    function Base_int_math_int_popcount(v)
     {v = v - (v >>> 1 & 0x55555555);
      v = (v & 0x33333333) + (v >>> 2 & 0x33333333);
      return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24}
    function Base_int_math_int_pow_stub(base,exponent)
     {var one=1,mul=[one,base,one,one],res=one;
      while(! exponent == 0)
       {mul[1] = mul[1] * mul[3] | 0;
        mul[2] = mul[1] * mul[1] | 0;
        mul[3] = mul[2] * mul[1] | 0;
        res = res * mul[exponent & 3] | 0;
        exponent = exponent >> 2}
      return res}
    var
     Base_internalhash_fold_float=caml_hash_mix_float,
     Base_internalhash_fold_int=caml_hash_mix_int,
     Base_internalhash_fold_int64=caml_hash_mix_int64,
     Base_internalhash_fold_string=caml_hash_mix_string;
    function Base_internalhash_get_hash_value(seed)
     {var h=caml_hash_mix_final(seed);return h & 0x3FFFFFFF}
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function caml_array_concat(l)
     {var a=[0];
      while(l !== 0)
       {var b=l[1];for(var i=1;i < b.length;i++)a.push(b[i]);l = l[2]}
      return a}
    function caml_array_sub(a,i,len)
     {var a2=new Array(len + 1);
      a2[0] = 0;
      for(var i2=1,i1=i + 1;i2 <= len;i2++,i1++)a2[i2] = a[i1];
      return a2}
    function caml_convert_bytes_to_array(s)
     {if(globalThis.Uint8Array)
       var a=new (globalThis.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_jsbytes(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_jsbytes(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_bytes_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_bytes_of_string(s){return s}
    function caml_blit_string(a,b,c,d,e)
     {caml_blit_bytes(caml_bytes_of_string(a),b,c,d,e);return 0}
    function caml_bswap16(x){return (x & 0x00FF) << 8 | (x & 0xFF00) >> 8}
    function caml_bytes_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_bytes_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_bytes_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_bytes_lessequal(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c <= s2.c?1:0}
    function caml_bytes_greaterequal(s1,s2)
     {return caml_bytes_lessequal(s2,s1)}
    function caml_bytes_lessthan(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?1:0}
    function caml_bytes_greaterthan(s1,s2){return caml_bytes_lessthan(s2,s1)}
    function caml_bytes_notequal(s1,s2){return 1 - caml_bytes_equal(s1,s2)}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_bytes_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_bytes_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      if(typeof f !== "function")return f;
      var n=f.length | 0;
      if(n === 0)return f.apply(null,args);
      var argsLen=args.length | 0,d=n - argsLen | 0;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen(f.apply(null,args.slice(0,n)),args.slice(n));
       else
        return function()
         {var
           extra_args=arguments.length == 0?1:arguments.length,
           nargs=new Array(args.length + extra_args);
          for(var i=0;i < args.length;i++)nargs[i] = args[i];
          for(var i=0;i < arguments.length;i++)
           nargs[args.length + i] = arguments[i];
          return caml_call_gen(f,nargs)}}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(caml_is_ml_bytes(a))
        return 252;
       else
        if(caml_is_ml_string(a))
         return 1252;
        else
         if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
          {var tag=a[0] | 0;return tag == 254?0:tag}
         else
          if(a instanceof String)
           return 12520;
          else
           if(typeof a == "string")
            return 12520;
           else
            if(a instanceof Number)
             return 1000;
            else
             if(a && a.caml_custom)
              return 1255;
             else
              if(a && a.compare)
               return 1256;
              else
               if(typeof a == "function")
                return 1247;
               else
                if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2){return caml_bytes_compare(s1,s2)}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b){var x=caml_bytes_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             caml_invalid_argument("equal: got Custom_tag, should not happen");
             break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=caml_jsbytes_of_string(a),b=caml_jsbytes_of_string(b);
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 12520:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    function caml_div(x,y)
     {if(y == 0)caml_raise_zero_divide();return x / y | 0}
    var caml_ephe_key_offset=3;
    function caml_weak_create(n)
     {if(n < 0)caml_invalid_argument("Weak.create");
      var x=[251,"caml_ephe_list_head"];
      x.length = caml_ephe_key_offset + n;
      return x}
    var caml_ephe_create=caml_weak_create,caml_ephe_data_offset=2;
    function caml_ephe_get_data(x)
     {return x[caml_ephe_data_offset] === undefined
              ?0
              :[0,x[caml_ephe_data_offset]]}
    function caml_ephe_set_data(x,data)
     {x[caml_ephe_data_offset] = data;return 0}
    function caml_weak_set(x,i,v)
     {if(i < 0 || caml_ephe_key_offset + i >= x.length)
       caml_invalid_argument("Weak.set");
      x[caml_ephe_key_offset + i] = v;
      return 0}
    function caml_ephe_set_key(x,i,v){return caml_weak_set(x,i,[0,v])}
    function caml_equal(x,y){return + (caml_compare_val(x,y,false) == 0)}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_bytes_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_final_register(){return 0}
    function caml_float_compare(x,y)
     {if(x === y)return 0;
      if(x < y)return - 1;
      if(x > y)return 1;
      if(x === x)return 1;
      if(y === y)return - 1;
      return 0}
    function caml_float_of_string(s)
     {var res;
      s = caml_jsbytes_of_string(s);
      res = + s;
      if(s.length > 0 && res === res)return res;
      s = s.replace(/_/g,"");
      res = + s;
      if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s))return res;
      var m=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
      if(m)
       {var
         m3=m[3].replace(/0+$/,""),
         mantissa=parseInt(m[1] + m[2] + m3,16),
         exponent=(m[5] | 0) - 4 * m3.length;
        res = mantissa * Math.pow(2,exponent);
        return res}
      if(/^\+?inf(inity)?$/i.test(s))return Infinity;
      if(/^-inf(inity)?$/i.test(s))return - Infinity;
      caml_failwith("float_of_string")}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_string_of_jsbytes(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")
       return caml_string_of_jsbytes("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_jsstring_of_string(s){return s.toUtf16()}
    function fs_node_supported()
     {return typeof globalThis.process
             !==
             "undefined"
             &&
             typeof globalThis.process.versions
             !==
             "undefined"
             &&
             typeof globalThis.process.versions.node
             !==
             "undefined"}
    function make_path_is_absolute()
     {function posix(path)
       {if(path.charAt(0) === "/")return ["",path.substring(1)];return}
      function win32(path)
       {var
         splitDeviceRe=
          /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
         result=splitDeviceRe.exec(path),
         device=result[1] || "",
         isUnc=Boolean(device && device.charAt(1) !== ":");
        if(Boolean(result[2] || isUnc))
         {var root=result[1] || "",sep=result[2] || "";
          return [root,path.substring(root.length + sep.length)]}
        return}
      return fs_node_supported()
              &&
              globalThis.process
              &&
              globalThis.process.platform
              ?globalThis.process.platform === "win32"?win32:posix
              :posix}
    var path_is_absolute=make_path_is_absolute();
    function caml_trailing_slash(name)
     {return name.slice(- 1) !== "/"?name + "/":name}
    if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
     var caml_current_dir=globalThis.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    caml_current_dir = caml_trailing_slash(caml_current_dir);
    function caml_make_path(name)
     {name = caml_jsstring_of_string(name);
      if(! path_is_absolute(name))name = caml_current_dir + name;
      var comp0=path_is_absolute(name),comp=comp0[1].split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         default:ncomp.push(comp[i]);break}
      ncomp.unshift(comp0[0]);
      ncomp.orig = name;
      return ncomp}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_bytes_of_utf16_jsstring(s)
     {var tag=9;
      if(! jsoo_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_string_of_jsstring(s)
     {return caml_bytes_of_utf16_jsstring(s)}
    var
     unix_error=
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
    function make_unix_err_args(code,syscall,path,errno)
     {var variant=unix_error.indexOf(code);
      if(variant < 0){if(errno == null)errno = - 9999;variant = [0,errno]}
      var
       args=
        [variant,
         caml_string_of_jsstring(syscall || ""),
         caml_string_of_jsstring(path || "")];
      return args}
    var caml_named_values={};
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_raise_with_args(tag,args){throw [0,tag].concat(args)}
    function caml_bytes_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {caml_raise_sys_error(name + ": No such file or directory")}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_string(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.create_dir_if_needed
    =
    function(name)
     {var comp=name.split("/"),res="";
      for(var i=0;i < comp.length - 1;i++)
       {res += comp[i] + "/";
        if(this.content[res])continue;
        this.content[res] = Symbol("directory")}};
    MlFakeDevice.prototype.slash
    =
    function(name){return /\/$/.test(name)?name:name + "/"};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun
           (caml_string_of_jsbytes(this.root),caml_string_of_jsbytes(name));
        if(res !== 0)
         {this.create_dir_if_needed(name);
          this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]))}}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=this.slash(name);
      if(this.content[name_slash])return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {var unix_error=raise_unix && caml_named_value("Unix.Unix_error");
      if(this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("EEXIST","mkdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": File exists");
      var parent=/^(.*)\/[^/]+/.exec(name);
      parent = parent && parent[1] || "";
      if(! this.exists(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": No such file or directory");
      if(! this.is_dir(parent))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","mkdir",this.nm(parent)));
       else
        caml_raise_sys_error(parent + ": Not a directory");
      this.create_dir_if_needed(this.slash(name))};
    MlFakeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {var
       unix_error=raise_unix && caml_named_value("Unix.Unix_error"),
       name_slash=name == ""?"":this.slash(name),
       r=new RegExp("^" + name_slash + "([^/]+)");
      if(! this.exists(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOENT","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))
       if(unix_error)
        caml_raise_with_args
         (unix_error,make_unix_err_args("ENOTDIR","rmdir",this.nm(name)));
       else
        caml_raise_sys_error(name + ": Not a directory");
      for(var n in this.content)
       if(n.match(r))
        if(unix_error)
         caml_raise_with_args
          (unix_error,make_unix_err_args("ENOTEMPTY","rmdir",this.nm(name)));
        else
         caml_raise_sys_error(this.nm(name) + ": Directory not empty");
      delete this.content[name_slash]};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var name_slash=name == ""?"":this.slash(name);
      if(! this.exists(name))
       caml_raise_sys_error(name + ": No such file or directory");
      if(! this.is_dir(name))caml_raise_sys_error(name + ": Not a directory");
      var r=new RegExp("^" + name_slash + "([^/]+)"),seen={},a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {if(name == "")return true;
      var name_slash=this.slash(name);
      return this.content[name_slash]?1:0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.create_dir_if_needed(name);
         this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {var file;
      if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(caml_is_ml_bytes(content))file = new MlFakeFile(content);
      if(caml_is_ml_string(content))
       file = new MlFakeFile(caml_bytes_of_string(content));
      else
       if(content instanceof Array)
        file = new MlFakeFile(caml_bytes_of_array(content));
       else
        if(typeof content === "string")
         file = new MlFakeFile(caml_bytes_of_jsbytes(content));
        else
         if(content.toString)
          {var
            bytes=
             caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
           file = new MlFakeFile(bytes)}
      if(file)
       {this.create_dir_if_needed(name);this.content[name] = file}
      else
       caml_raise_sys_error
        (this.nm(name) + " : registering file with invalid content type")};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_ml_string_length(s){return caml_ml_bytes_length(s)}
    function caml_string_unsafe_get(s,i){return caml_bytes_unsafe_get(s,i)}
    function caml_array_of_string(s)
     {var l=caml_ml_string_length(s),a=new Array(l),i=0;
      for(;i < l;i++)a[i] = caml_string_unsafe_get(s,i);
      return a}
    function caml_array_of_bytes(s)
     {if(s.t != 4)caml_convert_bytes_to_array(s);return s.c}
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len)
     {try
       {this.fs.ftruncateSync(this.fd,len | 0)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.length
    =
    function()
     {try
       {return this.fs.fstatSync(this.fd).size}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof globalThis.Uint8Array))
       a = new (globalThis.Uint8Array)(a);
      var buffer=globalThis.Buffer.from(a);
      try
       {this.fs.writeSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_bytes(buf);
      if(! (a instanceof globalThis.Uint8Array))
       a = new (globalThis.Uint8Array)(a);
      var buffer=globalThis.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,buf_offset,len,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (globalThis.Uint8Array)(1),buffer=globalThis.Buffer.from(a);
      try
       {this.fs.readSync(this.fd,buffer,0,1,offset)}
      catch(err){caml_raise_sys_error(err.toString())}
      return buffer[0]};
    MlNodeFile.prototype.close
    =
    function()
     {try
       {this.fs.closeSync(this.fd)}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name)
     {try {return this.fs.existsSync(this.nm(name))?1:0}catch(err){return 0}};
    MlNodeDevice.prototype.mkdir
    =
    function(name,mode,raise_unix)
     {try
       {this.fs.mkdirSync(this.nm(name),{mode:mode});return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rmdir
    =
    function(name,raise_unix)
     {try
       {this.fs.rmdirSync(this.nm(name));return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readdir
    =
    function(name,raise_unix)
     {try
       {return this.fs.readdirSync(this.nm(name))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.is_dir
    =
    function(name)
     {try
       {return this.fs.statSync(this.nm(name)).isDirectory()?1:0}
      catch(err){caml_raise_sys_error(err.toString())}};
    MlNodeDevice.prototype.unlink
    =
    function(name,raise_unix)
     {try
       {var b=this.fs.existsSync(this.nm(name))?1:0;
        this.fs.unlinkSync(this.nm(name));
        return b}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.open
    =
    function(name,f,raise_unix)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      try
       {var fd=this.fs.openSync(this.nm(name),res);return new MlNodeFile(fd)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.rename
    =
    function(o,n,raise_unix)
     {try
       {this.fs.renameSync(this.nm(o),this.nm(n))}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.stat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.statSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.lstat
    =
    function(name,raise_unix)
     {try
       {var js_stats=this.fs.lstatSync(this.nm(name));
        return this.stats_from_js(js_stats)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.symlink
    =
    function(to_dir,target,path,raise_unix)
     {try
       {this.fs.symlinkSync(this.nm(target),this.nm(path),to_dir?"dir":"file");
        return 0}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.readlink
    =
    function(name,raise_unix)
     {try
       {var link=this.fs.readlinkSync(this.nm(name),"utf8");
        return caml_string_of_jsstring(link)}
      catch(err){this.raise_nodejs_error(err,raise_unix)}};
    MlNodeDevice.prototype.raise_nodejs_error
    =
    function(err,raise_unix)
     {var unix_error=caml_named_value("Unix.Unix_error");
      if(raise_unix && unix_error)
       {var args=make_unix_err_args(err.code,err.syscall,err.path,err.errno);
        caml_raise_with_args(unix_error,args)}
      else
       caml_raise_sys_error(err.toString())};
    MlNodeDevice.prototype.stats_from_js
    =
    function(js_stats)
     {var file_kind;
      if(js_stats.isFile())
       file_kind = 0;
      else
       if(js_stats.isDirectory())
        file_kind = 1;
       else
        if(js_stats.isCharacterDevice())
         file_kind = 2;
        else
         if(js_stats.isBlockDevice())
          file_kind = 3;
         else
          if(js_stats.isSymbolicLink())
           file_kind = 4;
          else
           if(js_stats.isFIFO())
            file_kind = 5;
           else
            if(js_stats.isSocket())file_kind = 6;
      return [0,
              js_stats.dev,
              js_stats.ino,
              file_kind,
              js_stats.mode,
              js_stats.nlink,
              js_stats.uid,
              js_stats.gid,
              js_stats.rdev,
              js_stats.size,
              js_stats.atimeMs,
              js_stats.mtimeMs,
              js_stats.ctimeMs]};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    function caml_get_root(path)
     {var x=path_is_absolute(path);if(! x)return;return x[0] + "/"}
    var
     caml_root=
      caml_get_root(caml_current_dir)
      ||
      caml_failwith("unable to compute caml_root"),
     jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:"/static/",device:new MlFakeDevice("/static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=caml_trailing_slash(name),
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      if(! res && fs_node_supported())
       {var root=caml_get_root(name);
        if(root && root.match(/^[a-zA-Z]:\/$/))
         {var m={path:root,device:new MlNodeDevice(root)};
          jsoo_mount_point.push(m);
          res
          =
          {path:m.path,
           device:m.device,
           rest:name.substring(m.path.length,name.length)}}}
      if(res)return res;
      caml_raise_sys_error("no device found for " + name_slash)}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function jsoo_create_file(name,content)
     {var
       name=caml_string_of_jsbytes(name),
       content=caml_string_of_jsbytes(content);
      return caml_create_file(name,content)}
    function caml_fs_init()
     {var tmp=globalThis.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        jsoo_create_file(tmp[i].name,tmp[i].content);
      globalThis.jsoo_create_file = jsoo_create_file;
      globalThis.caml_fs_tmp = [];
      return 0}
    function caml_get_exception_raw_backtrace(){return [0]}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_greaterthan(x,y){return + (caml_compare_val(x,y,false) > 0)}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_string_of_jsstring("nan");
        return caml_string_of_jsstring(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_string_of_jsstring
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_marshal_data_size(s,ofs)
     {function get32(s,i)
       {return caml_bytes_unsafe_get(s,i)
               <<
               24
               |
               caml_bytes_unsafe_get(s,i + 1)
               <<
               16
               |
               caml_bytes_unsafe_get(s,i + 2)
               <<
               8
               |
               caml_bytes_unsafe_get(s,i + 3)}
      if(get32(s,ofs) != (0x8495A6BE | 0))
       caml_failwith("Marshal.data_size: bad object");
      return get32(s,ofs + 4)}
    function MlStringReader(s,i)
     {this.s = caml_jsbytes_of_string(s);this.i = i}
    MlStringReader.prototype
    =
    {read8u:function(){return this.s.charCodeAt(this.i++)},
     read8s:function(){return this.s.charCodeAt(this.i++) << 24 >> 24},
     read16u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1)},
     read16s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1)},
     read32u:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return (s.charCodeAt(i)
               <<
               24
               |
               s.charCodeAt(i + 1)
               <<
               16
               |
               s.charCodeAt(i + 2)
               <<
               8
               |
               s.charCodeAt(i + 3))
              >>>
              0},
     read32s:
     function()
      {var s=this.s,i=this.i;
       this.i = i + 4;
       return s.charCodeAt(i)
              <<
              24
              |
              s.charCodeAt(i + 1)
              <<
              16
              |
              s.charCodeAt(i + 2)
              <<
              8
              |
              s.charCodeAt(i + 3)},
     readstr:
     function(len)
      {var i=this.i;
       this.i = i + len;
       return caml_string_of_jsbytes(this.s.substring(i,i + len))}};
    function caml_float_of_bytes(a)
     {return caml_int64_float_of_bits(caml_int64_of_bytes(a))}
    function caml_input_value_from_reader(reader,ofs)
     {var
       _magic=reader.read32u(),
       _block_len=reader.read32u(),
       num_objects=reader.read32u(),
       _size_32=reader.read32u(),
       _size_64=reader.read32u(),
       stack=[],
       intern_obj_table=num_objects > 0?[]:null,
       obj_counter=0;
      function intern_rec()
       {var code=reader.read8u();
        if(code >= 0x40)
         if(code >= 0x80)
          {var tag=code & 0xF,size=code >> 4 & 0x7,v=[tag];
           if(size == 0)return v;
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           stack.push(v,size);
           return v}
         else
          return code & 0x3F;
        else
         if(code >= 0x20)
          {var len=code & 0x1F,v=reader.readstr(len);
           if(intern_obj_table)intern_obj_table[obj_counter++] = v;
           return v}
         else
          switch(code)
           {case 0x00:return reader.read8s();
            case 0x01:return reader.read16s();
            case 0x02:return reader.read32s();
            case 0x03:caml_failwith("input_value: integer too large");break;
            case 0x04:
             var offset=reader.read8u();
             return intern_obj_table[obj_counter - offset];
            case 0x05:
             var offset=reader.read16u();
             return intern_obj_table[obj_counter - offset];
            case 0x06:
             var offset=reader.read32u();
             return intern_obj_table[obj_counter - offset];
            case 0x08:
             var
              header=reader.read32u(),
              tag=header & 0xFF,
              size=header >> 10,
              v=[tag];
             if(size == 0)return v;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             stack.push(v,size);
             return v;
            case 0x13:
             caml_failwith("input_value: data block too large");break;
            case 0x09:
             var len=reader.read8u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0A:
             var len=reader.read32u(),v=reader.readstr(len);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0C:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[7 - i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0B:
             var t=new Array(8);
             for(var i=0;i < 8;i++)t[i] = reader.read8u();
             var v=caml_float_of_bytes(t);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            case 0x0E:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0D:
             var len=reader.read8u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x07:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[7 - j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x0F:
             var len=reader.read32u(),v=new Array(len + 1);
             v[0] = 254;
             var t=new Array(8);
             for(var i=1;i <= len;i++)
              {for(var j=0;j < 8;j++)t[j] = reader.read8u();
               v[i] = caml_float_of_bytes(t)}
             return v;
            case 0x10:
            case 0x11:caml_failwith("input_value: code pointer");break;
            case 0x12:
            case 0x18:
            case 0x19:
             var c,s="";
             while((c = reader.read8u()) != 0)s += String.fromCharCode(c);
             var ops=caml_custom_ops[s],expected_size;
             if(! ops)
              caml_failwith("input_value: unknown custom block identifier");
             switch(code)
              {case 0x12:break;
               case 0x19:
                if(! ops.fixed_length)
                 caml_failwith
                  ("input_value: expected a fixed-size custom block");
                expected_size = ops.fixed_length;
                break;
               case 0x18:
                expected_size = reader.read32u();
                reader.read32s();
                reader.read32s();
                break
               }
             var old_pos=reader.i,size=[0],v=ops.deserialize(reader,size);
             if(expected_size != undefined)
              if(expected_size != size[0])
               caml_failwith
                ("input_value: incorrect length of serialized custom block");
             if(intern_obj_table)intern_obj_table[obj_counter++] = v;
             return v;
            default:caml_failwith("input_value: ill-formed message")}}
      var res=intern_rec();
      while(stack.length > 0)
       {var size=stack.pop(),v=stack.pop(),d=v.length;
        if(d < size)stack.push(v,size);
        v[d] = intern_rec()}
      if(typeof ofs != "number")ofs[0] = reader.i;
      return res}
    function caml_string_of_bytes(s){return s}
    function caml_input_value_from_bytes(s,ofs)
     {var
       reader=
        new
         MlStringReader
         (caml_string_of_bytes(s),typeof ofs == "number"?ofs:ofs[0]);
      return caml_input_value_from_reader(reader,ofs)}
    var caml_ml_channels=new Array();
    function caml_input_value(chanid)
     {var chan=caml_ml_channels[chanid],buf=caml_create_bytes(8);
      chan.file.read(chan.offset,buf,0,8);
      var len=caml_marshal_data_size(buf,0) + 20,buf=caml_create_bytes(len);
      chan.file.read(chan.offset,buf,0,len);
      var offset=[0],res=caml_input_value_from_bytes(buf,offset);
      chan.offset = chan.offset + offset[0];
      return res}
    function caml_int64_add(x,y){return x.add(y)}
    function caml_int64_bswap(x)
     {var y=caml_int64_to_bytes(x);
      return caml_int64_of_bytes([y[7],y[6],y[5],y[4],y[3],y[2],y[1],y[0]])}
    function caml_int64_div(x,y){return x.div(y)}
    function caml_int64_is_negative(x){return + x.isNeg()}
    function caml_int64_neg(x){return x.neg()}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=x.udivmod(wbase);
        x = p.quotient;
        buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_int64_mod(x,y){return x.mod(y)}
    function caml_int64_of_float(x)
     {if(x < 0)x = Math.ceil(x);
      return new
              MlInt64
              (x & 0xffffff,
               Math.floor(x * caml_int64_offset) & 0xffffff,
               Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff)}
    function caml_int64_ult(x,y){return x.ucompare(y) < 0}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int64_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       base64=caml_int64_of_int32(base),
       threshold=
        new MlInt64(0xffffff,0xfffffff,0xffff).udivmod(base64).quotient,
       c=caml_string_unsafe_get(s,i),
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=caml_int64_of_int32(d);
      for(;;)
       {i++;
        c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        if(caml_int64_ult(threshold,res))caml_failwith("int_of_string");
        d = caml_int64_of_int32(d);
        res = caml_int64_add(caml_int64_mul(base64,res),d);
        if(caml_int64_ult(res,d))caml_failwith("int_of_string")}
      if(i != caml_ml_string_length(s))caml_failwith("int_of_string");
      if(base == 10 && caml_int64_ult(new MlInt64(0,0,0x8000),res))
       caml_failwith("int_of_string");
      if(sign < 0)res = caml_int64_neg(res);
      return res}
    function caml_int64_or(x,y){return x.or(y)}
    function caml_int64_shift_left(x,s){return x.shift_left(s)}
    function caml_int64_shift_right(x,s){return x.shift_right(s)}
    function caml_int64_sub(x,y){return x.sub(y)}
    function caml_int64_to_float(x){return x.toFloat()}
    function caml_int64_xor(x,y){return x.xor(y)}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {var len=arguments.length,args=new Array(len + 1);
        args[0] = this;
        for(var i=0;i < len;i++)args[i + 1] = arguments[i];
        return caml_call_gen(f,args)}}
    function caml_lazy_make_forward(v){return [250,v]}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_lessthan(x,y){return + (caml_compare_val(x,y,false) < 0)}
    function caml_lex_array(s)
     {s = caml_jsbytes_of_string(s);
      var l=s.length / 2,a=new Array(l);
      for(var i=0;i < l;i++)
       a[i]
       =
       (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8)
       <<
       16
       >>
       16;
      return a}
    function caml_lex_engine(tbl,start_state,lexbuf)
     {var
       lex_buffer=2,
       lex_buffer_len=3,
       lex_start_pos=5,
       lex_curr_pos=6,
       lex_last_pos=7,
       lex_last_action=8,
       lex_eof_reached=9,
       lex_base=1,
       lex_backtrk=2,
       lex_default=3,
       lex_trans=4,
       lex_check=5;
      if(! tbl.lex_default)
       {tbl.lex_base = caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check = caml_lex_array(tbl[lex_check]);
        tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
        tbl.lex_default = caml_lex_array(tbl[lex_default])}
      var c,state=start_state,buffer=caml_array_of_bytes(lexbuf[lex_buffer]);
      if(state >= 0)
       {lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = - 1}
      else
       state = - state - 1;
      for(;;)
       {var base=tbl.lex_base[state];
        if(base < 0)return - base - 1;
        var backtrk=tbl.lex_backtrk[state];
        if(backtrk >= 0)
         {lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
        if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
         if(lexbuf[lex_eof_reached] == 0)return - state - 1;else c = 256;
        else
         {c = buffer[lexbuf[lex_curr_pos]];lexbuf[lex_curr_pos]++}
        if(tbl.lex_check[base + c] == state)
         state = tbl.lex_trans[base + c];
        else
         state = tbl.lex_default[state];
        if(state < 0)
         {lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
          if(lexbuf[lex_last_action] == - 1)
           caml_failwith("lexing: empty token");
          else
           return lexbuf[lex_last_action]}
        else
         if(c == 256)lexbuf[lex_eof_reached] = 0}}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    function caml_string_of_array(a)
     {return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a,0,a.length))}
    var
     caml_md5_bytes=
      function()
        {function add(x,y){return x + y | 0}
         function xx(q,a,b,x,s,t)
          {a = add(add(a,q),add(x,t));return add(a << s | a >>> 32 - s,b)}
         function ff(a,b,c,d,x,s,t){return xx(b & c | ~ b & d,a,b,x,s,t)}
         function gg(a,b,c,d,x,s,t){return xx(b & d | c & ~ d,a,b,x,s,t)}
         function hh(a,b,c,d,x,s,t){return xx(b ^ c ^ d,a,b,x,s,t)}
         function ii(a,b,c,d,x,s,t){return xx(c ^ (b | ~ d),a,b,x,s,t)}
         function md5(buffer,length)
          {var i=length;
           buffer[i >> 2] |= 0x80 << 8 * (i & 3);
           for(i = (i & ~ 0x3) + 8;(i & 0x3F) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 0x1FFFFFFF;
           var w=[0x67452301,0xEFCDAB89,0x98BADCFE,0x10325476];
           for(i = 0;i < buffer.length;i += 16)
            {var a=w[0],b=w[1],c=w[2],d=w[3];
             a = ff(a,b,c,d,buffer[i + 0],7,0xD76AA478);
             d = ff(d,a,b,c,buffer[i + 1],12,0xE8C7B756);
             c = ff(c,d,a,b,buffer[i + 2],17,0x242070DB);
             b = ff(b,c,d,a,buffer[i + 3],22,0xC1BDCEEE);
             a = ff(a,b,c,d,buffer[i + 4],7,0xF57C0FAF);
             d = ff(d,a,b,c,buffer[i + 5],12,0x4787C62A);
             c = ff(c,d,a,b,buffer[i + 6],17,0xA8304613);
             b = ff(b,c,d,a,buffer[i + 7],22,0xFD469501);
             a = ff(a,b,c,d,buffer[i + 8],7,0x698098D8);
             d = ff(d,a,b,c,buffer[i + 9],12,0x8B44F7AF);
             c = ff(c,d,a,b,buffer[i + 10],17,0xFFFF5BB1);
             b = ff(b,c,d,a,buffer[i + 11],22,0x895CD7BE);
             a = ff(a,b,c,d,buffer[i + 12],7,0x6B901122);
             d = ff(d,a,b,c,buffer[i + 13],12,0xFD987193);
             c = ff(c,d,a,b,buffer[i + 14],17,0xA679438E);
             b = ff(b,c,d,a,buffer[i + 15],22,0x49B40821);
             a = gg(a,b,c,d,buffer[i + 1],5,0xF61E2562);
             d = gg(d,a,b,c,buffer[i + 6],9,0xC040B340);
             c = gg(c,d,a,b,buffer[i + 11],14,0x265E5A51);
             b = gg(b,c,d,a,buffer[i + 0],20,0xE9B6C7AA);
             a = gg(a,b,c,d,buffer[i + 5],5,0xD62F105D);
             d = gg(d,a,b,c,buffer[i + 10],9,0x02441453);
             c = gg(c,d,a,b,buffer[i + 15],14,0xD8A1E681);
             b = gg(b,c,d,a,buffer[i + 4],20,0xE7D3FBC8);
             a = gg(a,b,c,d,buffer[i + 9],5,0x21E1CDE6);
             d = gg(d,a,b,c,buffer[i + 14],9,0xC33707D6);
             c = gg(c,d,a,b,buffer[i + 3],14,0xF4D50D87);
             b = gg(b,c,d,a,buffer[i + 8],20,0x455A14ED);
             a = gg(a,b,c,d,buffer[i + 13],5,0xA9E3E905);
             d = gg(d,a,b,c,buffer[i + 2],9,0xFCEFA3F8);
             c = gg(c,d,a,b,buffer[i + 7],14,0x676F02D9);
             b = gg(b,c,d,a,buffer[i + 12],20,0x8D2A4C8A);
             a = hh(a,b,c,d,buffer[i + 5],4,0xFFFA3942);
             d = hh(d,a,b,c,buffer[i + 8],11,0x8771F681);
             c = hh(c,d,a,b,buffer[i + 11],16,0x6D9D6122);
             b = hh(b,c,d,a,buffer[i + 14],23,0xFDE5380C);
             a = hh(a,b,c,d,buffer[i + 1],4,0xA4BEEA44);
             d = hh(d,a,b,c,buffer[i + 4],11,0x4BDECFA9);
             c = hh(c,d,a,b,buffer[i + 7],16,0xF6BB4B60);
             b = hh(b,c,d,a,buffer[i + 10],23,0xBEBFBC70);
             a = hh(a,b,c,d,buffer[i + 13],4,0x289B7EC6);
             d = hh(d,a,b,c,buffer[i + 0],11,0xEAA127FA);
             c = hh(c,d,a,b,buffer[i + 3],16,0xD4EF3085);
             b = hh(b,c,d,a,buffer[i + 6],23,0x04881D05);
             a = hh(a,b,c,d,buffer[i + 9],4,0xD9D4D039);
             d = hh(d,a,b,c,buffer[i + 12],11,0xE6DB99E5);
             c = hh(c,d,a,b,buffer[i + 15],16,0x1FA27CF8);
             b = hh(b,c,d,a,buffer[i + 2],23,0xC4AC5665);
             a = ii(a,b,c,d,buffer[i + 0],6,0xF4292244);
             d = ii(d,a,b,c,buffer[i + 7],10,0x432AFF97);
             c = ii(c,d,a,b,buffer[i + 14],15,0xAB9423A7);
             b = ii(b,c,d,a,buffer[i + 5],21,0xFC93A039);
             a = ii(a,b,c,d,buffer[i + 12],6,0x655B59C3);
             d = ii(d,a,b,c,buffer[i + 3],10,0x8F0CCC92);
             c = ii(c,d,a,b,buffer[i + 10],15,0xFFEFF47D);
             b = ii(b,c,d,a,buffer[i + 1],21,0x85845DD1);
             a = ii(a,b,c,d,buffer[i + 8],6,0x6FA87E4F);
             d = ii(d,a,b,c,buffer[i + 15],10,0xFE2CE6E0);
             c = ii(c,d,a,b,buffer[i + 6],15,0xA3014314);
             b = ii(b,c,d,a,buffer[i + 13],21,0x4E0811A1);
             a = ii(a,b,c,d,buffer[i + 4],6,0xF7537E82);
             d = ii(d,a,b,c,buffer[i + 11],10,0xBD3AF235);
             c = ii(c,d,a,b,buffer[i + 2],15,0x2AD7D2BB);
             b = ii(b,c,d,a,buffer[i + 9],21,0xEB86D391);
             w[0] = add(a,w[0]);
             w[1] = add(b,w[1]);
             w[2] = add(c,w[2]);
             w[3] = add(d,w[3])}
           var t=new Array(16);
           for(var i=0;i < 4;i++)
            for(var j=0;j < 4;j++)t[i * 4 + j] = w[i] >> 8 * j & 0xFF;
           return t}
         return function(s,ofs,len)
          {var buf=[],content=caml_ml_bytes_content(s);
           if(typeof content === "string")
            {var b=content;
             for(var i=0;i < len;i += 4)
              {var j=i + ofs;
               buf[i >> 2]
               =
               b.charCodeAt(j)
               |
               b.charCodeAt(j + 1)
               <<
               8
               |
               b.charCodeAt(j + 2)
               <<
               16
               |
               b.charCodeAt(j + 3)
               <<
               24}
             for(;i < len;i++)
              buf[i >> 2] |= b.charCodeAt(i + ofs) << 8 * (i & 3)}
           else
            {var a=content;
             for(var i=0;i < len;i += 4)
              {var j=i + ofs;
               buf[i >> 2]
               =
               a[j]
               |
               a[j + 1]
               <<
               8
               |
               a[j + 2]
               <<
               16
               |
               a[j + 3]
               <<
               24}
             for(;i < len;i++)buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)}
           return caml_string_of_array(md5(buf,len))}}
       ();
    function caml_md5_string(s,ofs,len)
     {return caml_md5_bytes(caml_bytes_of_string(s),ofs,len)}
    function caml_ml_channel_size(chanid)
     {var chan=caml_ml_channels[chanid];return chan.file.length()}
    function caml_sys_close(fd){delete caml_global_data.fds[fd];return 0}
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_ml_close_channel(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_flush(chanid);
      chan.opened = false;
      chan.file.close();
      caml_sys_close(chan.fd);
      return 0}
    function caml_ml_debug_info_status(){return 0}
    function caml_ml_refill_input(chan)
     {var str=chan.refill(),str_len=caml_ml_string_length(str);
      if(str_len == 0)chan.refill = null;
      chan.file.write(chan.file.length(),str,0,str_len);
      return str_len}
    function caml_ml_input(chanid,s,i,l)
     {var chan=caml_ml_channels[chanid],l2=chan.file.length() - chan.offset;
      if(l2 == 0 && chan.refill != null)l2 = caml_ml_refill_input(chan);
      if(l2 < l)l = l2;
      chan.file.read(chan.offset,s,i,l);
      chan.offset += l;
      return l}
    function caml_ml_may_refill_input(chanid)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill == null)return;
      if(chan.file.length() != chan.offset)return;
      caml_ml_refill_input(chan)}
    function caml_raise_end_of_file()
     {caml_raise_constant(caml_global_data.End_of_file)}
    function caml_ml_input_char(chanid)
     {var chan=caml_ml_channels[chanid];
      caml_ml_may_refill_input(chanid);
      if(chan.offset >= chan.file.length())caml_raise_end_of_file();
      var res=chan.file.read_one(chan.offset);
      chan.offset++;
      return res}
    function caml_ml_input_int(chanid)
     {var chan=caml_ml_channels[chanid],file=chan.file;
      while(chan.offset + 3 >= file.length())
       {var l=caml_ml_refill_input(chan);if(l == 0)caml_raise_end_of_file()}
      var
       o=chan.offset,
       r=
        file.read_one(o)
        <<
        24
        |
        file.read_one(o + 1)
        <<
        16
        |
        file.read_one(o + 2)
        <<
        8
        |
        file.read_one(o + 3);
      chan.offset += 4;
      return r}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_string_of_jsbytes(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=globalThis;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=globalThis;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (caml_jsbytes_of_string(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var refill=null;
      if(fd == 0 && fs_node_supported())
       {var fs=require("fs");
        refill
        =
        function(){return caml_string_of_jsstring(fs.readFileSync(0,"utf8"))}}
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:refill};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var bytes;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       bytes = buffer;
      else
       {bytes = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,bytes,0,len)}
      var
       string=caml_string_of_bytes(bytes),
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes
              (chanid,caml_bytes_of_string(buffer),offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_string_of_jsbytes(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_ml_output_int(chanid,i)
     {var
       arr=[i >> 24 & 0xFF,i >> 16 & 0xFF,i >> 8 & 0xFF,i & 0xFF],
       s=caml_string_of_array(arr);
      caml_ml_output(chanid,s,0,4);
      return 0}
    function caml_ml_pos_in(chanid){return caml_ml_channels[chanid].offset}
    function caml_ml_pos_out(chanid)
     {caml_ml_flush(chanid);return caml_ml_channels[chanid].offset}
    function caml_ml_seek_in(chanid,pos)
     {var chan=caml_ml_channels[chanid];
      if(chan.refill != null)caml_raise_sys_error("Illegal seek");
      chan.offset = pos;
      return 0}
    function caml_ml_seek_out(chanid,pos)
     {caml_ml_flush(chanid);caml_ml_channels[chanid].offset = pos;return 0}
    function caml_ml_set_binary_mode(chanid,mode)
     {var chan=caml_ml_channels[chanid],data=caml_global_data.fds[chan.fd];
      data.flags.text = ! mode;
      data.flags.binary = mode;
      return 0}
    function caml_ml_set_channel_name(){return 0}
    function caml_mod(x,y){if(y == 0)caml_raise_zero_divide();return x % y}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_obj_make_forward(b,v){b[0] = 250;b[1] = v;return 0}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(caml_is_ml_bytes(x))
        return 252;
       else
        if(caml_is_ml_string(x))
         return 252;
        else
         if(x instanceof Function || typeof x == "function")
          return 247;
         else
          if(x && x.caml_custom)return 255;else return 1000}
    function caml_out_channel_pos_fd(chan)
     {var info=caml_ml_channels[chan];return info.offset}
    function caml_record_backtrace(){return 0}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && globalThis.toplevelReloc)
       n = globalThis.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_string_equal(s1,s2){return caml_bytes_equal(s1,s2)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_string_get(s,i)
     {if(i >>> 0 >= caml_ml_string_length(s))caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_lessequal(s1,s2){return caml_bytes_lessequal(s1,s2)}
    function caml_string_greaterequal(s1,s2)
     {return caml_string_lessequal(s2,s1)}
    function caml_string_lessthan(s1,s2){return caml_bytes_lessthan(s1,s2)}
    function caml_string_greaterthan(s1,s2)
     {return caml_string_lessthan(s2,s1)}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    var
     caml_argv=
      function()
        {var g=globalThis,main="a.out",args=[];
         if(g.process && g.process.argv && g.process.argv.length > 1)
          {var argv=g.process.argv;main = argv[1];args = argv.slice(2)}
         var p=caml_string_of_jsstring(main),args2=[0,p];
         for(var i=0;i < args.length;i++)
          args2.push(caml_string_of_jsstring(args[i]));
         return args2}
       ();
    function caml_sys_argv(a){return caml_argv}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_sys_exit(code)
     {var g=globalThis;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    var
     os_type=
      globalThis.process
       &&
       globalThis.process.platform
       &&
       globalThis.process.platform
       ==
       "win32"
       ?"Cygwin"
       :"Unix";
    function caml_sys_get_config()
     {return [0,caml_string_of_jsbytes(os_type),32,0]}
    function caml_sys_getcwd()
     {return caml_string_of_jsbytes(caml_current_dir)}
    function caml_raise_not_found()
     {caml_raise_constant(caml_global_data.Not_found)}
    function caml_sys_getenv(name)
     {var g=globalThis,n=caml_jsstring_of_string(name);
      if(g.process && g.process.env && g.process.env[n] != undefined)
       return caml_string_of_jsstring(g.process.env[n]);
      if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
       return caml_string_of_jsstring(globalThis.jsoo_static_env[n]);
      caml_raise_not_found()}
    function caml_sys_random_seed()
     {if(globalThis.crypto)
       if(typeof globalThis.crypto.getRandomValues === "function")
        {var a=new (globalThis.Uint32Array)(1);
         globalThis.crypto.getRandomValues(a);
         return [0,a[0]]}
       else
        if(globalThis.crypto.randomBytes === "function")
         {var
           buff=globalThis.crypto.randomBytes(4),
           a=new (globalThis.Uint32Array)(buff);
          return [0,a[0]]}
      var now=new Date().getTime(),x=now ^ 0xffffffff * Math.random();
      return [0,x]}
    function caml_sys_remove(name)
     {var root=resolve_fs_device(name),ok=root.device.unlink(root.rest);
      if(ok == 0)caml_raise_no_such_file(caml_jsbytes_of_string(name));
      return 0}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_return_exn_constant(tag){return tag}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (globalThis.RangeError
        &&
        e instanceof globalThis.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (globalThis.InternalError
        &&
        e instanceof globalThis.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof globalThis.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_string_of_jsstring(String(e))]}
    var expect_test_collector_saved_stderr,expect_test_collector_saved_stdout;
    function expect_test_collector_after_test(vstdout,vstderr)
     {caml_ml_channels[vstdout] = expect_test_collector_saved_stdout;
      caml_ml_channels[vstderr] = expect_test_collector_saved_stderr;
      return 0}
    function expect_test_collector_before_test(voutput,vstdout,vstderr)
     {expect_test_collector_saved_stderr = caml_ml_channels[vstderr];
      expect_test_collector_saved_stdout = caml_ml_channels[vstdout];
      var output=caml_ml_channels[voutput];
      caml_ml_channels[vstdout] = output;
      caml_ml_channels[vstderr] = output;
      return 0}
    var ms_to_nano=caml_int64_of_int32(1000 * 1000);
    function time_now_nanoseconds_since_unix_epoch_or_zero()
     {var ms=Date.now(),ms_i63=caml_int64_of_float(ms * 2);
      return caml_int64_mul(ms_i63,ms_to_nano)}
    function unix_inet_addr_of_string(){return 0}
    function caml_is_special_exception(exn)
     {switch(exn[2]){case - 8:case - 11:case - 12:return 1;default:return 0}}
    function caml_format_exception(exn)
     {var r="";
      if(exn[0] == 0)
       {r += exn[1][1];
        if
         (exn.length
          ==
          3
          &&
          exn[2][0]
          ==
          0
          &&
          caml_is_special_exception(exn[1]))
         var bucket=exn[2],start=1;
        else
         var start=2,bucket=exn;
        r += "(";
        for(var i=start;i < bucket.length;i++)
         {if(i > start)r += ", ";
          var v=bucket[i];
          if(typeof v == "number")
           r += v.toString();
          else
           if(v instanceof MlBytes)
            r += '"' + v.toString() + '"';
           else
            if(typeof v == "string")
             r += '"' + v.toString() + '"';
            else
             r += "_"}
        r += ")"}
      else
       if(exn[0] == 248)r += exn[1];
      return r}
    function caml_fatal_uncaught_exception(err)
     {if(err instanceof Array && (err[0] == 0 || err[0] == 248))
       {var handler=caml_named_value("Printexc.handle_uncaught_exception");
        if(handler)
         handler(err,false);
        else
         {var
           msg=caml_format_exception(err),
           at_exit=caml_named_value("Pervasives.do_at_exit");
          if(at_exit)at_exit(0);
          globalThis.console.error("Fatal error: exception " + msg + "\n")}}
      else
       throw err}
    function caml_setup_uncaught_exception_handler()
     {var g=globalThis;
      if(g.process && g.process.on)
       g.process.on
        ("uncaughtException",
         function(err,origin)
          {caml_fatal_uncaught_exception(err);g.process.exit(2)});
      else
       if(g.addEventListener)
        g.addEventListener
         ("error",
          function(event)
           {if(event.error)caml_fatal_uncaught_exception(event.error)})}
    caml_setup_uncaught_exception_handler();
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4?f(a0,a1,a2,a3):caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    caml_fs_init();
    var
     Out_of_memory=[248,caml_string_of_jsbytes("Out_of_memory"),-1],
     Sys_error=[248,caml_string_of_jsbytes("Sys_error"),-2],
     Failure=[248,caml_string_of_jsbytes("Failure"),-3],
     Invalid_argument=[248,caml_string_of_jsbytes("Invalid_argument"),-4],
     End_of_file=[248,caml_string_of_jsbytes("End_of_file"),-5],
     Division_by_zero=[248,caml_string_of_jsbytes("Division_by_zero"),-6],
     Not_found=[248,caml_string_of_jsbytes("Not_found"),-7],
     Match_failure=[248,caml_string_of_jsbytes("Match_failure"),-8],
     Stack_overflow=[248,caml_string_of_jsbytes("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_string_of_jsbytes("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_string_of_jsbytes("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_string_of_jsbytes("Undefined_recursive_module"),-12],
     mode=[0,0,[0,6,0]],
     msg=caml_string_of_jsbytes("Obj.Ephemeron.set_key"),
     zero$0=caml_int64_create_lo_mi_hi(0,0,0),
     y=caml_int64_create_lo_mi_hi(1,0,0),
     minus_one=caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     min_int64=caml_int64_create_lo_mi_hi(0,0,32768),
     max_int64=caml_int64_create_lo_mi_hi(16777215,16777215,32767),
     dummy_pos=[0,caml_string_of_jsbytes(""),0,0,-1],
     zero_pos=[0,caml_string_of_jsbytes(""),1,0,0],
     sub_format=[0,0,caml_string_of_jsbytes("")],
     formatting_lit=[0,caml_string_of_jsbytes("@;"),1,0],
     opt=[0,103],
     partial=[4,0,0,0,[12,45,[4,0,0,0,0]]],
     locfmt=
      [0,
       [11,
        caml_string_of_jsbytes('File "'),
        [2,
         0,
         [11,
          caml_string_of_jsbytes('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,45,[4,0,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]]]]]],
       caml_string_of_jsbytes('File "%s", line %d, characters %d-%d: %s')],
     null$0=caml_string_of_jsbytes("/dev/null"),
     current_dir_name=caml_string_of_jsbytes("."),
     parent_dir_name=caml_string_of_jsbytes(".."),
     dir_sep=caml_string_of_jsbytes("/"),
     quotequote=caml_string_of_jsbytes("'\\''"),
     null$1=caml_string_of_jsbytes("NUL"),
     current_dir_name$0=caml_string_of_jsbytes("."),
     parent_dir_name$0=caml_string_of_jsbytes(".."),
     dir_sep$0=caml_string_of_jsbytes("\\"),
     null$2=caml_string_of_jsbytes("/dev/null"),
     current_dir_name$1=caml_string_of_jsbytes("."),
     parent_dir_name$1=caml_string_of_jsbytes(".."),
     dir_sep$1=caml_string_of_jsbytes("/"),
     description=caml_string_of_jsbytes("internalhash"),
     module_name=caml_string_of_jsbytes("Base.Exn"),
     module_name$0=caml_string_of_jsbytes("Base.Info"),
     module_name$1=caml_string_of_jsbytes("Base.Error"),
     loc=caml_string_of_jsbytes("sign0.ml.t"),
     module_name$2=caml_string_of_jsbytes("Base.Sign"),
     module_name$3=caml_string_of_jsbytes("Base.Unit"),
     module_name$4=caml_string_of_jsbytes("Base.Char"),
     module_name$5=caml_string_of_jsbytes("Base.Bytes"),
     ocaml_lex_tables=
      [0,
       caml_string_of_jsbytes("\0\0\0\0\x01\0\x01\0\x02\0\x1b\0R\0i\0"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x01\0"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\x01\0\x03\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\x06\0\x04\0\0\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\x04\0\x05\0\0\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x07\0\x07\0\x07\0\x07\0\x07\0\x
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\0\0\x02\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\x01\0\x03\0\xff\xff\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x03\0\x05\0\xff\xff\x05\0\x05\0\x05\0\x05\0\x05\0\x05\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes("")],
     m1=caml_int64_create_lo_mi_hi(5592405,5592405,21845),
     m2=caml_int64_create_lo_mi_hi(3355443,3355443,13107),
     m4=caml_int64_create_lo_mi_hi(986895,986895,3855),
     h01=caml_int64_create_lo_mi_hi(65793,65793,257),
     module_name$6=caml_string_of_jsbytes("Base.Int.Hex"),
     module_name$7=caml_string_of_jsbytes("Base.Int"),
     module_name$8=caml_string_of_jsbytes("Base.Nativeint"),
     module_name$9=caml_string_of_jsbytes("Base.Int64"),
     mask=caml_int64_create_lo_mi_hi(16777214,16777215,65535),
     module_name$10=caml_string_of_jsbytes("Base.Int63.Hex"),
     module_name$11=caml_string_of_jsbytes("Base.Int63"),
     module_name$12=caml_string_of_jsbytes("Base.Bool"),
     module_name$13=caml_string_of_jsbytes("Base.Int32"),
     module_name$14=caml_string_of_jsbytes("Base.Float"),
     prefix=caml_string_of_jsbytes("b"),
     enable_everything=[0,0,0],
     am_running_inline_test_env_var=
      caml_string_of_jsbytes("TESTING_FRAMEWORK"),
     ocaml_lex_tables$0=
      [0,
       caml_string_of_jsbytes
        ("\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\0\0\x01\0\xff\xff\x02\0\0\0\0\0\x01\0\0\0\x02\0\x01\0\x03\0\0\0\x03\0\x03\0\0\0\x01\0\t\0\x05\0\x02\0\x04\0\x11\0\f\0\x0e\0\x04\0\x11\0\x12\0\x1a\0\x1c\0\x05\0\x1b\0\x10\0\x14\0\x17\0\x06\0U\0\xfd\xff\xfe\xff\x01\0.\0/\0(\0\x1f\0.\x000\0\x07\0O\0\x1c\0>\0\b\0\xff\xff\t\0C\0C\0g\0d\0i\0_\0k\0_\0q\0\n\0h\0h\0t\0h\0z\0h\0t\0o\0q\0\x0b\0t\0u\0}\0\x7f\0\f\0~\0s\0w\0z\0\r\0"),
       caml_string_of_jsbytes
        ("\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\b\0\f\0\x0e\0\x18\0\f\0'\0\f\x007\0;\0=\0G\0;\0V\0;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x000\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\x001\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\"\0\x03\0\x1d\0\x07\0\x06\0\n\0\t\0\x17\0\x04\0\x11\0\x13\0\x15\0\x12\0\x1b\0\x19\0\x0f\0\x1a\0\x10\0\x05\0\x0b\0\x14\0\x16\0\x1c\0\x1e\0\r\0\x1f\0 \0!\0#\0$\0%\0&\0(\0)\0*\0+\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0Q\x002\x003\x004\x005\x006\0<\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\0.\x009\x
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x0b\0\r\0\x17\0!\0&\0+\x006\0:\0<\0F\0P\0U\0Z\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0/\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0/\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\0\x02\0\x1c\0\x06\0\x05\0\b\0\b\0\x16\0\x03\0\x10\0\x12\0\x14\0\x11\0\x1a\0\x18\0\x0e\0\x19\0\x0f\0\x04\0\n\0\x13\0\x15\0\x1b\0\x1d\0\t\0\x1e\0\x1f\0 \0\"\0#\0$\0%\0'\0(\0)\0*\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\x000\x001\x002\x003\x004\x005\x008\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\x007\x007\x009\0=\0,\0>\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0?\0@\0A\0B\0C\0D\0E\0G\0H\0I\0J\0K\0L\0M\0N\0O\0Q\0R\0S\0T\0V\0W\0X\0Y\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff,\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes("")],
     suffix=caml_string_of_jsbytes("output"),
     prefix$0=caml_string_of_jsbytes("expect-test"),
     opt$0=[0,-1],
     fmt=
      [0,
       [11,caml_string_of_jsbytes("Error: "),[15,0]],
       caml_string_of_jsbytes("Error: %a")],
     _0=[1,caml_string_of_jsbytes("0")],
     _1=[1,caml_string_of_jsbytes("1")],
     c=[0,caml_string_of_jsbytes("c")],
     r$0=[0,caml_string_of_jsbytes("r")],
     y$0=[0,caml_string_of_jsbytes("y")],
     x=[0,caml_string_of_jsbytes("x")],
     b=[0,caml_string_of_jsbytes("b")],
     c$0=[0,caml_string_of_jsbytes("c")],
     a=[0,caml_string_of_jsbytes("a")],
     r$1=[0,caml_string_of_jsbytes("r")],
     m$0=[0,caml_string_of_jsbytes("m")],
     n=[0,caml_string_of_jsbytes("n")],
     d=[0,caml_string_of_jsbytes("d")],
     goal=
      [4,
       caml_string_of_jsbytes("appendo"),
       [0,
        [2,
         [1,caml_string_of_jsbytes("a")],
         [2,[1,caml_string_of_jsbytes("b")],0]],
        [0,
         [2,
          [1,caml_string_of_jsbytes("c")],
          [2,[1,caml_string_of_jsbytes("d")],0]],
         [0,[0,caml_string_of_jsbytes("xys")],0]]]],
     public_methods=[0,caml_string_of_jsbytes("runAppendo")],
     partial$0=[0,caml_string_of_jsbytes("tmp")],
     partial$1=[0,caml_string_of_jsbytes("h")],
     partial$2=
      [0,
       [0,caml_string_of_jsbytes("tl")],
       [0,
        [0,caml_string_of_jsbytes("ys")],
        [0,[0,caml_string_of_jsbytes("tmp")],0]]],
     appendo_body=
      [2,
       [0,
        [1,
         [0,
          [0,[0,caml_string_of_jsbytes("xs")],0],
          [0,
           [0,
            [0,caml_string_of_jsbytes("ys")],
            [0,caml_string_of_jsbytes("xys")]],
           0]]],
        [0,
         [3,
          caml_string_of_jsbytes("h"),
          [3,
           caml_string_of_jsbytes("tmp"),
           [3,
            caml_string_of_jsbytes("tl"),
            [1,
             [0,
              [0,
               [2,
                [0,caml_string_of_jsbytes("h")],
                [0,caml_string_of_jsbytes("tl")]],
               [0,caml_string_of_jsbytes("xs")]],
              [0,
               [0,[2,partial$1,partial$0],[0,caml_string_of_jsbytes("xys")]],
               [0,[4,caml_string_of_jsbytes("appendo"),partial$2],0]]]]]]],
         0]]];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _o_=caml_string_of_jsbytes("really_input"),
     _n_=caml_string_of_jsbytes("input"),
     _m_=caml_string_of_jsbytes("output_substring"),
     _l_=[0,1,[0,3,[0,4,[0,6,0]]]],
     _k_=[0,1,[0,3,[0,4,[0,7,0]]]],
     _j_=caml_string_of_jsbytes("%.12g"),
     _i_=caml_string_of_jsbytes("."),
     _f_=caml_string_of_jsbytes("false"),
     _g_=caml_string_of_jsbytes("true"),
     _h_=caml_string_of_jsbytes("bool_of_string"),
     _d_=caml_string_of_jsbytes("true"),
     _e_=caml_string_of_jsbytes("false"),
     _c_=caml_string_of_jsbytes("char_of_int"),
     _a_=caml_string_of_jsbytes("Stdlib.Exit"),
     _b_=caml_int64_create_lo_mi_hi(1,0,32752),
     _q_=caml_string_of_jsbytes("\\\\"),
     _r_=caml_string_of_jsbytes("\\'"),
     _s_=caml_string_of_jsbytes("\\b"),
     _t_=caml_string_of_jsbytes("\\t"),
     _u_=caml_string_of_jsbytes("\\n"),
     _v_=caml_string_of_jsbytes("\\r"),
     _p_=caml_string_of_jsbytes("Char.chr"),
     _w_=caml_string_of_jsbytes("Stdlib.Sys.Break"),
     _z_=caml_string_of_jsbytes("String.blit / Bytes.blit_string"),
     _y_=caml_string_of_jsbytes("Bytes.blit"),
     _x_=caml_string_of_jsbytes("String.sub / Bytes.sub"),
     _D_=caml_string_of_jsbytes("String.contains_from / Bytes.contains_from"),
     _C_=caml_string_of_jsbytes("String.index_from / Bytes.index_from"),
     _B_=caml_string_of_jsbytes(""),
     _A_=caml_string_of_jsbytes("String.concat"),
     _G_=caml_string_of_jsbytes("Obj.Ephemeron.create"),
     _F_=caml_string_of_jsbytes("Obj.extension_constructor"),
     _E_=caml_string_of_jsbytes("Obj.extension_constructor"),
     _J_=caml_string_of_jsbytes("Array.blit"),
     _I_=caml_string_of_jsbytes("Array.sub"),
     _H_=caml_string_of_jsbytes("Array.init"),
     _K_=caml_string_of_jsbytes("%d"),
     _O_=caml_string_of_jsbytes("%d"),
     _N_=caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     _M_=caml_int64_create_lo_mi_hi(0,0,0),
     _L_=caml_int64_create_lo_mi_hi(1,0,0),
     _P_=caml_string_of_jsbytes("%d"),
     _Q_=caml_string_of_jsbytes("Stdlib.Parsing.Parse_error"),
     _W_=caml_string_of_jsbytes("Map.remove_min_elt"),
     _X_=[0,0,0,0],
     _Y_=[0,caml_string_of_jsbytes("map.ml"),400,10],
     _Z_=[0,0,0],
     _R_=caml_string_of_jsbytes("Map.bal"),
     _S_=caml_string_of_jsbytes("Map.bal"),
     _U_=caml_string_of_jsbytes("Map.bal"),
     _V_=caml_string_of_jsbytes("Map.bal"),
     _$_=caml_string_of_jsbytes("Stdlib.Stack.Empty"),
     _aa_=caml_string_of_jsbytes("Stdlib.Queue.Empty"),
     _ab_=caml_string_of_jsbytes("CamlinternalLazy.Undefined"),
     _ac_=caml_string_of_jsbytes("Stdlib.Stream.Failure"),
     _ad_=caml_string_of_jsbytes("Stdlib.Stream.Error"),
     _ai_=caml_string_of_jsbytes("Buffer.add_substring/add_subbytes"),
     _ah_=caml_string_of_jsbytes("Buffer.add: cannot grow buffer"),
     _ag_=[0,caml_string_of_jsbytes("buffer.ml"),93,2],
     _af_=[0,caml_string_of_jsbytes("buffer.ml"),94,2],
     _ae_=caml_string_of_jsbytes("Buffer.sub"),
     _as_=caml_string_of_jsbytes("%c"),
     _at_=caml_string_of_jsbytes("%s"),
     _au_=caml_string_of_jsbytes("%i"),
     _av_=caml_string_of_jsbytes("%li"),
     _aw_=caml_string_of_jsbytes("%ni"),
     _ax_=caml_string_of_jsbytes("%Li"),
     _ay_=caml_string_of_jsbytes("%f"),
     _az_=caml_string_of_jsbytes("%B"),
     _aA_=caml_string_of_jsbytes("%{"),
     _aB_=caml_string_of_jsbytes("%}"),
     _aC_=caml_string_of_jsbytes("%("),
     _aD_=caml_string_of_jsbytes("%)"),
     _aE_=caml_string_of_jsbytes("%a"),
     _aF_=caml_string_of_jsbytes("%t"),
     _aG_=caml_string_of_jsbytes("%?"),
     _aH_=caml_string_of_jsbytes("%r"),
     _aI_=caml_string_of_jsbytes("%_r"),
     _aJ_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),850,23],
     _aU_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),814,21],
     _aM_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),815,21],
     _aV_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),818,21],
     _aN_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),819,21],
     _aW_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),822,19],
     _aO_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),823,19],
     _aX_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),826,22],
     _aP_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),827,22],
     _aY_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),831,30],
     _aQ_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),832,30],
     _aS_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),836,26],
     _aK_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),837,26],
     _aT_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),846,28],
     _aL_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),847,28],
     _aR_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),851,23],
     _bU_=caml_string_of_jsbytes("%u"),
     _bS_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1558,4],
     _bT_=caml_string_of_jsbytes("Printf: bad conversion %["),
     _bV_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1626,39],
     _bW_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1649,31],
     _bX_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),1650,31],
     _bY_=caml_string_of_jsbytes("Printf: bad conversion %_"),
     _bZ_=caml_string_of_jsbytes("@{"),
     _b0_=caml_string_of_jsbytes("@["),
     _b1_=caml_string_of_jsbytes("@{"),
     _b2_=caml_string_of_jsbytes("@["),
     _b3_=caml_string_of_jsbytes("@{"),
     _b4_=caml_string_of_jsbytes("@["),
     _c4_=
      [0,
       [11,
        caml_string_of_jsbytes("bad input: format type mismatch between "),
        [3,0,[11,caml_string_of_jsbytes(" and "),[3,0,0]]]],
       caml_string_of_jsbytes
        ("bad input: format type mismatch between %S and %S")],
     _ch_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", duplicate flag "),[1,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, duplicate flag %C")],
     _ck_=caml_string_of_jsbytes("0"),
     _ci_=caml_string_of_jsbytes("padding"),
     _cj_=[0,1,0],
     _cl_=[0,0],
     _cm_=caml_string_of_jsbytes("precision"),
     _cn_=[1,0],
     _co_=[1,1],
     _cy_=caml_string_of_jsbytes("'*'"),
     _cv_=caml_string_of_jsbytes("'-'"),
     _cw_=caml_string_of_jsbytes("'0'"),
     _cx_=caml_string_of_jsbytes("'*'"),
     _cs_=caml_string_of_jsbytes("0"),
     _ct_=[1,1],
     _cu_=caml_string_of_jsbytes("0"),
     _cp_=caml_string_of_jsbytes("precision"),
     _cq_=[1,1],
     _cr_=caml_string_of_jsbytes("precision"),
     _cJ_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", flag "),
            [1,
             [11,
              caml_string_of_jsbytes(" is only allowed after the '"),
              [12,
               37,
               [11,
                caml_string_of_jsbytes("', before padding and precision"),
                0]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision")],
     _cz_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(', invalid conversion "'),
            [12,37,[0,[12,34,0]]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: at character number %d, invalid conversion "%%%c"')],
     _cA_=caml_string_of_jsbytes("'+'"),
     _cB_=caml_string_of_jsbytes("'#'"),
     _cC_=caml_string_of_jsbytes("' '"),
     _cD_=[0,0],
     _cE_=caml_string_of_jsbytes("`padding'"),
     _cF_=[0,0],
     _cG_=caml_string_of_jsbytes("`precision'"),
     _cH_=caml_string_of_jsbytes("'+'"),
     _cI_=caml_string_of_jsbytes("'_'"),
     _cK_=[0,[12,64,0]],
     _cL_=[0,caml_string_of_jsbytes("@ "),1,0],
     _cM_=[0,caml_string_of_jsbytes("@,"),0,0],
     _cN_=[2,60],
     _cO_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": '"),
          [12,
           37,
           [11,
            caml_string_of_jsbytes
             ("' alone is not accepted in character sets, use "),
            [12,
             37,
             [12,
              37,
              [11,
               caml_string_of_jsbytes(" instead at position "),
               [4,0,0,0,[12,46,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.")],
     _cP_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": integer "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(" is greater than the limit "),
            [4,0,0,0,0]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: integer %d is greater than the limit %d")],
     _cR_=caml_string_of_jsbytes("digit"),
     _cQ_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2837,11],
     _cS_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(': unclosed sub-format, expected "'),
          [12,
           37,
           [0,
            [11,caml_string_of_jsbytes('" at character number '),[4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes
        ('invalid format %S: unclosed sub-format, expected "%%%c" at character number %d')],
     _cT_=caml_string_of_jsbytes("character ')'"),
     _cU_=caml_string_of_jsbytes("character '}'"),
     _cV_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2899,34],
     _c0_=caml_string_of_jsbytes("'#'"),
     _cW_=caml_string_of_jsbytes("'+'"),
     _cX_=caml_string_of_jsbytes("'+'"),
     _cY_=caml_string_of_jsbytes("' '"),
     _cZ_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2935,28],
     _c2_=caml_string_of_jsbytes("'+'"),
     _c1_=[0,caml_string_of_jsbytes("camlinternalFormat.ml"),2957,11],
     _c3_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,
             0,
             [11,
              caml_string_of_jsbytes(" is incompatible with '"),
              [0,[11,caml_string_of_jsbytes("' in sub-format "),[3,0,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S")],
     _cg_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", "),
            [2,0,[11,caml_string_of_jsbytes(" expected, read "),[1,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, %s expected, read %C")],
     _cf_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", '"),
            [0,[11,caml_string_of_jsbytes("' without "),[2,0,0]]]]]]]],
       caml_string_of_jsbytes
        ("invalid format %S: at character number %d, '%c' without %s")],
     _ce_=
      caml_string_of_jsbytes
       ("non-zero widths are unsupported for %c conversions"),
     _cd_=caml_string_of_jsbytes("unexpected end of format"),
     _cc_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid format "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(": at character number "),
          [4,0,0,0,[11,caml_string_of_jsbytes(", "),[2,0,0]]]]]],
       caml_string_of_jsbytes("invalid format %S: at character number %d, %s")],
     _b7_=
      [0,
       [11,caml_string_of_jsbytes("invalid box description "),[3,0,0]],
       caml_string_of_jsbytes("invalid box description %S")],
     _b5_=caml_string_of_jsbytes(""),
     _b6_=[0,0,4],
     _b8_=caml_string_of_jsbytes(""),
     _b9_=caml_string_of_jsbytes("b"),
     _b__=caml_string_of_jsbytes("h"),
     _b$_=caml_string_of_jsbytes("hov"),
     _ca_=caml_string_of_jsbytes("hv"),
     _cb_=caml_string_of_jsbytes("v"),
     _bR_=caml_string_of_jsbytes("nan"),
     _bP_=caml_string_of_jsbytes("neg_infinity"),
     _bQ_=caml_string_of_jsbytes("infinity"),
     _bO_=caml_string_of_jsbytes("."),
     _bC_=caml_string_of_jsbytes("%+nd"),
     _bD_=caml_string_of_jsbytes("% nd"),
     _bF_=caml_string_of_jsbytes("%+ni"),
     _bG_=caml_string_of_jsbytes("% ni"),
     _bH_=caml_string_of_jsbytes("%nx"),
     _bI_=caml_string_of_jsbytes("%#nx"),
     _bJ_=caml_string_of_jsbytes("%nX"),
     _bK_=caml_string_of_jsbytes("%#nX"),
     _bL_=caml_string_of_jsbytes("%no"),
     _bM_=caml_string_of_jsbytes("%#no"),
     _bB_=caml_string_of_jsbytes("%nd"),
     _bE_=caml_string_of_jsbytes("%ni"),
     _bN_=caml_string_of_jsbytes("%nu"),
     _bp_=caml_string_of_jsbytes("%+ld"),
     _bq_=caml_string_of_jsbytes("% ld"),
     _bs_=caml_string_of_jsbytes("%+li"),
     _bt_=caml_string_of_jsbytes("% li"),
     _bu_=caml_string_of_jsbytes("%lx"),
     _bv_=caml_string_of_jsbytes("%#lx"),
     _bw_=caml_string_of_jsbytes("%lX"),
     _bx_=caml_string_of_jsbytes("%#lX"),
     _by_=caml_string_of_jsbytes("%lo"),
     _bz_=caml_string_of_jsbytes("%#lo"),
     _bo_=caml_string_of_jsbytes("%ld"),
     _br_=caml_string_of_jsbytes("%li"),
     _bA_=caml_string_of_jsbytes("%lu"),
     _bc_=caml_string_of_jsbytes("%+Ld"),
     _bd_=caml_string_of_jsbytes("% Ld"),
     _bf_=caml_string_of_jsbytes("%+Li"),
     _bg_=caml_string_of_jsbytes("% Li"),
     _bh_=caml_string_of_jsbytes("%Lx"),
     _bi_=caml_string_of_jsbytes("%#Lx"),
     _bj_=caml_string_of_jsbytes("%LX"),
     _bk_=caml_string_of_jsbytes("%#LX"),
     _bl_=caml_string_of_jsbytes("%Lo"),
     _bm_=caml_string_of_jsbytes("%#Lo"),
     _bb_=caml_string_of_jsbytes("%Ld"),
     _be_=caml_string_of_jsbytes("%Li"),
     _bn_=caml_string_of_jsbytes("%Lu"),
     _a1_=caml_string_of_jsbytes("%+d"),
     _a2_=caml_string_of_jsbytes("% d"),
     _a4_=caml_string_of_jsbytes("%+i"),
     _a5_=caml_string_of_jsbytes("% i"),
     _a6_=caml_string_of_jsbytes("%x"),
     _a7_=caml_string_of_jsbytes("%#x"),
     _a8_=caml_string_of_jsbytes("%X"),
     _a9_=caml_string_of_jsbytes("%#X"),
     _a__=caml_string_of_jsbytes("%o"),
     _a$_=caml_string_of_jsbytes("%#o"),
     _a0_=caml_string_of_jsbytes("%d"),
     _a3_=caml_string_of_jsbytes("%i"),
     _ba_=caml_string_of_jsbytes("%u"),
     _ak_=caml_string_of_jsbytes("@]"),
     _al_=caml_string_of_jsbytes("@}"),
     _am_=caml_string_of_jsbytes("@?"),
     _an_=caml_string_of_jsbytes("@\n"),
     _ao_=caml_string_of_jsbytes("@."),
     _ap_=caml_string_of_jsbytes("@@"),
     _aq_=caml_string_of_jsbytes("@%"),
     _ar_=caml_string_of_jsbytes("@"),
     _aj_=[0,0,0],
     _aZ_=caml_string_of_jsbytes("CamlinternalFormat.Type_mismatch"),
     _dE_=caml_string_of_jsbytes(""),
     _dF_=caml_string_of_jsbytes("\n"),
     _du_=caml_string_of_jsbytes("a boolean"),
     _dv_=caml_string_of_jsbytes("an integer"),
     _dw_=caml_string_of_jsbytes("an integer"),
     _dx_=caml_string_of_jsbytes("a float"),
     _dy_=caml_string_of_jsbytes("a float"),
     _dz_=caml_string_of_jsbytes(""),
     _dA_=caml_string_of_jsbytes(" "),
     _dB_=caml_string_of_jsbytes(""),
     _dC_=caml_string_of_jsbytes("one of: "),
     _dD_=
      caml_string_of_jsbytes
       ("Arg.Expand is is only allowed with Arg.parse_and_expand_argv_dynamic"),
     _dt_=caml_string_of_jsbytes("no argument"),
     _ds_=caml_string_of_jsbytes("(?)"),
     _dk_=caml_string_of_jsbytes("--help"),
     _dl_=caml_string_of_jsbytes("-help"),
     _dm_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": unknown option '"),
         [2,0,[11,caml_string_of_jsbytes("'.\n"),0]]]],
       caml_string_of_jsbytes("%s: unknown option '%s'.\n")],
     _dp_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": wrong argument '"),
         [2,
          0,
          [11,
           caml_string_of_jsbytes("'; option '"),
           [2,
            0,
            [11,
             caml_string_of_jsbytes("' expects "),
             [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]]]]]],
       caml_string_of_jsbytes
        ("%s: wrong argument '%s'; option '%s' expects %s.\n")],
     _dq_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": option '"),
         [2,0,[11,caml_string_of_jsbytes("' needs an argument.\n"),0]]]],
       caml_string_of_jsbytes("%s: option '%s' needs an argument.\n")],
     _dr_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": "),
         [2,0,[11,caml_string_of_jsbytes(".\n"),0]]]],
       caml_string_of_jsbytes("%s: %s.\n")],
     _dn_=[0,caml_string_of_jsbytes("-help")],
     _do_=[0,caml_string_of_jsbytes("--help")],
     _dj_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _di_=caml_string_of_jsbytes("-help"),
     _dd_=caml_string_of_jsbytes(" Display this list of options"),
     _de_=caml_string_of_jsbytes("-help"),
     _dh_=caml_string_of_jsbytes("--help"),
     _df_=caml_string_of_jsbytes(" Display this list of options"),
     _dg_=caml_string_of_jsbytes("--help"),
     _dc_=[0,caml_string_of_jsbytes("-help")],
     _c9_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[12,10,0]]]]],
       caml_string_of_jsbytes("  %s %s\n")],
     _c__=caml_string_of_jsbytes("}"),
     _c$_=caml_string_of_jsbytes("|"),
     _da_=caml_string_of_jsbytes("{"),
     _db_=
      [0,
       [11,caml_string_of_jsbytes("  "),[2,0,[12,32,[2,0,[2,0,[12,10,0]]]]]],
       caml_string_of_jsbytes("  %s %s%s\n")],
     _c8_=caml_string_of_jsbytes("<none>"),
     _c5_=caml_string_of_jsbytes("Stdlib.Arg.Bad"),
     _c6_=caml_string_of_jsbytes("Stdlib.Arg.Help"),
     _c7_=caml_string_of_jsbytes("Stdlib.Arg.Stop"),
     _dJ_=caml_string_of_jsbytes(""),
     _dK_=
      [0,
       [11,caml_string_of_jsbytes(", "),[2,0,[2,0,0]]],
       caml_string_of_jsbytes(", %s%s")],
     _d9_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _d__=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Fatal error in uncaught exception handler: exception "),
        [2,0,[12,10,0]]],
       caml_string_of_jsbytes
        ("Fatal error in uncaught exception handler: exception %s\n")],
     _d8_=
      caml_string_of_jsbytes
       ("Fatal error: out of memory in uncaught exception handler"),
     _d7_=
      [0,
       [11,caml_string_of_jsbytes("Fatal error: exception "),[2,0,[12,10,0]]],
       caml_string_of_jsbytes("Fatal error: exception %s\n")],
     _d4_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _d5_=
      caml_string_of_jsbytes
       ("(Program not linked with -g, cannot print stack backtrace)\n"),
     _d2_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _d3_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_string_of_jsbytes
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _dU_=caml_string_of_jsbytes("Raised at"),
     _dV_=caml_string_of_jsbytes("Re-raised at"),
     _dW_=caml_string_of_jsbytes("Raised by primitive operation at"),
     _dX_=caml_string_of_jsbytes("Called from"),
     _dY_=caml_string_of_jsbytes(" (inlined)"),
     _d0_=caml_string_of_jsbytes(""),
     _dZ_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(' in file "'),
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11,
               caml_string_of_jsbytes(", line "),
               [4,0,0,0,[11,caml_string_of_jsbytes(", characters "),partial]]]]]]]]]],
       caml_string_of_jsbytes
        ('%s %s in file "%s"%s, line %d, characters %d-%d')],
     _d1_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" unknown location"),0]],
       caml_string_of_jsbytes("%s unknown location")],
     _dP_=caml_string_of_jsbytes("Out of memory"),
     _dQ_=caml_string_of_jsbytes("Stack overflow"),
     _dR_=caml_string_of_jsbytes("Pattern matching failed"),
     _dS_=caml_string_of_jsbytes("Assertion failed"),
     _dT_=caml_string_of_jsbytes("Undefined recursive module"),
     _dL_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_string_of_jsbytes("(%s%s)")],
     _dM_=caml_string_of_jsbytes(""),
     _dN_=caml_string_of_jsbytes(""),
     _dO_=[0,[12,40,[2,0,[12,41,0]]],caml_string_of_jsbytes("(%s)")],
     _dI_=[0,[4,0,0,0,0],caml_string_of_jsbytes("%d")],
     _dG_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _dH_=caml_string_of_jsbytes("_"),
     _d6_=
      [0,
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file not found)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file appears to be corrupt)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file has wrong magic number)"),
       caml_string_of_jsbytes
        ("(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)")],
     _ea_=caml_string_of_jsbytes("Fun.Finally_raised: "),
     _d$_=caml_string_of_jsbytes("Stdlib.Fun.Finally_raised"),
     _eb_=caml_string_of_jsbytes("x"),
     _ec_=
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
     _ef_=caml_string_of_jsbytes("Hashtbl: unsupported hash table format"),
     _rg_=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     _re_=caml_string_of_jsbytes("CAMLRUNPARAM"),
     _ed_=caml_string_of_jsbytes(""),
     _ez_=[3,0,3],
     _eA_=caml_string_of_jsbytes("."),
     _ew_=caml_string_of_jsbytes(">"),
     _ex_=caml_string_of_jsbytes("<\/"),
     _ey_=caml_string_of_jsbytes(""),
     _et_=caml_string_of_jsbytes(">"),
     _eu_=caml_string_of_jsbytes("<"),
     _ev_=caml_string_of_jsbytes(""),
     _es_=caml_string_of_jsbytes("\n"),
     _eo_=caml_string_of_jsbytes(""),
     _ep_=caml_string_of_jsbytes(""),
     _eq_=caml_string_of_jsbytes(""),
     _er_=caml_string_of_jsbytes(""),
     _en_=[0,caml_string_of_jsbytes("")],
     _ej_=caml_string_of_jsbytes(""),
     _ek_=caml_string_of_jsbytes(""),
     _el_=caml_string_of_jsbytes(""),
     _em_=caml_string_of_jsbytes(""),
     _ei_=[0,caml_string_of_jsbytes(""),0,caml_string_of_jsbytes("")],
     _eh_=caml_string_of_jsbytes(""),
     _eg_=caml_string_of_jsbytes("Stdlib.Format.String_tag"),
     _e9_=[0,91],
     _e8_=[0,123],
     _e__=caml_string_of_jsbytes("end of input not found"),
     _e$_=caml_string_of_jsbytes('scanf: bad conversion "%a"'),
     _fa_=caml_string_of_jsbytes('scanf: bad conversion "%t"'),
     _fb_=caml_string_of_jsbytes("scanf: missing reader"),
     _fc_=[0,caml_string_of_jsbytes("scanf.ml"),1453,13],
     _fd_=
      caml_string_of_jsbytes('scanf: bad conversion "%?" (custom converter)'),
     _fe_=caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     _ff_=caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     _fg_=caml_string_of_jsbytes('scanf: bad conversion "%-"'),
     _fh_=caml_string_of_jsbytes('scanf: bad conversion "%*"'),
     _fi_=caml_string_of_jsbytes('"'),
     _fj_=caml_string_of_jsbytes(' in format "'),
     _e7_=[0,37,caml_string_of_jsbytes("")],
     _e6_=
      [0,
       [11,
        caml_string_of_jsbytes("scanf: bad input at char number "),
        [4,3,0,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]],
       caml_string_of_jsbytes("scanf: bad input at char number %i: %s")],
     _e5_=
      [0,
       [11,
        caml_string_of_jsbytes("the character "),
        [1,[11,caml_string_of_jsbytes(" cannot start a boolean"),0]]],
       caml_string_of_jsbytes("the character %C cannot start a boolean")],
     _e2_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character hexadecimal encoding \\"),
        [0,[0,0]]],
       caml_string_of_jsbytes("bad character hexadecimal encoding \\%c%c")],
     _e1_=
      [0,
       [11,
        caml_string_of_jsbytes("bad character decimal encoding \\"),
        [0,[0,[0,0]]]],
       caml_string_of_jsbytes("bad character decimal encoding \\%c%c%c")],
     _eY_=caml_string_of_jsbytes("an"),
     _e0_=caml_string_of_jsbytes("x"),
     _eZ_=caml_string_of_jsbytes("nfinity"),
     _eT_=caml_string_of_jsbytes("digits"),
     _eU_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,
         [11,
          caml_string_of_jsbytes(" is not a valid "),
          [2,0,[11,caml_string_of_jsbytes(" digit"),0]]]]],
       caml_string_of_jsbytes("character %C is not a valid %s digit")],
     _eR_=caml_string_of_jsbytes("decimal digits"),
     _eS_=
      [0,
       [11,
        caml_string_of_jsbytes("character "),
        [1,[11,caml_string_of_jsbytes(" is not a decimal digit"),0]]],
       caml_string_of_jsbytes("character %C is not a decimal digit")],
     _eN_=caml_string_of_jsbytes("0b"),
     _eO_=caml_string_of_jsbytes("0o"),
     _eP_=caml_string_of_jsbytes("0u"),
     _eQ_=caml_string_of_jsbytes("0x"),
     _eM_=[0,caml_string_of_jsbytes("scanf.ml"),555,9],
     _eJ_=caml_string_of_jsbytes("false"),
     _eK_=caml_string_of_jsbytes("true"),
     _eL_=
      [0,
       [11,caml_string_of_jsbytes("invalid boolean '"),[2,0,[12,39,0]]],
       caml_string_of_jsbytes("invalid boolean '%s'")],
     _eI_=
      [0,
       [11,
        caml_string_of_jsbytes("looking for "),
        [1,[11,caml_string_of_jsbytes(", found "),[1,0]]]],
       caml_string_of_jsbytes("looking for %C, found %C")],
     _eH_=caml_string_of_jsbytes("not a valid float in hexadecimal notation"),
     _eG_=
      caml_string_of_jsbytes("no dot or exponent part found in float token"),
     _eF_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: premature end of file occurred before end of token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: premature end of file occurred before end of token")],
     _eE_=
      [0,
       [11,
        caml_string_of_jsbytes("scanning of "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" failed: the specified length was too short for token"),
          0]]],
       caml_string_of_jsbytes
        ("scanning of %s failed: the specified length was too short for token")],
     _eD_=
      [0,
       [11,caml_string_of_jsbytes("illegal escape character "),[1,0]],
       caml_string_of_jsbytes("illegal escape character %C")],
     _eB_=caml_string_of_jsbytes("-"),
     _eC_=caml_string_of_jsbytes("Stdlib.Scanf.Scan_failure"),
     _eV_=caml_string_of_jsbytes("binary"),
     _eW_=caml_string_of_jsbytes("octal"),
     _eX_=caml_string_of_jsbytes("hexadecimal"),
     _e3_=caml_string_of_jsbytes("a Char"),
     _e4_=caml_string_of_jsbytes("a String"),
     _fk_=caml_string_of_jsbytes(""),
     _fW_=[0,1,[0,3,[0,5,0]]],
     _fV_=[0,[2,0,[4,6,[0,2,6],0,[2,0,0]]],caml_string_of_jsbytes("%s%06x%s")],
     _fS_=caml_string_of_jsbytes(""),
     _fG_=[0,caml_string_of_jsbytes('"'),0],
     _fH_=caml_string_of_jsbytes(" 2>&1"),
     _fQ_=caml_string_of_jsbytes(" 2>"),
     _fR_=caml_string_of_jsbytes(""),
     _fI_=caml_string_of_jsbytes(" >"),
     _fP_=caml_string_of_jsbytes(""),
     _fJ_=caml_string_of_jsbytes(" <"),
     _fO_=caml_string_of_jsbytes(""),
     _fK_=caml_string_of_jsbytes(" "),
     _fL_=caml_string_of_jsbytes(" "),
     _fM_=caml_string_of_jsbytes('"'),
     _fN_=caml_string_of_jsbytes(""),
     _fD_=caml_string_of_jsbytes("Filename.quote_command: bad file name "),
     _fE_=caml_string_of_jsbytes('"'),
     _fF_=caml_string_of_jsbytes('"'),
     _fB_=caml_string_of_jsbytes("./"),
     _fA_=caml_string_of_jsbytes(".\\"),
     _fz_=caml_string_of_jsbytes("../"),
     _fy_=caml_string_of_jsbytes("..\\"),
     _fq_=caml_string_of_jsbytes(" 2>&1"),
     _fw_=caml_string_of_jsbytes(" 2>"),
     _fx_=caml_string_of_jsbytes(""),
     _fr_=caml_string_of_jsbytes(" >"),
     _fv_=caml_string_of_jsbytes(""),
     _fs_=caml_string_of_jsbytes(" <"),
     _fu_=caml_string_of_jsbytes(""),
     _ft_=caml_string_of_jsbytes(" "),
     _fo_=caml_string_of_jsbytes("./"),
     _fn_=caml_string_of_jsbytes("../"),
     _fm_=caml_string_of_jsbytes(""),
     _fl_=caml_string_of_jsbytes(""),
     _rc_=caml_string_of_jsbytes("TMPDIR"),
     _fp_=caml_string_of_jsbytes("/tmp"),
     _ra_=caml_string_of_jsbytes("TEMP"),
     _fC_=caml_string_of_jsbytes("."),
     _fT_=caml_string_of_jsbytes("Cygwin"),
     _fU_=caml_string_of_jsbytes("Win32"),
     _f9_=caml_string_of_jsbytes(""),
     _f5_=caml_string_of_jsbytes("("),
     _f6_=caml_string_of_jsbytes("()"),
     _f7_=caml_string_of_jsbytes(")"),
     _f8_=[0,[15,[17,2,0]],caml_string_of_jsbytes("%a@?")],
     _f1_=caml_string_of_jsbytes("\\"),
     _f2_=caml_string_of_jsbytes("\\n"),
     _f3_=caml_string_of_jsbytes(' "'),
     _f4_=caml_string_of_jsbytes('"'),
     _fY_=caml_string_of_jsbytes("Sexplib0__Sexp.Not_found_s"),
     _fZ_=caml_string_of_jsbytes("Sexplib0__Sexp.Of_sexp_error"),
     _hl_=[0,0],
     _hm_=[0,1],
     _hi_=[0,caml_string_of_jsbytes("Sexplib.Conv.Of_sexp_error")],
     _hj_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),478,15],
     _hf_=[0,0],
     _hg_=[0,0],
     _hc_=caml_string_of_jsbytes("Assert_failure"),
     _hd_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),394,15],
     _g$_=[0,caml_string_of_jsbytes("Exit")],
     _ha_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),398,15],
     _g8_=[0,caml_string_of_jsbytes("End_of_file")],
     _g9_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),402,15],
     _g5_=[0,caml_string_of_jsbytes("Failure")],
     _g6_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),406,15],
     _g2_=[0,caml_string_of_jsbytes("Not_found")],
     _g3_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),410,15],
     _gZ_=[0,caml_string_of_jsbytes("Invalid_argument")],
     _g0_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),414,15],
     _gW_=caml_string_of_jsbytes("Match_failure"),
     _gX_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),418,15],
     _gT_=[0,caml_string_of_jsbytes("Not_found_s")],
     _gU_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),422,15],
     _gQ_=[0,caml_string_of_jsbytes("Sys_error")],
     _gR_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),426,15],
     _gN_=[0,caml_string_of_jsbytes("Arg.Help")],
     _gO_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),430,15],
     _gK_=[0,caml_string_of_jsbytes("Arg.Bad")],
     _gL_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),434,15],
     _gH_=[0,caml_string_of_jsbytes("Lazy.Undefined")],
     _gI_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),438,15],
     _gE_=[0,caml_string_of_jsbytes("Parsing.Parse_error")],
     _gF_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),442,15],
     _gB_=[0,caml_string_of_jsbytes("Queue.Empty")],
     _gC_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),446,15],
     _gy_=[0,caml_string_of_jsbytes("Scanf.Scan_failure")],
     _gz_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),450,15],
     _gv_=[0,caml_string_of_jsbytes("Stack.Empty")],
     _gw_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),454,15],
     _gs_=[0,caml_string_of_jsbytes("Stream.Failure")],
     _gt_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),458,15],
     _gp_=[0,caml_string_of_jsbytes("Stream.Error")],
     _gq_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),462,15],
     _gm_=[0,caml_string_of_jsbytes("Sys.Break")],
     _gn_=[0,caml_string_of_jsbytes("src/sexp_conv.ml"),466,15],
     _gk_=
      [0,
       [2,0,[12,32,[2,0,[12,58,[4,0,0,0,[12,58,[4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes("%s %s:%d:%d")],
     _gi_=caml_string_of_jsbytes("int64_of_sexp: "),
     _gj_=caml_string_of_jsbytes("int64_of_sexp: atom needed"),
     _gg_=caml_string_of_jsbytes("int_of_sexp: "),
     _gh_=caml_string_of_jsbytes("int_of_sexp: atom needed"),
     _ge_=
      caml_string_of_jsbytes
       ("char_of_sexp: atom string must contain one character only"),
     _gf_=caml_string_of_jsbytes("char_of_sexp: atom needed"),
     _gd_=caml_string_of_jsbytes("string_of_sexp: atom needed"),
     _gc_=caml_string_of_jsbytes("unit_of_sexp: empty list needed"),
     _gb_=[0,2],
     _ga_=[0,2],
     _f$_=[1,0],
     _f__=[1,0],
     _hq_=caml_string_of_jsbytes("_of_sexp: unexpected variant constructor"),
     _hp_=
      caml_string_of_jsbytes
       ("_of_sexp: expected a variant type, saw an empty list"),
     _ho_=
      caml_string_of_jsbytes
       ("_of_sexp: expected a variant type, saw a nested list"),
     _hn_=
      caml_string_of_jsbytes
       ("_of_sexp: this constructor does not take arguments"),
     _hw_=caml_string_of_jsbytes(".pp"),
     _hv_=[0,caml_string_of_jsbytes("Base.Sexp.pp_hum"),0],
     _hG_=[0,caml_string_of_jsbytes("src/exn.ml"),54,6],
     _hD_=[0,caml_string_of_jsbytes("exn.ml.Reraised")],
     _hE_=[0,caml_string_of_jsbytes("src/exn.ml"),33,11],
     _hA_=[0,caml_string_of_jsbytes("exn.ml.Finally")],
     _hB_=[0,caml_string_of_jsbytes("src/exn.ml"),19,11],
     _hz_=caml_string_of_jsbytes("Base__Exn.Finally"),
     _hC_=caml_string_of_jsbytes("Base__Exn.Reraised"),
     _hF_=caml_string_of_jsbytes("Base__Exn.Sexp"),
     _hJ_=caml_string_of_jsbytes(""),
     _hI_=caml_string_of_jsbytes(""),
     _hK_=caml_string_of_jsbytes(":"),
     _hL_=caml_string_of_jsbytes(":"),
     _hM_=
      [0,
       [11,caml_string_of_jsbytes("Negative position: "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Negative position: %d")],
     _hN_=
      [0,
       [11,caml_string_of_jsbytes("Negative length: "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Negative length: %d")],
     _hO_=
      [0,
       [11,
        caml_string_of_jsbytes("pos + len past end: "),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes(" + "),
          [4,0,0,0,[11,caml_string_of_jsbytes(" > "),[4,0,0,0,0]]]]]],
       caml_string_of_jsbytes("pos + len past end: %d + %d > %d")],
     _hP_=
      caml_string_of_jsbytes
       ("initializing Random with a nondeterministic seed is forbidden in inline tests"),
     _hS_=
      [0,
       caml_string_of_jsbytes
        ("list.ml.Transpose_got_lists_of_different_lengths")],
     _hT_=[0,caml_string_of_jsbytes("src/list.ml"),1301,13],
     _hR_=
      caml_string_of_jsbytes
       ("Base__List.Transpose_got_lists_of_different_lengths"),
     _h4_=[0,caml_string_of_jsbytes("src/info.ml"),204,6],
     _hU_=[0,caml_string_of_jsbytes("Could_not_construct")],
     _hV_=[0,caml_string_of_jsbytes("String")],
     _hW_=[0,caml_string_of_jsbytes("Exn")],
     _hX_=[0,caml_string_of_jsbytes("Sexp")],
     _hY_=[0,caml_string_of_jsbytes("Tag_sexp")],
     _hZ_=[0,caml_string_of_jsbytes("Tag_t")],
     _h0_=[0,caml_string_of_jsbytes("Tag_arg")],
     _h1_=[0,caml_string_of_jsbytes("Of_list")],
     _h2_=[0,caml_string_of_jsbytes("With_backtrace")],
     _h3_=caml_string_of_jsbytes("Base__Info.Exn"),
     _if_=[0,caml_string_of_jsbytes("Neg")],
     _ig_=[0,caml_string_of_jsbytes("Zero")],
     _ih_=[0,caml_string_of_jsbytes("Pos")],
     _h5_=caml_string_of_jsbytes("Neg"),
     _h6_=caml_string_of_jsbytes("Pos"),
     _h7_=caml_string_of_jsbytes("Zero"),
     _h8_=caml_string_of_jsbytes("neg"),
     _h9_=caml_string_of_jsbytes("pos"),
     _h__=caml_string_of_jsbytes("zero"),
     _h$_=caml_string_of_jsbytes("Neg"),
     _ia_=caml_string_of_jsbytes("Pos"),
     _ib_=caml_string_of_jsbytes("Zero"),
     _ic_=caml_string_of_jsbytes("neg"),
     _id_=caml_string_of_jsbytes("pos"),
     _ie_=caml_string_of_jsbytes("zero"),
     _ij_=caml_string_of_jsbytes("max"),
     _ik_=caml_string_of_jsbytes("min"),
     _il_=caml_string_of_jsbytes("clamp requires [min <= max]"),
     _ii_=[0,caml_string_of_jsbytes("src/comparable.ml"),133,4],
     _iq_=caml_string_of_jsbytes("()"),
     _io_=caml_string_of_jsbytes("()"),
     _ip_=caml_string_of_jsbytes("Base.Unit.of_string: () expected"),
     _is_=
      caml_string_of_jsbytes
       ("Sexpable.Of_stringable.t_of_sexp expected an atom, but got a list"),
     _iy_=[0,caml_string_of_jsbytes("src/float0.ml"),170,4],
     _ix_=[0,caml_string_of_jsbytes("src/float0.ml"),174,4],
     _iv_=caml_int64_create_lo_mi_hi(16777215,16777215,65535),
     _iw_=caml_int64_create_lo_mi_hi(1,0,0),
     _iu_=caml_int64_create_lo_mi_hi(0,0,0),
     _it_=[0,caml_int64_create_lo_mi_hi(0,0,0)],
     _iz_=
      [0,
       [11,caml_string_of_jsbytes("Char.of_string: "),[3,0,0]],
       caml_string_of_jsbytes("Char.of_string: %S")],
     _iB_=
      [0,
       [11,
        caml_string_of_jsbytes("String.is_substring_at: invalid index "),
        [4,
         0,
         0,
         0,
         [11,caml_string_of_jsbytes(" for string of length "),[4,0,0,0,0]]]],
       caml_string_of_jsbytes
        ("String.is_substring_at: invalid index %d for string of length %d")],
     _iA_=caml_string_of_jsbytes(""),
     _iC_=[0,[3,0,0],caml_string_of_jsbytes("%S")],
     _iR_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(".of_string: invalid input "),[3,0,0]]],
       caml_string_of_jsbytes("%s.of_string: invalid input %S")],
     _iP_=caml_string_of_jsbytes("-0x"),
     _iQ_=caml_string_of_jsbytes("0x"),
     _iN_=caml_string_of_jsbytes("int63"),
     _iO_=caml_string_of_jsbytes("int64"),
     _iL_=caml_string_of_jsbytes("nativeint"),
     _iM_=caml_string_of_jsbytes("int64"),
     _iJ_=caml_string_of_jsbytes("int32"),
     _iK_=caml_string_of_jsbytes("int64"),
     _iG_=caml_string_of_jsbytes("int"),
     _iH_=caml_string_of_jsbytes("nativeint"),
     _iE_=caml_string_of_jsbytes("int"),
     _iF_=caml_string_of_jsbytes("int64"),
     _iD_=
      [0,
       [11,
        caml_string_of_jsbytes("conversion from "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" to "),
          [2,
           0,
           [11,
            caml_string_of_jsbytes(" failed: "),
            [2,0,[11,caml_string_of_jsbytes(" is out of range"),0]]]]]]],
       caml_string_of_jsbytes
        ("conversion from %s to %s failed: %s is out of range")],
     _q$_=[0,caml_string_of_jsbytes("src/int_conversions.ml"),96,9],
     _q__=[0,caml_string_of_jsbytes("src/int_conversions.ml"),148,9],
     _q9_=[0,caml_string_of_jsbytes("src/int_conversions.ml"),176,9],
     _iU_=
      [0,
       2147483647,
       2147483647,
       46340,
       1290,
       215,
       73,
       35,
       21,
       14,
       10,
       8,
       7,
       5,
       5,
       4,
       4,
       3,
       3,
       3,
       3,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1],
     _iV_=
      [0,
       caml_int64_create_lo_mi_hi(16777215,16777215,16383),
       caml_int64_create_lo_mi_hi(16777215,16777215,16383),
       caml_int64_create_lo_mi_hi(16777215,127,0),
       caml_int64_create_lo_mi_hi(1664510,0,0),
       caml_int64_create_lo_mi_hi(46340,0,0),
       caml_int64_create_lo_mi_hi(5404,0,0),
       caml_int64_create_lo_mi_hi(1290,0,0),
       caml_int64_create_lo_mi_hi(463,0,0),
       caml_int64_create_lo_mi_hi(215,0,0),
       caml_int64_create_lo_mi_hi(118,0,0),
       caml_int64_create_lo_mi_hi(73,0,0),
       caml_int64_create_lo_mi_hi(49,0,0),
       caml_int64_create_lo_mi_hi(35,0,0),
       caml_int64_create_lo_mi_hi(27,0,0),
       caml_int64_create_lo_mi_hi(21,0,0),
       caml_int64_create_lo_mi_hi(17,0,0),
       caml_int64_create_lo_mi_hi(14,0,0),
       caml_int64_create_lo_mi_hi(12,0,0),
       caml_int64_create_lo_mi_hi(10,0,0),
       caml_int64_create_lo_mi_hi(9,0,0),
       caml_int64_create_lo_mi_hi(8,0,0),
       caml_int64_create_lo_mi_hi(7,0,0),
       caml_int64_create_lo_mi_hi(7,0,0),
       caml_int64_create_lo_mi_hi(6,0,0),
       caml_int64_create_lo_mi_hi(5,0,0),
       caml_int64_create_lo_mi_hi(5,0,0),
       caml_int64_create_lo_mi_hi(5,0,0),
       caml_int64_create_lo_mi_hi(4,0,0),
       caml_int64_create_lo_mi_hi(4,0,0),
       caml_int64_create_lo_mi_hi(4,0,0),
       caml_int64_create_lo_mi_hi(4,0,0),
       caml_int64_create_lo_mi_hi(3,0,0),
       caml_int64_create_lo_mi_hi(3,0,0),
       caml_int64_create_lo_mi_hi(3,0,0),
       caml_int64_create_lo_mi_hi(3,0,0),
       caml_int64_create_lo_mi_hi(3,0,0),
       caml_int64_create_lo_mi_hi(3,0,0),
       caml_int64_create_lo_mi_hi(3,0,0),
       caml_int64_create_lo_mi_hi(3,0,0),
       caml_int64_create_lo_mi_hi(3,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(2,0,0),
       caml_int64_create_lo_mi_hi(1,0,0),
       caml_int64_create_lo_mi_hi(1,0,0)],
     _i2_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" /"),
         [12,
          37,
          [12,
           32,
           [2,
            0,
            [11,
             caml_string_of_jsbytes
              (" in core_int.ml: divisor should be positive"),
             0]]]]]],
       caml_string_of_jsbytes
        ("%s /%% %s in core_int.ml: divisor should be positive")],
     _i1_=
      [0,
       [2,
        0,
        [12,
         32,
         [12,
          37,
          [12,
           32,
           [2,
            0,
            [11,
             caml_string_of_jsbytes
              (" in core_int.ml: modulus should be positive"),
             0]]]]]],
       caml_string_of_jsbytes
        ("%s %% %s in core_int.ml: modulus should be positive")],
     _iY_=caml_int64_create_lo_mi_hi(0,0,0),
     _iZ_=caml_int64_create_lo_mi_hi(1,0,0),
     _i0_=caml_int64_create_lo_mi_hi(63,0,0),
     _iX_=
      [0,
       [11,caml_string_of_jsbytes("integer overflow in pow"),0],
       caml_string_of_jsbytes("integer overflow in pow")],
     _iW_=
      [0,
       [11,caml_string_of_jsbytes("exponent can not be negative"),0],
       caml_string_of_jsbytes("exponent can not be negative")],
     _js_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" /"),
         [12,
          37,
          [12,
           32,
           [2,
            0,
            [11,
             caml_string_of_jsbytes
              (" in core_int.ml: divisor should be positive"),
             0]]]]]],
       caml_string_of_jsbytes
        ("%s /%% %s in core_int.ml: divisor should be positive")],
     _jr_=
      [0,
       [2,
        0,
        [12,
         32,
         [12,
          37,
          [12,
           32,
           [2,
            0,
            [11,
             caml_string_of_jsbytes
              (" in core_int.ml: modulus should be positive"),
             0]]]]]],
       caml_string_of_jsbytes
        ("%s %% %s in core_int.ml: modulus should be positive")],
     _je_=caml_string_of_jsbytes(""),
     _jf_=caml_string_of_jsbytes("[Int.ceil_log2] got invalid input"),
     _jc_=caml_string_of_jsbytes(""),
     _jd_=caml_string_of_jsbytes("[Int.floor_log2] got invalid input"),
     _jb_=
      [0,
       [11,caml_string_of_jsbytes("argument must be strictly positive"),0],
       caml_string_of_jsbytes("argument must be strictly positive")],
     _i__=caml_string_of_jsbytes("max"),
     _i$_=caml_string_of_jsbytes("min"),
     _ja_=caml_string_of_jsbytes("clamp requires [min <= max]"),
     _i9_=[0,caml_string_of_jsbytes("src/int.ml"),108,2],
     _i8_=[0,[4,6,0,0,0],caml_string_of_jsbytes("%x")],
     _i7_=[0,[4,6,0,0,0],caml_string_of_jsbytes("%x")],
     _i5_=
      [0,
       [11,
        caml_string_of_jsbytes("Int.of_float: argument ("),
        [8,
         [0,0,0],
         0,
         0,
         [11,caml_string_of_jsbytes(") is out of range or NaN"),0]]],
       caml_string_of_jsbytes
        ("Int.of_float: argument (%f) is out of range or NaN")],
     _i4_=
      [0,
       [11,caml_string_of_jsbytes("Int.of_string: "),[3,0,0]],
       caml_string_of_jsbytes("Int.of_string: %S")],
     _jt_=
      [0,
       [11,
        caml_string_of_jsbytes("Nativeint.of_float: argument ("),
        [8,
         [0,0,0],
         0,
         0,
         [11,caml_string_of_jsbytes(") is out of range or NaN"),0]]],
       caml_string_of_jsbytes
        ("Nativeint.of_float: argument (%f) is out of range or NaN")],
     _jy_=caml_string_of_jsbytes(""),
     _jz_=caml_string_of_jsbytes("[Int64.ceil_log2] got invalid input"),
     _jw_=caml_string_of_jsbytes(""),
     _jx_=caml_string_of_jsbytes("[Int64.floor_log2] got invalid input"),
     _jv_=
      [0,
       [11,caml_string_of_jsbytes("argument must be strictly positive"),0],
       caml_string_of_jsbytes("argument must be strictly positive")],
     _ju_=
      [0,
       [11,
        caml_string_of_jsbytes("Int64.of_float: argument ("),
        [8,
         [0,0,0],
         0,
         0,
         [11,caml_string_of_jsbytes(") is out of range or NaN"),0]]],
       caml_string_of_jsbytes
        ("Int64.of_float: argument (%f) is out of range or NaN")],
     _jP_=caml_string_of_jsbytes("0x"),
     _jO_=[0,[7,6,0,0,0],caml_string_of_jsbytes("%Lx")],
     _jL_=caml_string_of_jsbytes("max"),
     _jM_=caml_string_of_jsbytes("min"),
     _jN_=caml_string_of_jsbytes("clamp requires [min <= max]"),
     _jK_=[0,caml_string_of_jsbytes("src/int63_emul.ml"),317,2],
     _jI_=
      [0,
       [11,
        caml_string_of_jsbytes("Int63.of_float: argument ("),
        [8,
         [0,0,0],
         0,
         0,
         [11,caml_string_of_jsbytes(") is out of range or NaN"),0]]],
       caml_string_of_jsbytes
        ("Int63.of_float: argument (%f) is out of range or NaN")],
     _jH_=caml_int64_create_lo_mi_hi(0,0,0),
     _jG_=
      [0,
       [11,caml_string_of_jsbytes("Int63.of_string: invalid input "),[3,0,0]],
       caml_string_of_jsbytes("Int63.of_string: invalid input %S")],
     _jE_=[0,caml_string_of_jsbytes("src/int63_emul.ml"),114,20],
     _jD_=caml_int64_create_lo_mi_hi(2,0,0),
     _jC_=caml_int64_create_lo_mi_hi(2,0,0),
     _jB_=caml_int64_create_lo_mi_hi(2,0,0),
     _jA_=caml_int64_create_lo_mi_hi(2,0,0),
     _jF_=caml_int64_create_lo_mi_hi(1,0,0),
     _jZ_=
      [0,
       [11,
        caml_string_of_jsbytes("Int32.of_float: argument ("),
        [8,
         [0,0,0],
         0,
         0,
         [11,caml_string_of_jsbytes(") is out of range or NaN"),0]]],
       caml_string_of_jsbytes
        ("Int32.of_float: argument (%f) is out of range or NaN")],
     _qv_=[0,caml_string_of_jsbytes("src/int63.ml"),155,9],
     _j4_=caml_string_of_jsbytes("%.15g"),
     _j5_=caml_string_of_jsbytes("%.17g"),
     _j3_=caml_string_of_jsbytes("."),
     _j6_=caml_string_of_jsbytes("OCAMLRUNPARAM"),
     _j7_=caml_string_of_jsbytes("clock_gettime(CLOCK_REALTIME) failed"),
     _kI_=caml_string_of_jsbytes(""),
     _kJ_=
      caml_string_of_jsbytes
       ("ppx_inline_test: cannot use -list-partition or -partition without specifying a partition at preprocessing time"),
     _kA_=[0,[2,0,[12,10,[2,0,0]]],caml_string_of_jsbytes("%s\n%s")],
     _kB_=[0,[2,0,[10,0]],caml_string_of_jsbytes("%s%!")],
     _kC_=[0,1],
     _kD_=
      [0,
       [11,
        caml_string_of_jsbytes(" ("),
        [8,[0,0,0],0,[0,3],[11,caml_string_of_jsbytes(" sec)\n"),[10,0]]]],
       caml_string_of_jsbytes(" (%.3f sec)\n%!")],
     _kE_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" is false.\n"),[2,0,[12,10,[10,0]]]]],
       caml_string_of_jsbytes("%s is false.\n%s\n%!")],
     _kF_=caml_string_of_jsbytes("\n"),
     _kH_=caml_string_of_jsbytes(" "),
     _kG_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" threw"),
         [2,
          0,
          [2,0,[11,caml_string_of_jsbytes(".\n"),[2,0,[2,0,[12,10,[10,0]]]]]]]]],
       caml_string_of_jsbytes("%s threw%s%s.\n%s%s\n%!")],
     _ky_=caml_string_of_jsbytes("\n"),
     _kz_=caml_string_of_jsbytes("  "),
     _kx_=[0,[2,0,[10,0]],caml_string_of_jsbytes("%s%!")],
     _kw_=[0,[2,0,[10,0]],caml_string_of_jsbytes("%s%!")],
     _kv_=[0,[12,10,[2,0,[12,10,[10,0]]]],caml_string_of_jsbytes("\n%s\n%!")],
     _kr_=caml_string_of_jsbytes("\n"),
     _ks_=caml_string_of_jsbytes("T_MODULE at "),
     _kt_=caml_string_of_jsbytes("  in TES"),
     _ku_=caml_string_of_jsbytes(""),
     _ko_=caml_string_of_jsbytes("time_without_resetting_random_seeds"),
     _kp_=caml_string_of_jsbytes("."),
     _kq_=caml_string_of_jsbytes("Ppx_inline_test_lib__Runtime"),
     _p$_=caml_string_of_jsbytes("inline_tests.log"),
     _p__=caml_string_of_jsbytes("inline_tests.log"),
     _pX_=
      [0,
       [11,
        caml_string_of_jsbytes("Argument "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" doesn't fit the format filename[:line_number]\n"),
          [10,0]]]],
       caml_string_of_jsbytes
        ("Argument %s doesn't fit the format filename[:line_number]\n%!")],
     _pI_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(": unexpected anonymous argument "),
         [2,0,[12,10,[10,0]]]]],
       caml_string_of_jsbytes("%s: unexpected anonymous argument %s\n%!")],
     _kh_=
      [0,
       [11,
        caml_string_of_jsbytes(" File "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(" , line "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(" , characters "),
            [4,
             0,
             0,
             0,
             [11,caml_string_of_jsbytes(" - "),[4,0,0,0,[12,32,[10,0]]]]]]]]]],
       caml_string_of_jsbytes(" File %S , line %d , characters %d - %d %!")],
     _kg_=
      [0,
       [11,
        caml_string_of_jsbytes(" File "),
        [3,0,[11,caml_string_of_jsbytes(" , line "),[4,0,0,0,[12,32,[10,0]]]]]],
       caml_string_of_jsbytes(" File %S , line %d %!")],
     _kf_=
      [0,
       [11,caml_string_of_jsbytes(" File "),[3,0,[12,32,[10,0]]]],
       caml_string_of_jsbytes(" File %S %!")],
     _kb_=caml_string_of_jsbytes(""),
     _kc_=caml_string_of_jsbytes(""),
     _ke_=caml_string_of_jsbytes(": "),
     _kd_=
      [0,
       [11,
        caml_string_of_jsbytes("File "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(", line "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[2,0,0]]]]]]]]],
       caml_string_of_jsbytes("File %S, line %d, characters %d-%d%s")],
     _ka_=caml_string_of_jsbytes(""),
     _j8_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _j9_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _qt_=caml_string_of_jsbytes("FORCE_DROP_INLINE_TEST"),
     _j$_=caml_string_of_jsbytes(""),
     _kk_=caml_string_of_jsbytes("inline-test-runner"),
     _pG_=caml_string_of_jsbytes("inline-test-runner"),
     _pH_=
      [0,
       [2,
        0,
        [12,32,[2,0,[12,32,[2,0,[11,caml_string_of_jsbytes(" [args]"),0]]]]]],
       caml_string_of_jsbytes("%s %s %s [args]")],
     _pK_=caml_string_of_jsbytes(" Path to the root of the source tree"),
     _pL_=caml_string_of_jsbytes("-source-tree-root"),
     _pM_=
      caml_string_of_jsbytes(" Allow output patterns in tests expectations"),
     _pN_=caml_string_of_jsbytes("-allow-output-patterns"),
     _pP_=
      caml_string_of_jsbytes
       (" Diff command for tests that require diffing (use - to disable diffing)"),
     _pQ_=caml_string_of_jsbytes("-diff-cmd"),
     _pR_=caml_string_of_jsbytes(" Update expect tests in place"),
     _pS_=caml_string_of_jsbytes("-in-place"),
     _pT_=caml_string_of_jsbytes(" Summarize tests without using color"),
     _pU_=caml_string_of_jsbytes("-no-color"),
     _pW_=
      caml_string_of_jsbytes
       ('location Run only the tests specified by all the -only-test options.\n                      Locations can be one of these forms:\n                      - file.ml\n                      - file.ml:line_number\n                      - File "file.ml"\n                      - File "file.ml", line 23\n                      - File "file.ml", line 23, characters 2-3'),
     _pY_=caml_string_of_jsbytes("-only-test"),
     _p0_=
      caml_string_of_jsbytes
       ("substring Only run tests whose names contain the given substring"),
     _p1_=caml_string_of_jsbytes("-matching"),
     _p3_=
      caml_string_of_jsbytes
       ("tag Only run tests tagged with [tag] (overrides previous -drop-tag)"),
     _p4_=caml_string_of_jsbytes("-require-tag"),
     _p6_=
      caml_string_of_jsbytes
       ("tag Only run tests not tagged with [tag] (overrides previous -require-tag)"),
     _p7_=caml_string_of_jsbytes("-drop-tag"),
     _p9_=caml_string_of_jsbytes(" Log the tests run in inline_tests.log"),
     _qa_=caml_string_of_jsbytes("-log"),
     _qb_=caml_string_of_jsbytes(" Show the number of tests ran"),
     _qc_=caml_string_of_jsbytes("-show-counts"),
     _qd_=caml_string_of_jsbytes(" End with an error if no tests were run"),
     _qe_=caml_string_of_jsbytes("-strict"),
     _qf_=
      caml_string_of_jsbytes
       (" Run tests only up to the first error (doesn't work for expect tests)"),
     _qg_=caml_string_of_jsbytes("-stop-on-error"),
     _qh_=caml_string_of_jsbytes(" Show the tests as they run"),
     _qi_=caml_string_of_jsbytes("-verbose"),
     _qk_=caml_string_of_jsbytes(" Only run the tests in the given partition"),
     _ql_=caml_string_of_jsbytes("-partition"),
     _qn_=
      caml_string_of_jsbytes
       (" Lists all the partitions that contain at least one test or test_module"),
     _qo_=caml_string_of_jsbytes("-list-partitions"),
     _qq_=
      caml_string_of_jsbytes
       (" Do not run tests but show what would have been run"),
     _qr_=caml_string_of_jsbytes("-list-test-names"),
     _pE_=caml_string_of_jsbytes("PPX_INLINE_TEST_LIB_AM_RUNNING_INLINE_TEST"),
     _pC_=caml_string_of_jsbytes("inline-test"),
     _kP_=
      caml_string_of_jsbytes
       ("Expect_test_collector.File.Digest.of_string, unexpected length"),
     _kQ_=
      caml_string_of_jsbytes("Expect_test_collector.File.Digest.of_string"),
     _kK_=[0,caml_string_of_jsbytes("end_pos")],
     _kL_=[0,caml_string_of_jsbytes("start_pos")],
     _kM_=[0,caml_string_of_jsbytes("line_start")],
     _kN_=[0,caml_string_of_jsbytes("line_number")],
     _kO_=[0,caml_string_of_jsbytes("filename")],
     _kT_=
      [0,
       [11,
        caml_string_of_jsbytes("\n(* "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           ("expect_test_collector: This test expectation appears to contain a backtrace.\n   This is strongly discouraged as backtraces are fragile.\n   Please change this test to not include a backtrace. *)\n\n"),
          0]]],
       caml_string_of_jsbytes
        ("\n(* %sexpect_test_collector: This test expectation appears to contain a backtrace.\n   This is strongly discouraged as backtraces are fragile.\n   Please change this test to not include a backtrace. *)\n\n")],
     _kR_=caml_string_of_jsbytes("CR "),
     _kS_=caml_string_of_jsbytes(""),
     _k5_=caml_string_of_jsbytes(""),
     _k4_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Trying to run an expect test from the wrong file.\n- test declared at "),
        [2,
         0,
         [12,
          58,
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes("\n- trying to run it from "),
            [2,0,[12,10,0]]]]]]],
       caml_string_of_jsbytes
        ("Trying to run an expect test from the wrong file.\n- test declared at %s:%d\n- trying to run it from %s\n")],
     _k2_=caml_string_of_jsbytes(""),
     _k3_=
      [0,
       [11,
        caml_string_of_jsbytes("\nSTOPPED COLLECTING OUTPUT AFTER "),
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes
           (" FLUSHING ATTEMPS\nTHERE MUST BE A BACKGROUND JOB PRINTING TO STDOUT\n"),
          0]]],
       caml_string_of_jsbytes
        ("\nSTOPPED COLLECTING OUTPUT AFTER %d FLUSHING ATTEMPS\nTHERE MUST BE A BACKGROUND JOB PRINTING TO STDOUT\n")],
     _k0_=[0,[2,0,[10,0]],caml_string_of_jsbytes("%s%!")],
     _kZ_=
      [0,
       [11,
        caml_string_of_jsbytes("File "),
        [3,
         0,
         [11,
          caml_string_of_jsbytes(", line "),
          [4,
           0,
           0,
           0,
           [11,
            caml_string_of_jsbytes(", characters "),
            [4,
             0,
             0,
             0,
             [12,
              45,
              [4,
               0,
               0,
               0,
               [11,
                caml_string_of_jsbytes
                 (":\nError: program exited while expect test was running!\nOutput captured so far:\n"),
                [10,0]]]]]]]]]],
       caml_string_of_jsbytes
        ("File %S, line %d, characters %d-%d:\nError: program exited while expect test was running!\nOutput captured so far:\n%!")],
     _k1_=[0,[2,0,[10,0]],caml_string_of_jsbytes("%s%!")],
     _kY_=[0,0,0],
     _kX_=
      caml_string_of_jsbytes
       ("Expect_test_collector.Instance.get_current called outside a test."),
     _kW_=caml_string_of_jsbytes("Expect_test_collector.get: not set"),
     _kV_=caml_string_of_jsbytes("Expect_test_collector.unset: not set"),
     _kU_=caml_string_of_jsbytes("Expect_test_collector.set: already set"),
     _k8_=caml_string_of_jsbytes("Jsoo_runtime.Error.Exn"),
     _k9_=caml_string_of_jsbytes("jsError"),
     _lc_=caml_string_of_jsbytes("E2BIG"),
     _le_=caml_string_of_jsbytes("EACCES"),
     _lf_=caml_string_of_jsbytes("EAGAIN"),
     _lg_=caml_string_of_jsbytes("EBADF"),
     _lh_=caml_string_of_jsbytes("EBUSY"),
     _li_=caml_string_of_jsbytes("ECHILD"),
     _lj_=caml_string_of_jsbytes("EDEADLK"),
     _lk_=caml_string_of_jsbytes("EDOM"),
     _ll_=caml_string_of_jsbytes("EEXIST"),
     _lm_=caml_string_of_jsbytes("EFAULT"),
     _ln_=caml_string_of_jsbytes("EFBIG"),
     _lo_=caml_string_of_jsbytes("EINTR"),
     _lp_=caml_string_of_jsbytes("EINVAL"),
     _lq_=caml_string_of_jsbytes("EIO"),
     _lr_=caml_string_of_jsbytes("EISDIR"),
     _ls_=caml_string_of_jsbytes("EMFILE"),
     _lt_=caml_string_of_jsbytes("EMLINK"),
     _lu_=caml_string_of_jsbytes("ENAMETOOLONG"),
     _lv_=caml_string_of_jsbytes("ENFILE"),
     _lw_=caml_string_of_jsbytes("ENODEV"),
     _lx_=caml_string_of_jsbytes("ENOENT"),
     _ly_=caml_string_of_jsbytes("ENOEXEC"),
     _lz_=caml_string_of_jsbytes("ENOLCK"),
     _lA_=caml_string_of_jsbytes("ENOMEM"),
     _lB_=caml_string_of_jsbytes("ENOSPC"),
     _lC_=caml_string_of_jsbytes("ENOSYS"),
     _lD_=caml_string_of_jsbytes("ENOTDIR"),
     _lE_=caml_string_of_jsbytes("ENOTEMPTY"),
     _lF_=caml_string_of_jsbytes("ENOTTY"),
     _lG_=caml_string_of_jsbytes("ENXIO"),
     _lH_=caml_string_of_jsbytes("EPERM"),
     _lI_=caml_string_of_jsbytes("EPIPE"),
     _lJ_=caml_string_of_jsbytes("ERANGE"),
     _lK_=caml_string_of_jsbytes("EROFS"),
     _lL_=caml_string_of_jsbytes("ESPIPE"),
     _lM_=caml_string_of_jsbytes("ESRCH"),
     _lN_=caml_string_of_jsbytes("EXDEV"),
     _lO_=caml_string_of_jsbytes("EWOULDBLOCK"),
     _lP_=caml_string_of_jsbytes("EINPROGRESS"),
     _lQ_=caml_string_of_jsbytes("EALREADY"),
     _lR_=caml_string_of_jsbytes("ENOTSOCK"),
     _lS_=caml_string_of_jsbytes("EDESTADDRREQ"),
     _lT_=caml_string_of_jsbytes("EMSGSIZE"),
     _lU_=caml_string_of_jsbytes("EPROTOTYPE"),
     _lV_=caml_string_of_jsbytes("ENOPROTOOPT"),
     _lW_=caml_string_of_jsbytes("EPROTONOSUPPORT"),
     _lX_=caml_string_of_jsbytes("ESOCKTNOSUPPORT"),
     _lY_=caml_string_of_jsbytes("EOPNOTSUPP"),
     _lZ_=caml_string_of_jsbytes("EPFNOSUPPORT"),
     _l0_=caml_string_of_jsbytes("EAFNOSUPPORT"),
     _l1_=caml_string_of_jsbytes("EADDRINUSE"),
     _l2_=caml_string_of_jsbytes("EADDRNOTAVAIL"),
     _l3_=caml_string_of_jsbytes("ENETDOWN"),
     _l4_=caml_string_of_jsbytes("ENETUNREACH"),
     _l5_=caml_string_of_jsbytes("ENETRESET"),
     _l6_=caml_string_of_jsbytes("ECONNABORTED"),
     _l7_=caml_string_of_jsbytes("ECONNRESET"),
     _l8_=caml_string_of_jsbytes("ENOBUFS"),
     _l9_=caml_string_of_jsbytes("EISCONN"),
     _l__=caml_string_of_jsbytes("ENOTCONN"),
     _l$_=caml_string_of_jsbytes("ESHUTDOWN"),
     _ma_=caml_string_of_jsbytes("ETOOMANYREFS"),
     _mb_=caml_string_of_jsbytes("ETIMEDOUT"),
     _mc_=caml_string_of_jsbytes("ECONNREFUSED"),
     _md_=caml_string_of_jsbytes("EHOSTDOWN"),
     _me_=caml_string_of_jsbytes("EHOSTUNREACH"),
     _mf_=caml_string_of_jsbytes("ELOOP"),
     _mg_=caml_string_of_jsbytes("EOVERFLOW"),
     _mh_=
      [0,
       [11,caml_string_of_jsbytes("EUNKNOWNERR "),[4,0,0,0,0]],
       caml_string_of_jsbytes("EUNKNOWNERR %d")],
     _ld_=
      [0,
       [11,
        caml_string_of_jsbytes("Unix.Unix_error(Unix."),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(", "),
          [3,0,[11,caml_string_of_jsbytes(", "),[3,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes("Unix.Unix_error(Unix.%s, %S, %S)")],
     _k__=caml_string_of_jsbytes("Unix.Unix_error"),
     _k$_=caml_string_of_jsbytes(""),
     _la_=caml_string_of_jsbytes(""),
     _lb_=caml_string_of_jsbytes("Unix.Unix_error"),
     _mi_=caml_string_of_jsbytes("0.0.0.0"),
     _mj_=caml_string_of_jsbytes("127.0.0.1"),
     _pB_=caml_string_of_jsbytes("::"),
     _pA_=caml_string_of_jsbytes("::1"),
     _mo_=caml_string_of_jsbytes("BISECT_SIGTERM"),
     _mm_=caml_string_of_jsbytes("NO"),
     _mn_=caml_string_of_jsbytes("YES"),
     _mk_=caml_string_of_jsbytes("bisect"),
     _ml_=caml_string_of_jsbytes("bisect.log"),
     _m7_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" = "),[15,[12,59,0]]]],
       caml_string_of_jsbytes("%s = %a;")],
     _m8_=
      [0,
       [11,caml_string_of_jsbytes("  TRACING: "),[15,[12,10,[10,0]]]],
       caml_string_of_jsbytes("  TRACING: %a\n%!")],
     _m4_=
      [0,
       [11,
        caml_string_of_jsbytes("\x1b[0;31mCalling `"),
        [2,0,[12,32,[15,[11,caml_string_of_jsbytes("`\x1b[0m\n"),[10,0]]]]]],
       caml_string_of_jsbytes("\x1b[0;31mCalling `%s %a`\x1b[0m\n%!")],
     _m2_=[0,caml_string_of_jsbytes("lib/lib.ml"),479,30],
     _m0_=
      [0,
       [11,
        caml_string_of_jsbytes("args_itself = [ "),
        [15,[11,caml_string_of_jsbytes(" ]\n"),[10,0]]]],
       caml_string_of_jsbytes("args_itself = [ %a ]\n%!")],
     _m1_=
      [0,
       [11,
        caml_string_of_jsbytes("old_svars = [ "),
        [15,[11,caml_string_of_jsbytes(" ]\n"),[10,0]]]],
       caml_string_of_jsbytes("old_svars = [ %a ]\n%!")],
     _m3_=
      [0,
       [11,
        caml_string_of_jsbytes("new_svars = [ "),
        [15,[11,caml_string_of_jsbytes(" ]\n"),[10,0]]]],
       caml_string_of_jsbytes("new_svars = [ %a ]\n%!")],
     _m5_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _mT_=
      [0,
       [11,
        caml_string_of_jsbytes("\tUnificated `"),
        [15,
         [11,
          caml_string_of_jsbytes("` and `"),
          [15,[11,caml_string_of_jsbytes("`\n"),0]]]]],
       caml_string_of_jsbytes("\tUnificated `%a` and `%a`\n")],
     _mU_=
      [0,
       [11,
        caml_string_of_jsbytes("\tUni-FAILED of `"),
        [15,
         [11,
          caml_string_of_jsbytes("` and `"),
          [15,[11,caml_string_of_jsbytes("`\n"),0]]]]],
       caml_string_of_jsbytes("\tUni-FAILED of `%a` and `%a`\n")],
     _mV_=caml_string_of_jsbytes("&&"),
     _mW_=caml_string_of_jsbytes("&&"),
     _mX_=[0,caml_string_of_jsbytes("lib/lib.ml"),428,17],
     _mY_=caml_string_of_jsbytes("||"),
     _mZ_=[0,caml_string_of_jsbytes("lib/lib.ml"),418,18],
     _m6_=caml_string_of_jsbytes("TraceSVars"),
     _mQ_=
      [0,
       [11,caml_string_of_jsbytes("bad arity"),0],
       caml_string_of_jsbytes("bad arity")],
     _mR_=
      [0,
       [11,caml_string_of_jsbytes("Unbound realtion: "),[2,0,0]],
       caml_string_of_jsbytes("Unbound realtion: %s")],
     _mS_=
      [0,
       [11,caml_string_of_jsbytes("Unbound variable: "),[2,0,0]],
       caml_string_of_jsbytes("Unbound variable: %s")],
     _mO_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" -> "),
         [18,
          [1,[0,0,caml_string_of_jsbytes("")]],
          [15,[17,0,[11,caml_string_of_jsbytes("; "),[10,0]]]]]]],
       caml_string_of_jsbytes("%s -> @[%a@]; %!")],
     _mN_=
      [0,
       [18,
        [1,
         [0,
          [11,caml_string_of_jsbytes("<v>"),0],
          caml_string_of_jsbytes("<v>")]],
        0],
       caml_string_of_jsbytes("@[<v>")],
     _mP_=[0,[17,0,0],caml_string_of_jsbytes("@]")],
     _mJ_=
      [0,[11,caml_string_of_jsbytes("nil"),0],caml_string_of_jsbytes("nil")],
     _mK_=
      [0,
       [11,caml_string_of_jsbytes("_."),[4,0,0,0,0]],
       caml_string_of_jsbytes("_.%d")],
     _mL_=[0,[12,39,[2,0,0]],caml_string_of_jsbytes("'%s")],
     _mM_=
      [0,
       [11,caml_string_of_jsbytes("cons "),[15,[12,32,[15,0]]]],
       caml_string_of_jsbytes("cons %a %a")],
     _mI_=[0,[12,40,[15,[12,41,0]]],caml_string_of_jsbytes("(%a)")],
     _mA_=
      [0,[11,caml_string_of_jsbytes(" && "),0],caml_string_of_jsbytes(" && ")],
     _mz_=
      [0,
       [11,caml_string_of_jsbytes("(== "),[15,[12,32,[15,[12,41,0]]]]],
       caml_string_of_jsbytes("(== %a %a)")],
     _mC_=
      [0,
       [11,
        caml_string_of_jsbytes("(conde [ "),
        [15,[11,caml_string_of_jsbytes(" ])"),0]]],
       caml_string_of_jsbytes("(conde [ %a ])")],
     _mD_=
      [0,
       [11,
        caml_string_of_jsbytes("(fresh ("),
        [2,0,[11,caml_string_of_jsbytes(") "),[15,[12,41,0]]]]],
       caml_string_of_jsbytes("(fresh (%s) %a)")],
     _mE_=
      [0,
       [12,40,[2,0,[12,32,[15,[12,41,0]]]]],
       caml_string_of_jsbytes("(%s %a)")],
     _mF_=
      [0,
       [11,caml_string_of_jsbytes("(trace...)"),0],
       caml_string_of_jsbytes("(trace...)")],
     _mB_=[0,caml_string_of_jsbytes("lib/lib.ml"),40,28],
     _mu_=
      [0,[11,caml_string_of_jsbytes("'()"),0],caml_string_of_jsbytes("'()")],
     _mv_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _mw_=[0,[12,39,[2,0,0]],caml_string_of_jsbytes("'%s")],
     _mx_=
      [0,
       [11,caml_string_of_jsbytes("(cons "),[15,[12,32,[15,[12,41,0]]]]],
       caml_string_of_jsbytes("(cons %a %a)")],
     _mp_=
      [0,
       153,
       182,
       205,
       246,
       280,
       318,
       376,
       712,
       696,
       949,
       1039,
       1209,
       781,
       889,
       991,
       1079,
       1142,
       1254,
       1436,
       1493,
       1421,
       1389,
       1645,
       1668,
       1694,
       1738,
       1760,
       2218,
       2145,
       2160,
       2003,
       2048,
       2095,
       2180,
       1950,
       1922,
       1903,
       1814,
       1825,
       1833,
       1854,
       2334,
       2371,
       2449,
       2464,
       2280,
       2398,
       2425,
       2481,
       2265,
       2529,
       2518,
       2784,
       2944,
       3029,
       3056,
       2731,
       2692,
       2744,
       2834,
       2801,
       2847,
       2878,
       2903,
       2916,
       2961,
       3076,
       3102,
       3128,
       3149,
       3170,
       3188,
       2657,
       2675,
       2642,
       3341,
       3395,
       3326,
       3294,
       3819,
       3791,
       3920,
       3894,
       4027,
       4000,
       4216,
       4257,
       4326,
       4409,
       5609,
       5644,
       5716,
       5712,
       5722,
       5685,
       5775,
       5809,
       5753,
       5874,
       5917,
       5954,
       5939,
       5904,
       5861,
       6049,
       6033,
       6155,
       6339,
       6316,
       6255,
       6516,
       6495,
       6434,
       6555,
       6643,
       6598,
       6748,
       6703,
       6889,
       6905,
       6903,
       6916,
       6849,
       6873,
       7033,
       7020,
       6975,
       6993,
       7429,
       7416,
       7358,
       7382,
       7459,
       7318,
       7703,
       7734,
       7798,
       7872,
       7909,
       7954,
       7942,
       7993,
       8021,
       8235,
       8297,
       8278,
       8185,
       8203,
       8246,
       8163,
       8392,
       8433,
       8418,
       8405,
       8495,
       8480,
       8353,
       8370,
       8448,
       8334,
       8634,
       8653,
       8581,
       9084,
       9070,
       9053,
       9039,
       9027,
       9014,
       8997,
       8961,
       9182,
       9170,
       9158,
       8907,
       8931,
       9096,
       8885,
       8803,
       9214,
       9338,
       9260,
       9294,
       9278,
       9305,
       9359,
       9224,
       9495,
       9480,
       9540,
       9550,
       9521,
       9581,
       9602,
       9625,
       10276,
       10256,
       10219,
       10199,
       10067,
       10010,
       9955,
       9943,
       9909,
       9837,
       9863,
       10637,
       10632,
       10575,
       10570,
       10830,
       10810,
       10770,
       10758,
       10704,
       10699,
       10536,
       10658,
       10494,
       10459,
       10414,
       10401,
       10384,
       10371,
       10332,
       10354,
       11057,
       11043,
       11071,
       11038,
       11020,
       11008,
       11088,
       10964,
       10922,
       10940,
       11180,
       11198,
       11320,
       11351,
       11393,
       11349,
       11314,
       11296,
       11254,
       11272,
       11683,
       11655,
       11626,
       11614,
       11541,
       11556,
       11506,
       11462,
       11482,
       13529,
       13557,
       13582,
       13549,
       13526,
       13458,
       13362,
       13357,
       13319,
       13276,
       13264,
       13217,
       13194,
       13178,
       13117,
       13112,
       12909,
       12988,
       12872,
       13074,
       12786,
       12739,
       12716,
       12700,
       12639,
       12585,
       12562,
       12546,
       12634,
       12466,
       12438,
       12283,
       12265,
       12316,
       12406,
       12232,
       12194,
       12141,
       12158,
       12133,
       12121,
       11964,
       11997,
       11946,
       11845,
       11906,
       11798,
       11746,
       11774,
       9795,
       10291,
       10878,
       11140,
       11211,
       11416,
       11699,
       9773,
       13688,
       13719,
       13744,
       13734,
       13760,
       13851,
       13899,
       13826,
       13813,
       13627,
       13657,
       13699,
       13770,
       9636],
     _mq_=caml_string_of_jsbytes("lib/lib.ml"),
     _mr_=caml_string_of_jsbytes("lib/lib.ml"),
     _ms_=caml_string_of_jsbytes(""),
     _mt_=caml_string_of_jsbytes("unicanren"),
     _mG_=caml_string_of_jsbytes("0"),
     _mH_=caml_string_of_jsbytes("1"),
     _m9_=caml_string_of_jsbytes("unicanren"),
     _ne_=[1,caml_string_of_jsbytes("1")],
     _ng_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _nf_=[1,caml_string_of_jsbytes("0")],
     _pa_=[0,10],
     _pb_=
      [0,
       [11,
        caml_string_of_jsbytes("Result: "),
        [18,
         [1,[0,0,caml_string_of_jsbytes("")]],
         [15,[11,caml_string_of_jsbytes(" = "),[15,[17,0,[12,10,[10,0]]]]]]]],
       caml_string_of_jsbytes("Result: @[%a = %a@]\n%!")],
     _o8_=[0,[0,caml_string_of_jsbytes("q")],0],
     _o9_=caml_string_of_jsbytes("pluso"),
     _o__=[0,10],
     _o$_=caml_string_of_jsbytes("q"),
     _pc_=caml_string_of_jsbytes("lib/test_numbers.ml"),
     _nd_=
      [0,
       [11,caml_string_of_jsbytes("\nRunning: "),[15,[12,10,0]]],
       caml_string_of_jsbytes("\nRunning: %a\n")],
     _m__=
      [0,
       65,
       90,
       117,
       260,
       301,
       206,
       181,
       143,
       598,
       551,
       529,
       518,
       502,
       478,
       452,
       411,
       3285,
       3295,
       3280,
       3307,
       3336,
       3346,
       3331,
       3358,
       3429,
       3439,
       3424,
       3451,
       3081,
       2080,
       2244,
       2311,
       2344,
       2487,
       2420,
       2591,
       2746,
       2874,
       981,
       996,
       1012,
       1023,
       1007,
       991,
       929,
       810,
       874,
       1040,
       1737,
       3005,
       3750,
       3762,
       670,
       4392,
       4184,
       4057,
       4012,
       4027,
       4203,
       3926,
       3939,
       3890],
     _m$_=caml_string_of_jsbytes("lib/test_numbers.ml"),
     _na_=caml_string_of_jsbytes("lib/test_numbers.ml"),
     _nb_=caml_string_of_jsbytes(""),
     _nc_=caml_string_of_jsbytes("unicanren"),
     _nh_=
      [0,
       [0,caml_string_of_jsbytes("n")],
       [2,[0,caml_string_of_jsbytes("a")],[0,caml_string_of_jsbytes("d")]]],
     _ni_=[0,caml_string_of_jsbytes("a"),[0,caml_string_of_jsbytes("d"),0]],
     _nj_=[0,caml_string_of_jsbytes("n"),0],
     _nk_=caml_string_of_jsbytes("poso"),
     _nm_=caml_string_of_jsbytes("dd"),
     _no_=caml_string_of_jsbytes("ad"),
     _nq_=caml_string_of_jsbytes("a"),
     _ns_=caml_string_of_jsbytes("n"),
     _nt_=
      [0,
       caml_string_of_jsbytes("a"),
       [0,caml_string_of_jsbytes("ad"),[0,caml_string_of_jsbytes("dd"),0]]],
     _nu_=[0,caml_string_of_jsbytes("n"),0],
     _nv_=caml_string_of_jsbytes("gt1o"),
     _n__=
      [0,
       caml_string_of_jsbytes("b"),
       [0,
        caml_string_of_jsbytes("x"),
        [0,
         caml_string_of_jsbytes("y"),
         [0,caml_string_of_jsbytes("r"),[0,caml_string_of_jsbytes("c"),0]]]]],
     _n$_=caml_string_of_jsbytes("full-addero"),
     _ob_=caml_string_of_jsbytes("gen-addero"),
     _oc_=caml_string_of_jsbytes("gt1o"),
     _od_=caml_string_of_jsbytes("addero"),
     _oe_=caml_string_of_jsbytes("gt1o"),
     _of_=caml_string_of_jsbytes("gt1o"),
     _oi_=caml_string_of_jsbytes("gen-addero"),
     _ok_=caml_string_of_jsbytes("full-addero"),
     _ol_=[0,caml_string_of_jsbytes("a"),[0,caml_string_of_jsbytes("c"),0]],
     _op_=caml_string_of_jsbytes("addero"),
     _oq_=caml_string_of_jsbytes("poso"),
     _ou_=caml_string_of_jsbytes("addero"),
     _oy_=caml_string_of_jsbytes("poso"),
     _oE_=
      [0,
       caml_string_of_jsbytes("d"),
       [0,
        caml_string_of_jsbytes("n"),
        [0,caml_string_of_jsbytes("m"),[0,caml_string_of_jsbytes("r"),0]]]],
     _oF_=caml_string_of_jsbytes("addero"),
     _oH_=
      [0,
       [4,
        caml_string_of_jsbytes("poso"),
        [0,[0,caml_string_of_jsbytes("z")],0]],
       [0,
        [5,[0,caml_string_of_jsbytes("b"),0]],
        [0,
         [4,
          caml_string_of_jsbytes("full-addero"),
          [0,
           [0,caml_string_of_jsbytes("d")],
           [0,
            [0,caml_string_of_jsbytes("u")],
            [0,
             [0,caml_string_of_jsbytes("b")],
             [0,
              [0,caml_string_of_jsbytes("c")],
              [0,[0,caml_string_of_jsbytes("e")],0]]]]]],
         [0,
          [5,
           [0,caml_string_of_jsbytes("c"),[0,caml_string_of_jsbytes("e"),0]]],
          [0,
           [4,
            caml_string_of_jsbytes("addero"),
            [0,
             [0,caml_string_of_jsbytes("e")],
             [0,
              [0,caml_string_of_jsbytes("x")],
              [0,
               [0,caml_string_of_jsbytes("y")],
               [0,[0,caml_string_of_jsbytes("z")],0]]]]],
           0]]]]],
     _oI_=caml_string_of_jsbytes("r"),
     _oK_=caml_string_of_jsbytes("z"),
     _oM_=caml_string_of_jsbytes("c"),
     _oN_=
      [4,caml_string_of_jsbytes("poso"),[0,[0,caml_string_of_jsbytes("y")],0]],
     _oP_=caml_string_of_jsbytes("m"),
     _oR_=caml_string_of_jsbytes("y"),
     _oT_=caml_string_of_jsbytes("b"),
     _oV_=caml_string_of_jsbytes("n"),
     _oX_=caml_string_of_jsbytes("x"),
     _oZ_=caml_string_of_jsbytes("u"),
     _o0_=
      [0,
       caml_string_of_jsbytes("u"),
       [0,
        caml_string_of_jsbytes("b"),
        [0,
         caml_string_of_jsbytes("c"),
         [0,
          caml_string_of_jsbytes("e"),
          [0,
           caml_string_of_jsbytes("x"),
           [0,caml_string_of_jsbytes("y"),[0,caml_string_of_jsbytes("z"),0]]]]]]],
     _o1_=
      [0,
       caml_string_of_jsbytes("d"),
       [0,
        caml_string_of_jsbytes("n"),
        [0,caml_string_of_jsbytes("m"),[0,caml_string_of_jsbytes("r"),0]]]],
     _o2_=caml_string_of_jsbytes("gen-addero"),
     _o3_=
      [0,
       [0,caml_string_of_jsbytes("n")],
       [0,
        [0,caml_string_of_jsbytes("m")],
        [0,[0,caml_string_of_jsbytes("k")],0]]],
     _o4_=caml_string_of_jsbytes("addero"),
     _o5_=
      [0,
       caml_string_of_jsbytes("n"),
       [0,caml_string_of_jsbytes("m"),[0,caml_string_of_jsbytes("k"),0]]],
     _o6_=caml_string_of_jsbytes("pluso"),
     _pd_=caml_string_of_jsbytes("lib/test_numbers.ml"),
     _pf_=caml_string_of_jsbytes("lib/test_numbers.ml"),
     _pg_=
      [1,
       caml_string_of_jsbytes
        ("\n    Running: (pluso (cons '1 '()) (cons '0 (cons '1 '()))\n    q)\n    Result: (pluso (cons '1 '()) (cons '0 (cons '1 '()))\n               q) = (cons '1 (cons '1 nil))\n     ")],
     _ph_=[0,caml_string_of_jsbytes("")],
     _pj_=caml_string_of_jsbytes("lib/test_numbers.ml"),
     _pk_=caml_string_of_jsbytes("lib/test_numbers.ml"),
     _pl_=caml_string_of_jsbytes("35bd78a8115cc88bbe84ad9d0c4f0dcb"),
     _pn_=caml_string_of_jsbytes("unicanren"),
     _px_=caml_string_of_jsbytes(""),
     _py_=caml_string_of_jsbytes("runAppendo"),
     _pt_=
      [0,
       [18,
        [1,[0,0,caml_string_of_jsbytes("")]],
        [11,caml_string_of_jsbytes("Answer: "),[15,[17,0,[12,10,0]]]]],
       caml_string_of_jsbytes("@[Answer: %a@]\n")],
     _ps_=
      [0,
       [18,
        [1,
         [0,
          [11,caml_string_of_jsbytes("<v>"),0],
          caml_string_of_jsbytes("<v>")]],
        0],
       caml_string_of_jsbytes("@[<v>")],
     _pu_=[0,[17,0,[10,0]],caml_string_of_jsbytes("@]%!")],
     _po_=[0,10],
     _pp_=caml_string_of_jsbytes("xys"),
     _pq_=
      [0,
       caml_string_of_jsbytes("xs"),
       [0,caml_string_of_jsbytes("ys"),[0,caml_string_of_jsbytes("xys"),0]]],
     _pr_=caml_string_of_jsbytes("appendo");
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function compare_and_set(r,seen,v)
     {var cur=r[1];return cur === seen?(r[1] = v,1):0}
    function k(s){throw [0,Failure,s]}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    var Exit=[248,_a_,caml_fresh_oo_id(0)];
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    function lnot(x){return x ^ -1}
    var nan=caml_int64_float_of_bits(_b_),max$0=2147483647,min$0=-2147483648;
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function char_of_int(n)
     {if(0 <= n && ! (255 < n))return n;return invalid_arg(_c_)}
    function to_string(b){return b?_d_:_e_}
    function bool_of_string(param)
     {return caml_string_notequal(param,_f_)
              ?caml_string_notequal(param,_g_)?invalid_arg(_h_):1
              :0}
    function int_to_string(n){return caml_string_of_jsbytes("" + n)}
    function append(l1,l2)
     {if(l1){var tl=l1[2],hd=l1[1];return [0,hd,append(tl,l2)]}return l2}
    var
     stdin=caml_ml_open_descriptor_in(0),
     stdout=caml_ml_open_descriptor_out(1),
     stderr=caml_ml_open_descriptor_out(2);
    function open_out_gen(mode,perm,name)
     {var c=caml_ml_open_descriptor_out(caml_sys_open(name,mode,perm));
      caml_ml_set_channel_name(c,name);
      return c}
    function open_out(name){return open_out_gen(_k_,438,name)}
    function flush_all(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_KD_)
             {_KD_ = caml_wrap_exception(_KD_);
              if(_KD_[1] !== Sys_error)throw _KD_;
              var _KC_=_KD_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function really_input_string(ic,len$1)
     {var s=caml_create_bytes(len$1),switch$0=0,ofs$1=0;
      if
       (0
        <=
        0
        &&
        0
        <=
        len$1
        &&
        !
        ((caml_ml_bytes_length(s) - len$1 | 0) < ofs$1))
       {var ofs=ofs$1,len=len$1;
        for(;;)
         {if(0 < len)
           {var r=caml_ml_input(ic,s,ofs,len);
            if(0 === r)throw End_of_file;
            var len$0=len - r | 0,ofs$0=ofs + r | 0,ofs=ofs$0,len=len$0;
            continue}
          switch$0 = 1;
          break}}
      if(! switch$0)invalid_arg(_o_);
      return caml_string_of_bytes(s)}
    function prerr_endline(s)
     {output_string(stderr,s);
      caml_ml_output_char(stderr,10);
      return caml_ml_flush(stderr)}
    var exit_function=[0,flush_all];
    function at_exit(f)
     {for(;;)
       {var
         f_yet_to_run=[0,1],
         old_exit=exit_function[1],
         new_exit$0=
          function(f_yet_to_run,old_exit)
           {function new_exit(param)
             {if(compare_and_set(f_yet_to_run,1,0))caml_call1(f,0);
              return caml_call1(old_exit,0)}
            return new_exit},
         new_exit=new_exit$0(f_yet_to_run,old_exit),
         success=compare_and_set(exit_function,old_exit,new_exit),
         _KB_=1 - success;
        if(_KB_)continue;
        return _KB_}}
    function do_at_exit(param){return caml_call1(exit_function[1],0)}
    function exit(retcode){do_at_exit(0);return caml_sys_exit(retcode)}
    caml_register_named_value
     (caml_string_of_jsbytes("Pervasives.do_at_exit"),do_at_exit);
    function bind(r,f)
     {if(0 === r[0]){var v=r[1];return caml_call1(f,v)}return r}
    function map(f,e)
     {if(0 === e[0]){var v=e[1];return [0,caml_call1(f,v)]}return e}
    function chr(n){if(0 <= n && ! (255 < n))return n;return invalid_arg(_p_)}
    function f(c){return 25 < c - 65 >>> 0?c:c + 32 | 0}
    function uppercase(c){return 25 < c - 97 >>> 0?c:c - 32 | 0}
    function equal(c1,c2){return 0 === (c1 - c2 | 0)?1:0}
    var
     match=caml_sys_get_config(0),
     os_type$0=match[1],
     max_length=caml_sys_const_max_wosize(0),
     max_length$0=(4 * max_length | 0) - 1 | 0,
     Break=[248,_w_,caml_fresh_oo_id(0)],
     num_bits_int=32;
    function length(l)
     {var len=0,param=l;
      for(;;)
       {if(param)
         {var param$0=param[2],len$0=len + 1 | 0,len=len$0,param=param$0;
          continue}
        return len}}
    function cons(a,l){return [0,a,l]}
    function rev_append(l1,l2)
     {var l1$0=l1,l2$0=l2;
      for(;;)
       {if(l1$0)
         {var l1$1=l1$0[2],a=l1$0[1],l2$1=[0,a,l2$0],l1$0=l1$1,l2$0=l2$1;
          continue}
        return l2$0}}
    function rev(l){return rev_append(l,0)}
    function flatten(param)
     {if(param){var r=param[2],l=param[1];return append(l,flatten(r))}
      return 0}
    function map$0(f,param)
     {if(param)
       {var l=param[2],a=param[1],r=caml_call1(f,a);return [0,r,map$0(f,l)]}
      return 0}
    function iter(f,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var param$1=param$0[2],a=param$0[1];
          caml_call1(f,a);
          var param$0=param$1;
          continue}
        return 0}}
    function fold_left(f,accu,l)
     {var accu$0=accu,l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           a=l$0[1],
           accu$1=caml_call2(f,accu$0,a),
           accu$0=accu$1,
           l$0=l$1;
          continue}
        return accu$0}}
    function fold_right(f,l,accu)
     {if(l){var l$0=l[2],a=l[1];return caml_call2(f,a,fold_right(f,l$0,accu))}
      return accu}
    function exists(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_KA_=caml_call1(p,a);
          if(_KA_)return _KA_;
          var param$0=l;
          continue}
        return 0}}
    function mem(x,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1],_Kz_=0 === caml_compare(a,x)?1:0;
          if(_Kz_)return _Kz_;
          var param$0=l;
          continue}
        return 0}}
    function find_all(p)
     {var accu=0;
      return function(param$0)
       {var accu$0=accu,param=param$0;
        for(;;)
         {if(param)
           {var l=param[2],x=param[1];
            if(caml_call1(p,x))
             {var accu$1=[0,x,accu$0],accu$0=accu$1,param=l;continue}
            var param=l;
            continue}
          return rev(accu$0)}}}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function copy(s)
     {var len=caml_ml_bytes_length(s),r=caml_create_bytes(len);
      caml_blit_bytes(s,0,r,0,len);
      return r}
    function to_string$0(b){return caml_string_of_bytes(copy(b))}
    function sub(s,ofs,len)
     {if
       (0 <= ofs && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
       {var r=caml_create_bytes(len);caml_blit_bytes(s,ofs,r,0,len);return r}
      return invalid_arg(_x_)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function blit(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_bytes_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_y_)}
    function blit_string(s1,ofs1,s2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((caml_ml_string_length(s1) - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
       return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_z_)}
    function map$1(f,s)
     {var l=caml_ml_bytes_length(s);
      if(0 === l)return s;
      var r=caml_create_bytes(l),_Kx_=l - 1 | 0,_Kw_=0;
      if(! (_Kx_ < 0))
       {var i=_Kw_;
        for(;;)
         {caml_bytes_unsafe_set(r,i,caml_call1(f,caml_bytes_unsafe_get(s,i)));
          var _Ky_=i + 1 | 0;
          if(_Kx_ !== i){var i=_Ky_;continue}
          break}}
      return r}
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    function concat(sep,l)
     {if(l)
       {var seplen=caml_ml_string_length(sep),acc=0,param=l,pos$1=0;
        for(;;)
         {if(param)
           {var _Kt_=param[1];
            if(param[2])
             {var
               param$0=param[2],
               x=(caml_ml_string_length(_Kt_) + seplen | 0) + acc | 0,
               acc$0=acc <= x?x:invalid_arg(_A_),
               acc=acc$0,
               param=param$0;
              continue}
            var _Kv_=caml_ml_string_length(_Kt_) + acc | 0}
          else
           var _Kv_=acc;
          var dst=caml_create_bytes(_Kv_),pos=pos$1,param$1=l;
          for(;;)
           {if(param$1)
             {var _Ku_=param$1[1];
              if(param$1[2])
               {var param$2=param$1[2];
                caml_blit_string(_Ku_,0,dst,pos,caml_ml_string_length(_Ku_));
                caml_blit_string
                 (sep,0,dst,pos + caml_ml_string_length(_Ku_) | 0,seplen);
                var
                 pos$0=(pos + caml_ml_string_length(_Ku_) | 0) + seplen | 0,
                 pos=pos$0,
                 param$1=param$2;
                continue}
              caml_blit_string(_Ku_,0,dst,pos,caml_ml_string_length(_Ku_))}
            return caml_string_of_bytes(dst)}}}
      return _B_}
    function iter$0(f,s)
     {var _Kr_=caml_ml_string_length(s) - 1 | 0,_Kq_=0;
      if(! (_Kr_ < 0))
       {var i=_Kq_;
        for(;;)
         {caml_call1(f,caml_string_unsafe_get(s,i));
          var _Ks_=i + 1 | 0;
          if(_Kr_ !== i){var i=_Ks_;continue}
          break}}
      return 0}
    function escaped(s$0)
     {var n$0=caml_ml_string_length(s$0),i$1=0;
      for(;;)
       {if(n$0 <= i$1)return s$0;
        var
         match$0=caml_string_unsafe_get(s$0,i$1),
         _Ko_=match$0 - 32 | 0,
         switch$0=0;
        if(59 < _Ko_ >>> 0)
         {if(33 < _Ko_ - 61 >>> 0)switch$0 = 1}
        else
         if(2 === _Ko_)switch$0 = 1;
        if(switch$0)
         {var
           s$1=caml_bytes_of_string(s$0),
           n=[0,0],
           _Kh_=caml_ml_bytes_length(s$1) - 1 | 0,
           _Kg_=0;
          if(! (_Kh_ < 0))
           {var i$0=_Kg_;
            for(;;)
             {var match=caml_bytes_unsafe_get(s$1,i$0),switch$1=0;
              if(32 <= match)
               {var _Kl_=match - 34 | 0,switch$2=0;
                if(58 < _Kl_ >>> 0)
                 {if(93 <= _Kl_)switch$2 = 1}
                else
                 if(56 < _Kl_ - 1 >>> 0){switch$1 = 1;switch$2 = 1}
                if(! switch$2){var _Km_=1;switch$1 = 2}}
              else
               if(11 <= match)
                {if(13 === match)switch$1 = 1}
               else
                if(8 <= match)switch$1 = 1;
              switch(switch$1)
               {case 0:var _Km_=4;break;case 1:var _Km_=2;break}
              n[1] = n[1] + _Km_ | 0;
              var _Kn_=i$0 + 1 | 0;
              if(_Kh_ !== i$0){var i$0=_Kn_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$1))
           var _Kp_=copy(s$1);
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _Kj_=caml_ml_bytes_length(s$1) - 1 | 0,_Ki_=0;
            if(! (_Kj_ < 0))
             {var i=_Ki_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s$1,i),switch$3=0;
                if(35 <= c)
                 if(92 === c)
                  switch$3 = 2;
                 else
                  if(127 <= c)switch$3 = 1;else switch$3 = 3;
                else
                 if(32 <= c)
                  if(34 <= c)switch$3 = 2;else switch$3 = 3;
                 else
                  if(14 <= c)
                   switch$3 = 1;
                  else
                   switch(c)
                    {case 8:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],98);
                      break;
                     case 9:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],116);
                      break;
                     case 10:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],110);
                      break;
                     case 13:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],114);
                      break;
                     default:switch$3 = 1}
                switch(switch$3)
                 {case 1:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 2:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],c);
                   break;
                  case 3:caml_bytes_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _Kk_=i + 1 | 0;
                if(_Kj_ !== i){var i=_Kk_;continue}
                break}}
            var _Kp_=s}
          return caml_string_of_bytes(_Kp_)}
        var i$2=i$1 + 1 | 0,i$1=i$2;
        continue}}
    function index_rec(s,lim,i,c)
     {var i$0=i;
      for(;;)
       {if(lim <= i$0)throw Not_found;
        if(caml_string_unsafe_get(s,i$0) === c)return i$0;
        var i$1=i$0 + 1 | 0,i$0=i$1;
        continue}}
    function index(s,c){return index_rec(s,caml_ml_string_length(s),0,c)}
    function index_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))return index_rec(s,l,i,c);
      return invalid_arg(_C_)}
    function contains_from(s,i,c)
     {var l=caml_ml_string_length(s);
      if(0 <= i && ! (l < i))
       try
        {index_rec(s,l,i,c);var _Ke_=1;return _Ke_}
       catch(_Kf_)
        {_Kf_ = caml_wrap_exception(_Kf_);
         if(_Kf_ === Not_found)return 0;
         throw _Kf_}
      return invalid_arg(_D_)}
    function contains(s,c){return contains_from(s,0,c)}
    function uppercase$0(s)
     {var s$0=caml_bytes_of_string(s);
      return caml_string_of_bytes(map$1(uppercase,s$0))}
    function lowercase(s)
     {var s$0=caml_bytes_of_string(s);
      return caml_string_of_bytes(map$1(f,s$0))}
    var compare=caml_string_compare;
    function is_block(a){return 1 - (typeof a === "number"?1:0)}
    function of_val(x)
     {var switch$0=0;
      if(is_block(x) && caml_obj_tag(x) !== 248 && 1 <= x.length - 1)
       {var slot=x[1];switch$0 = 1}
      if(! switch$0)var slot=x;
      var switch$1=0;
      if(is_block(slot) && caml_obj_tag(slot) === 248)
       {var name=slot[1];switch$1 = 1}
      if(! switch$1)var name=invalid_arg(_F_);
      return caml_obj_tag(name) === 252?slot:invalid_arg(_E_)}
    function id(slot){return slot[2]}
    var max_ephe_length=max_length - 2 | 0;
    function init(l,f)
     {if(0 === l)return [0];
      if(0 <= l)
       {var res=caml_make_vect(l,caml_call1(f,0)),_Kc_=l - 1 | 0,_Kb_=1;
        if(! (_Kc_ < 1))
         {var i=_Kb_;
          for(;;)
           {res[1 + i] = caml_call1(f,i);
            var _Kd_=i + 1 | 0;
            if(_Kc_ !== i){var i=_Kd_;continue}
            break}}
        return res}
      return invalid_arg(_H_)}
    function sub$1(a,ofs,len)
     {if(0 <= ofs && 0 <= len && ! ((a.length - 1 - len | 0) < ofs))
       return caml_array_sub(a,ofs,len);
      return invalid_arg(_I_)}
    function blit$0(a1,ofs1,a2,ofs2,len)
     {if
       (0
        <=
        len
        &&
        0
        <=
        ofs1
        &&
        !
        ((a1.length - 1 - len | 0) < ofs1)
        &&
        0
        <=
        ofs2
        &&
        !
        ((a2.length - 1 - len | 0) < ofs2))
       return caml_array_blit(a1,ofs1,a2,ofs2,len);
      return invalid_arg(_J_)}
    function map$2(f,a)
     {var l=a.length - 1;
      if(0 === l)return [0];
      var r=caml_make_vect(l,caml_call1(f,a[1])),_J$_=l - 1 | 0,_J__=1;
      if(! (_J$_ < 1))
       {var i=_J__;
        for(;;)
         {r[1 + i] = caml_call1(f,a[1 + i]);
          var _Ka_=i + 1 | 0;
          if(_J$_ !== i){var i=_Ka_;continue}
          break}}
      return r}
    function to_list(a)
     {var i$1=a.length - 1 - 1 | 0,i=i$1,res=0;
      for(;;)
       {if(0 <= i)
         {var res$0=[0,a[1 + i],res],i$0=i - 1 | 0,i=i$0,res=res$0;continue}
        return res}}
    function to_array(l)
     {if(l)
       {var tl=l[2],hd=l[1],accu=0,param=l;
        for(;;)
         {if(param)
           {var
             param$0=param[2],
             accu$0=accu + 1 | 0,
             accu=accu$0,
             param=param$0;
            continue}
          var a=caml_make_vect(accu,hd),i=1,param$1=tl;
          for(;;)
           {if(param$1)
             {var param$2=param$1[2],hd$0=param$1[1];
              a[1 + i] = hd$0;
              var i$0=i + 1 | 0,i=i$0,param$1=param$2;
              continue}
            return a}}}
      return [0]}
    var compare$0=caml_int_compare,zero=0;
    function abs$0(n){return caml_greaterequal(n,0)?n:- n | 0}
    function int32_to_string(n){return caml_format_int(_K_,n)}
    function pred(n){return caml_int64_sub(n,_L_)}
    function abs$1(n){return caml_greaterequal(n,_M_)?n:caml_int64_neg(n)}
    function int64_to_string(n){return caml_int64_format(_O_,n)}
    var zero$1=0;
    function abs$2(n){return caml_greaterequal(n,0)?n:- n | 0}
    function nativeint_to_string(n){return caml_format_int(_P_,n)}
    function engine(tbl,state,buf)
     {var
       result=caml_lex_engine(tbl,state,buf),
       _J7_=0 <= result?1:0,
       _J8_=_J7_?buf[12] !== dummy_pos?1:0:_J7_;
      if(_J8_)
       {buf[11] = buf[12];
        var _J9_=buf[12];
        buf[12] = [0,_J9_[1],_J9_[2],_J9_[3],buf[4] + buf[6] | 0]}
      return result}
    function from_string(opt,s)
     {if(opt)var sth=opt[1],with_positions=sth;else var with_positions=1;
      var
       _JX_=with_positions?zero_pos:dummy_pos,
       _JY_=with_positions?zero_pos:dummy_pos,
       _JZ_=[0],
       _J0_=1,
       _J1_=0,
       _J2_=0,
       _J3_=0,
       _J4_=0,
       _J5_=0,
       _J6_=caml_ml_string_length(s),
       _JW_=copy(caml_bytes_of_string(s));
      return [0,
              function(lexbuf){lexbuf[9] = 1;return 0},
              _JW_,
              _J6_,
              _J5_,
              _J4_,
              _J3_,
              _J2_,
              _J1_,
              _J0_,
              _JZ_,
              _JY_,
              _JX_]}
    function sub_lexeme(lexbuf,i1,i2)
     {var len=i2 - i1 | 0;return sub_string(lexbuf[2],i1,len)}
    var Parse_error=[248,_Q_,caml_fresh_oo_id(0)];
    function ___(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_JV_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_JV_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_JQ_=height(lr);
            if(_JQ_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _JR_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_JR_)}
            return invalid_arg(_R_)}
          return invalid_arg(_S_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_JS_=height(rl);
            if(_JS_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _JT_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_JT_)}
            return invalid_arg(_U_)}
          return invalid_arg(_V_)}
        var _JU_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_JU_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function find_first(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,v0,d0]}}
            var param$1=r$0;
            continue}
          throw Not_found}}
      function find_first_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=r$0;
            continue}
          return 0}}
      function find_last(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,v0,d0]}}
            var param$1=l$0;
            continue}
          throw Not_found}}
      function find_last_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=l$0;
            continue}
          return 0}}
      function find_opt(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return [0,d];
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _JP_=0 === c?1:0;
            if(_JP_)return _JP_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _JO_=param$0[1];
            if(_JO_){var param$0=_JO_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,v,d]}
          throw Not_found}}
      function min_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _JN_=param$0[1];
            if(_JN_){var param$0=_JN_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,[0,v,d]]}
          return 0}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
            var d=param$0[3],v=param$0[2];
            return [0,v,d]}
          throw Not_found}}
      function max_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {if(param$0[4]){var param$1=param$0[4],param$0=param$1;continue}
            var d=param$0[3],v=param$0[2];
            return [0,[0,v,d]]}
          return 0}}
      function remove_min_binding(param)
       {if(param)
         {var _JM_=param[1];
          if(_JM_)
           {var r=param[4],d=param[3],v=param[2];
            return bal(remove_min_binding(_JM_),v,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_W_)}
      function _Jl_(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return bal(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function remove(x,m)
       {if(m)
         {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return _Jl_(l,r);
          if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=remove(x,l);
          return l === ll?m:bal(ll,v,d,r)}
        return 0}
      function update(x,f,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)
           {var match=caml_call1(f,[0,d]);
            if(match){var data=match[1];return d === data?m:[0,l,x,data,r,h]}
            return _Jl_(l,r)}
          if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=update(x,f,l);
          return l === ll?m:bal(ll,v,d,r)}
        var match$0=caml_call1(f,0);
        if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var param$1=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=param$1;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             m$1=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
             m$0=m$1,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _JJ_=caml_call2(p,v,d);
            if(_JJ_)
             {var _JK_=for_all(p,l);
              if(_JK_){var param$0=r;continue}
              var _JL_=_JK_}
            else
             var _JL_=_JJ_;
            return _JL_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _JG_=caml_call2(p,v,d);
            if(_JG_)
             var _JH_=_JG_;
            else
             {var _JI_=exists(p,l);
              if(! _JI_){var param$0=r;continue}
              var _JH_=_JI_}
            return _JH_}
          return 0}}
      function add_min_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(add_min_binding(k,x,l),v,d,r)}
        return singleton(k,x)}
      function add_max_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(l,v,d,add_max_binding(k,x,r))}
        return singleton(k,x)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return join(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _X_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _JC_=merge(f,r1,r2),
             _JD_=caml_call3(f,v1,[0,d1],d2);
            return concat_or_join(merge(f,l1,l2),v1,_JD_,_JC_)}}
        else
         if(! s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _JE_=merge(f,r1$0,r2$0),
           _JF_=caml_call3(f,v2,d1$0,[0,d2$0]);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_JF_,_JE_)}
        throw [0,Assert_failure,_Y_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,m)
       {if(m)
         {var
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0 && r === r$0)return m;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function filter_map(f,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=filter_map(f,l),
           fvd=caml_call2(f,v,d),
           r$0=filter_map(f,r);
          if(fvd){var d$0=fvd[1];return join(l$0,v,d$0,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _JA_=concat(lf,rf);return [0,join(lt,v,d,rt),_JA_]}
          var _JB_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_JB_]}
        return _Z_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var c$0=caml_call2(cmp,d1,d2);
                if(0 === c$0)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                return c$0}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               _Jx_=0 === caml_call2(Ord[1],v1,v2)?1:0;
              if(_Jx_)
               {var _Jy_=caml_call2(cmp,d1,d2);
                if(_Jy_)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                var _Jz_=_Jy_}
              else
               var _Jz_=_Jx_;
              return _Jz_}
            return 0}
          return e2?0:1}}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_Jw_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _Jw_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             param$1=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=param$1;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      function add_seq(i,m)
       {var acc=m,seq=i;
        for(;;)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             seq$0=match[2],
             x=match[1],
             v=x[2],
             k=x[1],
             acc$0=add(k,v,acc),
             acc=acc$0,
             seq=seq$0;
            continue}
          return acc}}
      function of_seq(i){return add_seq(i,empty)}
      function seq_of_enum(c,param)
       {if(c)
         {var rest=c[4],t=c[3],v=c[2],k=c[1],_Ju_=cons_enum(t,rest);
          return [0,[0,k,v],function(_Jv_){return seq_of_enum(_Ju_,_Jv_)}]}
        return 0}
      function to_seq(m)
       {var _Js_=cons_enum(m,0);
        return function(_Jt_){return seq_of_enum(_Js_,_Jt_)}}
      function snoc_enum(s,e)
       {var s$0=s,e$0=e;
        for(;;)
         {if(s$0)
           {var
             s$1=s$0[4],
             d=s$0[3],
             v=s$0[2],
             l=s$0[1],
             e$1=[0,v,d,l,e$0],
             s$0=s$1,
             e$0=e$1;
            continue}
          return e$0}}
      function rev_seq_of_enum(c,param)
       {if(c)
         {var rest=c[4],t=c[3],v=c[2],k=c[1],_Jq_=snoc_enum(t,rest);
          return [0,[0,k,v],function(_Jr_){return rev_seq_of_enum(_Jq_,_Jr_)}]}
        return 0}
      function to_rev_seq(c)
       {var _Jo_=snoc_enum(c,0);
        return function(_Jp_){return rev_seq_of_enum(_Jo_,_Jp_)}}
      function to_seq_from(low,m)
       {var m$0=m,c=0;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             n=caml_call2(Ord[1],v,low);
            if(0 !== n)
             {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
              var m$0=r;
              continue}
            var _Jm_=[0,v,d,r,c]}
          else
           var _Jm_=c;
          return function(_Jn_){return seq_of_enum(_Jm_,_Jn_)}}}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              update,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              filter_map,
              partition,
              cardinal,
              bindings,
              min_binding,
              min_binding_opt,
              max_binding,
              max_binding_opt,
              min_binding,
              min_binding_opt,
              split,
              find,
              find_opt,
              find_first,
              find_first_opt,
              find_last,
              find_last_opt,
              map,
              mapi,
              to_seq,
              to_rev_seq,
              to_seq_from,
              add_seq,
              of_seq]}
    var Empty=[248,_$_,caml_fresh_oo_id(0)];
    function create(param){return [0,0,0]}
    function clear(s){s[1] = 0;s[2] = 0;return 0}
    function push(x,s){s[1] = [0,x,s[1]];s[2] = s[2] + 1 | 0;return 0}
    function pop_opt(s)
     {var _Jk_=s[1];
      if(_Jk_)
       {var tl=_Jk_[2],hd=_Jk_[1];s[1] = tl;s[2] = s[2] - 1 | 0;return [0,hd]}
      return 0}
    function top_opt(s)
     {var _Jj_=s[1];if(_Jj_){var hd=_Jj_[1];return [0,hd]}return 0}
    var Empty$0=[248,_aa_,caml_fresh_oo_id(0)];
    function clear$0(q){q[1] = 0;q[2] = 0;q[3] = 0;return 0}
    function add(x,q)
     {var cell=[0,x,0],_Ji_=q[3];
      return _Ji_
              ?(q[1] = q[1] + 1 | 0,_Ji_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    var Undefined=[248,_ab_,caml_fresh_oo_id(0)];
    function raise_undefined(param){throw Undefined}
    function force_lazy_block(blk)
     {var closure=blk[1];
      blk[1] = raise_undefined;
      try
       {var result=caml_call1(closure,0);
        caml_obj_make_forward(blk,result);
        return result}
      catch(e)
       {e = caml_wrap_exception(e);blk[1] = function(param){throw e};throw e}}
    function from_val(v)
     {var t=caml_obj_tag(v);
      if(t !== 250 && t !== 246 && t !== 253)return v;
      return caml_lazy_make_forward(v)}
    var
     Failure$0=[248,_ac_,caml_fresh_oo_id(0)],
     Error=[248,_ad_,caml_fresh_oo_id(0)];
    function create$0(n)
     {var
       n$0=1 <= n?n:1,
       n$1=max_length$0 < n$0?max_length$0:n$0,
       s=caml_create_bytes(n$1);
      return [0,s,0,n$1,s]}
    function contents(b){return sub_string(b[1],0,b[2])}
    function reset(b)
     {b[2] = 0;b[1] = b[4];b[3] = caml_ml_bytes_length(b[1]);return 0}
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_length$0 < new_len[1])
         if((old_pos + more | 0) <= max_length$0)
          new_len[1] = max_length$0;
         else
          k(_ah_);
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_af_]}
        throw [0,Assert_failure,_ag_]}}
    function add_char(b,c)
     {var pos=b[2];
      if(b[3] <= pos)resize(b,1);
      caml_bytes_unsafe_set(b[1],pos,c);
      b[2] = pos + 1 | 0;
      return 0}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function create_char_set(param){return make(32,0)}
    function add_in_char_set(char_set,c)
     {var str_ind=c >>> 3 | 0,mask=1 << (c & 7);
      return caml_bytes_set
              (char_set,
               str_ind,
               char_of_int(caml_bytes_get(char_set,str_ind) | mask))}
    function pad_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return [0,1,width]}return 0}
    function param_format_of_ignored_format(ign,fmt)
     {if(typeof ign === "number")
       switch(ign)
        {case 0:return [0,[0,fmt]];
         case 1:return [0,[1,fmt]];
         case 2:return [0,[19,fmt]];
         default:return [0,[22,fmt]]}
      else
       switch(ign[0])
        {case 0:var pad_opt=ign[1];return [0,[2,pad_of_pad_opt(pad_opt),fmt]];
         case 1:
          var pad_opt$0=ign[1];return [0,[3,pad_of_pad_opt(pad_opt$0),fmt]];
         case 2:
          var pad_opt$1=ign[2],iconv=ign[1];
          return [0,[4,iconv,pad_of_pad_opt(pad_opt$1),0,fmt]];
         case 3:
          var pad_opt$2=ign[2],iconv$0=ign[1];
          return [0,[5,iconv$0,pad_of_pad_opt(pad_opt$2),0,fmt]];
         case 4:
          var pad_opt$3=ign[2],iconv$1=ign[1];
          return [0,[6,iconv$1,pad_of_pad_opt(pad_opt$3),0,fmt]];
         case 5:
          var pad_opt$4=ign[2],iconv$2=ign[1];
          return [0,[7,iconv$2,pad_of_pad_opt(pad_opt$4),0,fmt]];
         case 6:
          var prec_opt=ign[2],pad_opt$5=ign[1];
          if(prec_opt)var ndec=prec_opt[1],_Jh_=[0,ndec];else var _Jh_=0;
          return [0,[8,_aj_,pad_of_pad_opt(pad_opt$5),_Jh_,fmt]];
         case 7:
          var pad_opt$6=ign[1];return [0,[9,pad_of_pad_opt(pad_opt$6),fmt]];
         case 8:
          var fmtty=ign[2],pad_opt$7=ign[1];
          return [0,[13,pad_opt$7,fmtty,fmt]];
         case 9:
          var fmtty$0=ign[2],pad_opt$8=ign[1];
          return [0,[14,pad_opt$8,fmtty$0,fmt]];
         case 10:
          var char_set=ign[2],width_opt=ign[1];
          return [0,[20,width_opt,char_set,fmt]];
         default:var counter=ign[1];return [0,[21,counter,fmt]]}}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _Jf_=len < min_len?1:0;
      if(_Jf_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _Jg_=0}
      else
       var _Jg_=_Jf_;
      return _Jg_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit_string(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function char_of_iconv(iconv)
     {switch(iconv)
       {case 6:
        case 7:return 120;
        case 8:
        case 9:return 88;
        case 10:
        case 11:return 111;
        case 12:
        case 15:return 117;
        case 0:
        case 1:
        case 2:
        case 13:return 100;
        default:return 105}}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _ak_;
         case 1:return _al_;
         case 2:return _am_;
         case 3:return _an_;
         case 4:return _ao_;
         case 5:return _ap_;
         default:return _aq_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return symbol(_ar_,make$0(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var fmtty$1=fmtty$0[1];
           buffer_add_string(buf,_as_);
           var fmtty$0=fmtty$1;
           continue;
          case 1:
           var fmtty$2=fmtty$0[1];
           buffer_add_string(buf,_at_);
           var fmtty$0=fmtty$2;
           continue;
          case 2:
           var fmtty$3=fmtty$0[1];
           buffer_add_string(buf,_au_);
           var fmtty$0=fmtty$3;
           continue;
          case 3:
           var fmtty$4=fmtty$0[1];
           buffer_add_string(buf,_av_);
           var fmtty$0=fmtty$4;
           continue;
          case 4:
           var fmtty$5=fmtty$0[1];
           buffer_add_string(buf,_aw_);
           var fmtty$0=fmtty$5;
           continue;
          case 5:
           var fmtty$6=fmtty$0[1];
           buffer_add_string(buf,_ax_);
           var fmtty$0=fmtty$6;
           continue;
          case 6:
           var fmtty$7=fmtty$0[1];
           buffer_add_string(buf,_ay_);
           var fmtty$0=fmtty$7;
           continue;
          case 7:
           var fmtty$8=fmtty$0[1];
           buffer_add_string(buf,_az_);
           var fmtty$0=fmtty$8;
           continue;
          case 8:
           var fmtty$9=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_aA_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_aB_);
           var fmtty$0=fmtty$9;
           continue;
          case 9:
           var fmtty$10=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_aC_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_aD_);
           var fmtty$0=fmtty$10;
           continue;
          case 10:
           var fmtty$11=fmtty$0[1];
           buffer_add_string(buf,_aE_);
           var fmtty$0=fmtty$11;
           continue;
          case 11:
           var fmtty$12=fmtty$0[1];
           buffer_add_string(buf,_aF_);
           var fmtty$0=fmtty$12;
           continue;
          case 12:
           var fmtty$13=fmtty$0[1];
           buffer_add_string(buf,_aG_);
           var fmtty$0=fmtty$13;
           continue;
          case 13:
           var fmtty$14=fmtty$0[1];
           buffer_add_string(buf,_aH_);
           var fmtty$0=fmtty$14;
           continue;
          default:
           var fmtty$15=fmtty$0[1];
           buffer_add_string(buf,_aI_);
           var fmtty$0=fmtty$15;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _IT_=function(param){return 0},
         _IU_=function(param){return 0},
         _IV_=function(param){return 0};
        return [0,function(param){return 0},_IV_,_IU_,_IT_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _IW_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_IW_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _IX_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _IX_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _IY_=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _IY_,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _IZ_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _IZ_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _I0_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _I0_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _I1_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _I1_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _I2_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _I2_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _I3_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _I3_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _I4_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _I4_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _I5_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _I6_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _I7_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _I7_,
                  _I6_,
                  _I5_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _I8_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _I8_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _I9_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _I9_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _I__=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _I__,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _I$_=function(param){caml_call1(de$12,0);return 0},
           _Ja_=function(param){caml_call1(ed$12,0);return 0},
           _Jb_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _Jb_,
                  _Ja_,
                  _I$_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _Jc_=function(param){caml_call1(de$13,0);return 0},
           _Jd_=function(param){caml_call1(ed$13,0);return 0},
           _Je_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _Je_,
                  _Jd_,
                  _Jc_]}}
    function trans(ty1,match)
     {var switch$0=0;
      if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:break;
          case 11:switch$0 = 1;break;
          case 12:switch$0 = 2;break;
          case 13:switch$0 = 3;break;
          case 14:switch$0 = 4;break;
          case 8:switch$0 = 5;break;
          case 9:switch$0 = 6;break;
          default:throw [0,Assert_failure,_aJ_]}
      else
       switch(ty1[0])
        {case 0:
          var switch$1=0,_IA_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_IA_,rest2)];
             case 8:switch$0 = 5;switch$1 = 1;break;
             case 9:switch$0 = 6;switch$1 = 1;break;
             case 10:switch$1 = 1;break;
             case 11:switch$0 = 1;switch$1 = 1;break;
             case 12:switch$0 = 2;switch$1 = 1;break;
             case 13:switch$0 = 3;switch$1 = 1;break;
             case 14:switch$0 = 4;switch$1 = 1;break
             }
          if(! switch$1)switch$0 = 7;
          break;
         case 1:
          var switch$2=0,_IB_=ty1[1];
          if(typeof match !== "number")
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_IB_,rest2$0)];
             case 8:switch$0 = 5;switch$2 = 1;break;
             case 9:switch$0 = 6;switch$2 = 1;break;
             case 10:switch$2 = 1;break;
             case 11:switch$0 = 1;switch$2 = 1;break;
             case 12:switch$0 = 2;switch$2 = 1;break;
             case 13:switch$0 = 3;switch$2 = 1;break;
             case 14:switch$0 = 4;switch$2 = 1;break
             }
          if(! switch$2)switch$0 = 7;
          break;
         case 2:
          var switch$3=0,_IC_=ty1[1];
          if(typeof match === "number")
           switch$3 = 1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_IC_,rest2$1)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$3 = 1}
          if(switch$3)switch$0 = 7;
          break;
         case 3:
          var switch$4=0,_ID_=ty1[1];
          if(typeof match === "number")
           switch$4 = 1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_ID_,rest2$2)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$4 = 1}
          if(switch$4)switch$0 = 7;
          break;
         case 4:
          var switch$5=0,_IE_=ty1[1];
          if(typeof match === "number")
           switch$5 = 1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_IE_,rest2$3)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$5 = 1}
          if(switch$5)switch$0 = 7;
          break;
         case 5:
          var switch$6=0,_IF_=ty1[1];
          if(typeof match === "number")
           switch$6 = 1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_IF_,rest2$4)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$6 = 1}
          if(switch$6)switch$0 = 7;
          break;
         case 6:
          var switch$7=0,_IG_=ty1[1];
          if(typeof match === "number")
           switch$7 = 1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_IG_,rest2$5)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$7 = 1}
          if(switch$7)switch$0 = 7;
          break;
         case 7:
          var switch$8=0,_IH_=ty1[1];
          if(typeof match === "number")
           switch$8 = 1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_IH_,rest2$6)];
             case 8:switch$0 = 5;break;
             case 9:switch$0 = 6;break;
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$8 = 1}
          if(switch$8)switch$0 = 7;
          break;
         case 8:
          var switch$9=0,_II_=ty1[2],_IJ_=ty1[1];
          if(typeof match === "number")
           switch$9 = 1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_IK_=trans(_II_,rest2$7);
              return [8,trans(_IJ_,ty2),_IK_];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$9 = 1}
          if(switch$9)throw [0,Assert_failure,_aS_];
          break;
         case 9:
          var switch$10=0,_IL_=ty1[3],_IM_=ty1[2],_IN_=ty1[1];
          if(typeof match === "number")
           switch$10 = 1;
          else
           switch(match[0])
            {case 8:switch$0 = 5;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_IM_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_IN_,ty22,trans(_IL_,rest2$8)];
             case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:switch$0 = 4;break;
             default:switch$10 = 1}
          if(switch$10)throw [0,Assert_failure,_aT_];
          break;
         case 10:
          var _IO_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_IO_,rest2$9)]}
          throw [0,Assert_failure,_aU_];
         case 11:
          var switch$11=0,_IP_=ty1[1];
          if(typeof match === "number")
           switch$11 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:var rest2$10=match[1];return [11,trans(_IP_,rest2$10)];
             default:switch$11 = 1}
          if(switch$11)throw [0,Assert_failure,_aV_];
          break;
         case 12:
          var switch$12=0,_IQ_=ty1[1];
          if(typeof match === "number")
           switch$12 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:var rest2$11=match[1];return [12,trans(_IQ_,rest2$11)];
             default:switch$12 = 1}
          if(switch$12)throw [0,Assert_failure,_aW_];
          break;
         case 13:
          var switch$13=0,_IR_=ty1[1];
          if(typeof match === "number")
           switch$13 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:var rest2$12=match[1];return [13,trans(_IR_,rest2$12)];
             default:switch$13 = 1}
          if(switch$13)throw [0,Assert_failure,_aX_];
          break;
         default:
          var switch$14=0,_IS_=ty1[1];
          if(typeof match === "number")
           switch$14 = 1;
          else
           switch(match[0])
            {case 10:break;
             case 11:switch$0 = 1;break;
             case 12:switch$0 = 2;break;
             case 13:switch$0 = 3;break;
             case 14:var rest2$13=match[1];return [14,trans(_IS_,rest2$13)];
             default:switch$14 = 1}
          if(switch$14)throw [0,Assert_failure,_aY_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_aM_];
        case 1:throw [0,Assert_failure,_aN_];
        case 2:throw [0,Assert_failure,_aO_];
        case 3:throw [0,Assert_failure,_aP_];
        case 4:throw [0,Assert_failure,_aQ_];
        case 5:throw [0,Assert_failure,_aK_];
        case 6:throw [0,Assert_failure,_aL_];
        default:throw [0,Assert_failure,_aR_]}}
    function fmtty_of_precision_fmtty(prec,fmtty)
     {return typeof prec === "number"?prec?[2,fmtty]:fmtty:fmtty}
    function fmtty_of_padding_fmtty(pad,fmtty)
     {return typeof pad === "number"?fmtty:0 === pad[0]?fmtty:[2,fmtty]}
    function fmtty_of_custom(arity,fmtty)
     {if(arity)
       {var arity$0=arity[1];return [12,fmtty_of_custom(arity$0,fmtty)]}
      return fmtty}
    function fmtty_of_fmt(fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:var rest=fmtty$0[1];return [0,fmtty_of_fmt(rest)];
          case 1:var rest$0=fmtty$0[1];return [0,fmtty_of_fmt(rest$0)];
          case 2:
           var rest$1=fmtty$0[2],pad=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad,[1,fmtty_of_fmt(rest$1)]);
          case 3:
           var rest$2=fmtty$0[2],pad$0=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$0,[1,fmtty_of_fmt(rest$2)]);
          case 4:
           var
            rest$3=fmtty$0[4],
            prec=fmtty$0[3],
            pad$1=fmtty$0[2],
            ty_rest=fmtty_of_fmt(rest$3),
            prec_ty=fmtty_of_precision_fmtty(prec,[2,ty_rest]);
           return fmtty_of_padding_fmtty(pad$1,prec_ty);
          case 5:
           var
            rest$4=fmtty$0[4],
            prec$0=fmtty$0[3],
            pad$2=fmtty$0[2],
            ty_rest$0=fmtty_of_fmt(rest$4),
            prec_ty$0=fmtty_of_precision_fmtty(prec$0,[3,ty_rest$0]);
           return fmtty_of_padding_fmtty(pad$2,prec_ty$0);
          case 6:
           var
            rest$5=fmtty$0[4],
            prec$1=fmtty$0[3],
            pad$3=fmtty$0[2],
            ty_rest$1=fmtty_of_fmt(rest$5),
            prec_ty$1=fmtty_of_precision_fmtty(prec$1,[4,ty_rest$1]);
           return fmtty_of_padding_fmtty(pad$3,prec_ty$1);
          case 7:
           var
            rest$6=fmtty$0[4],
            prec$2=fmtty$0[3],
            pad$4=fmtty$0[2],
            ty_rest$2=fmtty_of_fmt(rest$6),
            prec_ty$2=fmtty_of_precision_fmtty(prec$2,[5,ty_rest$2]);
           return fmtty_of_padding_fmtty(pad$4,prec_ty$2);
          case 8:
           var
            rest$7=fmtty$0[4],
            prec$3=fmtty$0[3],
            pad$5=fmtty$0[2],
            ty_rest$3=fmtty_of_fmt(rest$7),
            prec_ty$3=fmtty_of_precision_fmtty(prec$3,[6,ty_rest$3]);
           return fmtty_of_padding_fmtty(pad$5,prec_ty$3);
          case 9:
           var rest$8=fmtty$0[2],pad$6=fmtty$0[1];
           return fmtty_of_padding_fmtty(pad$6,[7,fmtty_of_fmt(rest$8)]);
          case 10:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 11:var fmtty$2=fmtty$0[2],fmtty$0=fmtty$2;continue;
          case 12:var fmtty$3=fmtty$0[2],fmtty$0=fmtty$3;continue;
          case 13:
           var rest$9=fmtty$0[3],ty=fmtty$0[2];
           return [8,ty,fmtty_of_fmt(rest$9)];
          case 14:
           var rest$10=fmtty$0[3],ty$0=fmtty$0[2];
           return [9,ty$0,ty$0,fmtty_of_fmt(rest$10)];
          case 15:var rest$11=fmtty$0[1];return [10,fmtty_of_fmt(rest$11)];
          case 16:var rest$12=fmtty$0[1];return [11,fmtty_of_fmt(rest$12)];
          case 17:var fmtty$4=fmtty$0[2],fmtty$0=fmtty$4;continue;
          case 18:
           var
            rest$13=fmtty$0[2],
            fmting_gen=fmtty$0[1],
            _Iy_=fmtty_of_fmt(rest$13);
           if(0 === fmting_gen[0])
            var match=fmting_gen[1],fmt=match[1],_Iz_=fmtty_of_fmt(fmt);
           else
            var
             match$0=fmting_gen[1],
             fmt$0=match$0[1],
             _Iz_=fmtty_of_fmt(fmt$0);
           return concat_fmtty(_Iz_,_Iy_);
          case 19:var rest$14=fmtty$0[1];return [13,fmtty_of_fmt(rest$14)];
          case 20:var rest$15=fmtty$0[3];return [1,fmtty_of_fmt(rest$15)];
          case 21:var rest$16=fmtty$0[2];return [2,fmtty_of_fmt(rest$16)];
          case 22:var rest$17=fmtty$0[1];return [0,fmtty_of_fmt(rest$17)];
          case 23:
           var rest$18=fmtty$0[2],ign=fmtty$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:return [14,fmtty_of_fmt(rest$18)];
              default:var fmtty$0=rest$18;continue}
           else
            switch(ign[0])
             {case 0:var fmtty$0=rest$18;continue;
              case 1:var fmtty$0=rest$18;continue;
              case 2:var fmtty$0=rest$18;continue;
              case 3:var fmtty$0=rest$18;continue;
              case 4:var fmtty$0=rest$18;continue;
              case 5:var fmtty$0=rest$18;continue;
              case 6:var fmtty$0=rest$18;continue;
              case 7:var fmtty$0=rest$18;continue;
              case 8:var fmtty$0=rest$18;continue;
              case 9:
               var fmtty$5=ign[2];
               return concat_fmtty(fmtty$5,fmtty_of_fmt(rest$18));
              case 10:var fmtty$0=rest$18;continue;
              default:var fmtty$0=rest$18;continue}
          default:
           var rest$19=fmtty$0[3],arity=fmtty$0[1];
           return fmtty_of_custom(arity,fmtty_of_fmt(rest$19))}}
    var Type_mismatch=[248,_aZ_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(prec)
         {var _Ix_=match[2];
          if(typeof _Ix_ !== "number" && 2 === _Ix_[0])
           {var rest=_Ix_[1],pad$0=match[1];return [0,pad$0,1,rest]}
          throw Type_mismatch}
        var rest$0=match[2],pad$1=match[1];
        return [0,pad$1,0,rest$0]}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_format_substituti(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substituti(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substituti
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substituti
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substituti
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substituti
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substituti
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substituti
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substituti
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substituti
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _Iv_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_Iv_))
             throw Type_mismatch;
            var _Iw_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_Iw_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substituti
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substituti
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substituti
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substituti
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substituti
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           match$1=type_padding(pad,fmtty),
           _Ie_=match$1[2],
           _Id_=match$1[1];
          if(typeof _Ie_ !== "number" && 1 === _Ie_[0])
           {var
             fmtty_rest$1=_Ie_[1],
             match$2=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$2[2],
             fmt$2=match$2[1];
            return [0,[2,_Id_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           match$3=type_padding(pad$0,fmtty),
           _Ig_=match$3[2],
           _If_=match$3[1];
          if(typeof _Ig_ !== "number" && 1 === _Ig_[0])
           {var
             fmtty_rest$2=_Ig_[1],
             match$4=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$4[2],
             fmt$3=match$4[1];
            return [0,[3,_If_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           match$5=type_padprec(pad$1,prec,fmtty),
           _Ii_=match$5[3],
           _Ih_=match$5[1];
          if(typeof _Ii_ !== "number" && 2 === _Ii_[0])
           {var
             fmtty_rest$3=_Ii_[1],
             prec$0=match$5[2],
             match$6=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$6[2],
             fmt$4=match$6[1];
            return [0,[4,iconv,_Ih_,prec$0,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$1=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           match$7=type_padprec(pad$2,prec$1,fmtty),
           _Ik_=match$7[3],
           _Ij_=match$7[1];
          if(typeof _Ik_ !== "number" && 3 === _Ik_[0])
           {var
             fmtty_rest$4=_Ik_[1],
             prec$2=match$7[2],
             match$8=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$8[2],
             fmt$5=match$8[1];
            return [0,[5,iconv$0,_Ij_,prec$2,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$3=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           match$9=type_padprec(pad$3,prec$3,fmtty),
           _Im_=match$9[3],
           _Il_=match$9[1];
          if(typeof _Im_ !== "number" && 4 === _Im_[0])
           {var
             fmtty_rest$5=_Im_[1],
             prec$4=match$9[2],
             match$10=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$10[2],
             fmt$6=match$10[1];
            return [0,[6,iconv$1,_Il_,prec$4,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$5=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           match$11=type_padprec(pad$4,prec$5,fmtty),
           _Io_=match$11[3],
           _In_=match$11[1];
          if(typeof _Io_ !== "number" && 5 === _Io_[0])
           {var
             fmtty_rest$6=_Io_[1],
             prec$6=match$11[2],
             match$12=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$12[2],
             fmt$7=match$12[1];
            return [0,[7,iconv$2,_In_,prec$6,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$7=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           match$13=type_padprec(pad$5,prec$7,fmtty),
           _Iq_=match$13[3],
           _Ip_=match$13[1];
          if(typeof _Iq_ !== "number" && 6 === _Iq_[0])
           {var
             fmtty_rest$7=_Iq_[1],
             prec$8=match$13[2],
             match$14=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$14[2],
             fmt$8=match$14[1];
            return [0,[8,fconv,_Ip_,prec$8,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           match$15=type_padding(pad$6,fmtty),
           _Is_=match$15[2],
           _Ir_=match$15[1];
          if(typeof _Is_ !== "number" && 7 === _Is_[0])
           {var
             fmtty_rest$8=_Is_[1],
             match$16=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$16[2],
             fmt$9=match$16[1];
            return [0,[9,_Ir_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$17=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$17[2],
           fmt$10=match$17[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$18=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$18[2],
           fmt$11=match$18[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$19=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$19[2],
           fmt$12=match$19[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$20=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$20[2],
             fmt$13=match$20[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _It_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_It_))
             throw Type_mismatch;
            var
             match$21=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$21[2],
             fmt$14=match$21[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$22=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$22[2],
             fmt$15=match$22[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$23=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$23[2],
             fmt$16=match$23[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$24=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$24[2],
           fmt$17=match$24[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$28=formatting_gen[1],
             str$0=match$28[2],
             fmt1=match$28[1],
             match$29=type_format_gen(fmt1,fmtty),
             fmtty2=match$29[2],
             fmt2=match$29[1],
             match$30=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$30[2],
             fmt3=match$30[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$31=formatting_gen[1],
           str$1=match$31[2],
           fmt1$0=match$31[1],
           match$32=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$32[2],
           fmt2$0=match$32[1],
           match$33=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$33[2],
           fmt3$0=match$33[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$25=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$25[2],
             fmt$18=match$25[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$26=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$26[2],
             fmt$19=match$26[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$27=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$27[2],
             fmt$20=match$27[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$34=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$34[2],
                 fmt$21=match$34[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _Iu_=type_ignored_format_substituti(sub_fmtty$3,rest,fmtty),
               match$35=_Iu_[2],
               fmtty$22=match$35[2],
               fmt$22=match$35[1],
               sub_fmtty$4=_Iu_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format(fmt,fmtty)
     {var _Ic_=type_format_gen(fmt,fmtty);
      if(typeof _Ic_[2] === "number"){var fmt$0=_Ic_[1];return fmt$0}
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _Ib_=2 === padty$0?48:32,res=make(width$0,_Ib_);
      switch(padty$0)
       {case 0:blit_string(str,0,res,0,len);break;
        case 1:blit_string(str,0,res,width$0 - len | 0,len);break;
        default:
         var switch$0=0;
         if(0 < len)
          {var switch$1=0;
           if
            (43
             !==
             caml_string_get(str,0)
             &&
             45
             !==
             caml_string_get(str,0)
             &&
             32
             !==
             caml_string_get(str,0))
            {switch$0 = 1;switch$1 = 1}
           if(! switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit_string(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0)}}
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$2=0;
           if(1 < len && 48 === caml_string_get(str,0))
            {var switch$3=0;
             if
              (120
               !==
               caml_string_get(str,1)
               &&
               88
               !==
               caml_string_get(str,1))
              {switch$2 = 1;switch$3 = 1}
             if(! switch$3)
              {caml_bytes_set(res,1,caml_string_get(str,1));
               blit_string(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0)}}
           else
            switch$2 = 1;
           if(switch$2)blit_string(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0),
       switch$0=0;
      if(58 <= c)
       {if(71 <= c)
         {if(! (5 < c - 97 >>> 0))switch$0 = 1}
        else
         if(65 <= c)switch$0 = 1}
      else
       {var switch$1=0;
        if(32 !== c)
         if(43 <= c)
          switch(c - 43 | 0)
           {case 5:
             if(len < (prec$0 + 2 | 0) && 1 < len)
              {var switch$2=0;
               if
                (120
                 ===
                 caml_string_get(str,1)
                 ||
                 88
                 ===
                 caml_string_get(str,1))
                switch$2 = 1;
               if(switch$2)
                {var res$1=make(prec$0 + 2 | 0,48);
                 caml_bytes_set(res$1,1,caml_string_get(str,1));
                 blit_string
                  (str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                 return caml_string_of_bytes(res$1)}}
             switch$0 = 1;
             switch$1 = 1;
             break;
            case 0:
            case 2:break;
            case 1:
            case 3:
            case 4:switch$1 = 1;break;
            default:switch$0 = 1;switch$1 = 1}
         else
          switch$1 = 1;
        if(! switch$1 && len < (prec$0 + 1 | 0))
         {var res$0=make(prec$0 + 1 | 0,48);
          caml_bytes_set(res$0,0,c);
          blit_string(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
          return caml_string_of_bytes(res$0)}}
      if(switch$0 && len < prec$0)
       {var res=make(prec$0,48);
        blit_string(str,0,res,prec$0 - len | 0,len);
        return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var
       str$0=escaped(str),
       l=caml_ml_string_length(str$0),
       res=make(l + 2 | 0,34);
      caml_blit_string(str$0,0,res,1,l);
      return caml_string_of_bytes(res)}
    function format_of_fconv(fconv,prec)
     {var prec$0=abs(prec),sth=opt[1];
      switch(fconv[2])
       {case 0:var symb=102;break;
        case 1:var symb=101;break;
        case 2:var symb=69;break;
        case 3:var symb=103;break;
        case 4:var symb=71;break;
        case 5:var symb=sth;break;
        case 6:var symb=104;break;
        case 7:var symb=72;break;
        default:var symb=70}
      var buf=buffer_create(16);
      buffer_add_char(buf,37);
      switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      if(8 <= fconv[2])buffer_add_char(buf,35);
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_string_of_jsbytes("" + prec$0));
      buffer_add_char(buf,symb);
      return buffer_contents(buf)}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_H8_=caml_ml_string_length(s) - 1 | 0,_H7_=0;
        if(! (_H8_ < 0))
         {var i$0=_H7_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0);
            if(! (9 < match - 48 >>> 0))n[1]++;
            var _Ia_=i$0 + 1 | 0;
            if(_H8_ !== i$0){var i$0=_Ia_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _H__=caml_ml_string_length(s) - 1 | 0,
         _H9_=0;
        if(! (_H__ < 0))
         {var i=_H9_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i);
            if(9 < c - 48 >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _H$_=i + 1 | 0;
            if(_H__ !== i){var i=_H$_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _H6_=_a1_;break;
        case 2:var _H6_=_a2_;break;
        case 4:var _H6_=_a4_;break;
        case 5:var _H6_=_a5_;break;
        case 6:var _H6_=_a6_;break;
        case 7:var _H6_=_a7_;break;
        case 8:var _H6_=_a8_;break;
        case 9:var _H6_=_a9_;break;
        case 10:var _H6_=_a__;break;
        case 11:var _H6_=_a$_;break;
        case 0:
        case 13:var _H6_=_a0_;break;
        case 3:
        case 14:var _H6_=_a3_;break;
        default:var _H6_=_ba_}
      return transform_int_alt(iconv,caml_format_int(_H6_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _H5_=_bp_;break;
        case 2:var _H5_=_bq_;break;
        case 4:var _H5_=_bs_;break;
        case 5:var _H5_=_bt_;break;
        case 6:var _H5_=_bu_;break;
        case 7:var _H5_=_bv_;break;
        case 8:var _H5_=_bw_;break;
        case 9:var _H5_=_bx_;break;
        case 10:var _H5_=_by_;break;
        case 11:var _H5_=_bz_;break;
        case 0:
        case 13:var _H5_=_bo_;break;
        case 3:
        case 14:var _H5_=_br_;break;
        default:var _H5_=_bA_}
      return transform_int_alt(iconv,caml_format_int(_H5_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _H4_=_bC_;break;
        case 2:var _H4_=_bD_;break;
        case 4:var _H4_=_bF_;break;
        case 5:var _H4_=_bG_;break;
        case 6:var _H4_=_bH_;break;
        case 7:var _H4_=_bI_;break;
        case 8:var _H4_=_bJ_;break;
        case 9:var _H4_=_bK_;break;
        case 10:var _H4_=_bL_;break;
        case 11:var _H4_=_bM_;break;
        case 0:
        case 13:var _H4_=_bB_;break;
        case 3:
        case 14:var _H4_=_bE_;break;
        default:var _H4_=_bN_}
      return transform_int_alt(iconv,caml_format_int(_H4_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _H3_=_bc_;break;
        case 2:var _H3_=_bd_;break;
        case 4:var _H3_=_bf_;break;
        case 5:var _H3_=_bg_;break;
        case 6:var _H3_=_bh_;break;
        case 7:var _H3_=_bi_;break;
        case 8:var _H3_=_bj_;break;
        case 9:var _H3_=_bk_;break;
        case 10:var _H3_=_bl_;break;
        case 11:var _H3_=_bm_;break;
        case 0:
        case 13:var _H3_=_bb_;break;
        case 3:
        case 14:var _H3_=_be_;break;
        default:var _H3_=_bn_}
      return transform_int_alt(iconv,caml_int64_format(_H3_,n))}
    function convert_float(fconv,prec,x)
     {function hex(param)
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        return caml_hexstring_of_float(x,prec,sign)}
      function caml_special_val(str)
       {var match=caml_classify_float(x);
        return 3 === match?x < 0.?_bP_:_bQ_:4 <= match?_bR_:str}
      switch(fconv[2])
       {case 5:
         var
          str=caml_format_float(format_of_fconv(fconv,prec),x),
          len=caml_ml_string_length(str),
          i=0;
         for(;;)
          {if(i === len)
            var _H1_=0;
           else
            {var match=caml_string_get(str,i),_H0_=match - 46 | 0,switch$0=0;
             if(23 < _H0_ >>> 0)
              {if(55 === _H0_)switch$0 = 1}
             else
              if(21 < _H0_ - 1 >>> 0)switch$0 = 1;
             if(! switch$0){var i$0=i + 1 | 0,i=i$0;continue}
             var _H1_=1}
           var _H2_=_H1_?str:symbol(str,_bO_);
           return caml_special_val(_H2_)}
        case 6:return hex(0);
        case 7:return uppercase$0(hex(0));
        case 8:return caml_special_val(hex(0));
        default:return caml_format_float(format_of_fconv(fconv,prec),x)}}
    function string_of_fmtty(fmtty)
     {var buf=buffer_create(16);
      bprint_fmtty(buf,fmtty);
      return buffer_contents(buf)}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {var switch$0=0;
             if(40 <= c)
              if(92 === c)
               var str=_q_;
              else
               if(127 <= c)switch$0 = 1;else switch$0 = 2;
             else
              if(32 <= c)
               if(39 <= c)var str=_r_;else switch$0 = 2;
              else
               if(14 <= c)
                switch$0 = 1;
               else
                switch(c)
                 {case 8:var str=_s_;break;
                  case 9:var str=_t_;break;
                  case 10:var str=_u_;break;
                  case 13:var str=_v_;break;
                  default:switch$0 = 1}
             switch(switch$0)
              {case 1:
                var s=caml_create_bytes(4);
                caml_bytes_unsafe_set(s,0,92);
                caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=caml_string_of_bytes(s);
                break;
               case 2:
                var s$0=caml_create_bytes(1);
                caml_bytes_unsafe_set(s$0,0,c);
                var str=caml_string_of_bytes(s$0);
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return prec$3
                      ?function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _HX_=pad$5[2],_HY_=pad$5[1];
               if(typeof prec$3 === "number")
                return prec$3
                        ?function(p,x)
                          {var str=fix_padding(_HY_,_HX_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)}
                        :function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_HY_,_HX_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_HY_,_HX_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _HZ_=pad$5[1];
             if(typeof prec$3 === "number")
              return prec$3
                      ?function(w,p,x)
                        {var str=fix_padding(_HZ_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_HZ_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_HZ_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,to_string);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var
            rest$9=fmt$0[3],
            sub_fmtty=fmt$0[2],
            ty=string_of_fmtty(sub_fmtty);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var fmt=param[1];
             return make_printf
                     (k$0,
                      acc$0,
                      concat_fmt(type_format(fmt,erase_rel(symm(fmtty))),rest$10))};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _HV_=fmt$0[1];
           if(0 === _HV_[0])
            {var
              rest$13=fmt$0[2],
              match=_HV_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_HV_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bS_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bT_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bU_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_bV_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _HW_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_HW_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_HW_])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_HU_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bW_];
         default:throw [0,Assert_failure,_bX_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _HT_=[8,acc,_bY_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_HT_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_HT_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _HS_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_HS_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_HS_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return match
                 ?function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _HP_=pad[2],_HQ_=pad[1];
          if(typeof match === "number")
           return match
                   ?function(p,x)
                     {var
                       str=
                        fix_padding
                         (_HQ_,_HP_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(x)
                     {var str=fix_padding(_HQ_,_HP_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_HQ_,_HP_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _HR_=pad[1];
        if(typeof match === "number")
         return match
                 ?function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_HR_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,x)
                   {var str=fix_padding(_HR_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_HR_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _HN_=acc$0[2],_HO_=acc$0[1];
           if(0 === _HN_[0])
            {var acc$1=_HN_[1];
             output_acc(o,_HO_);
             output_string(o,_bZ_);
             var acc$0=acc$1;
             continue}
           var acc$2=_HN_[1];
           output_acc(o,_HO_);
           output_string(o,_b0_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function bufput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           bufput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _HL_=acc$0[2],_HM_=acc$0[1];
           if(0 === _HL_[0])
            {var acc$1=_HL_[1];
             bufput_acc(b,_HM_);
             add_string(b,_b1_);
             var acc$0=acc$1;
             continue}
           var acc$2=_HL_[1];
           bufput_acc(b,_HM_);
           add_string(b,_b2_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           bufput_acc(b,p$2);
           return caml_call1(f,b);
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           bufput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           bufput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];bufput_acc(b,p$1);return add_char(b,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _HJ_=acc$0[2],_HK_=acc$0[1];
           if(0 === _HJ_[0])
            {var acc$1=_HJ_[1];
             strput_acc(b,_HK_);
             add_string(b,_b3_);
             var acc$0=acc$1;
             continue}
           var acc$2=_HJ_[1];
           strput_acc(b,_HK_);
           add_string(b,_b4_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];strput_acc(b,p$1);return add_char(b,c)}}
    function failwith_message(param)
     {var fmt=param[1],buf=create$0(256);
      function k$0(acc){strput_acc(buf,acc);return k(contents(buf))}
      return make_printf(k$0,0,fmt)}
    function open_box_of_string(str)
     {if(caml_string_equal(str,_b5_))return _b6_;
      var len=caml_ml_string_length(str);
      function invalid_box(param)
       {return caml_call1(failwith_message(_b7_),str)}
      function parse_spaces(i)
       {var i$0=i;
        for(;;)
         {if(i$0 === len)return i$0;
          var match=caml_string_get(str,i$0);
          if(9 !== match && 32 !== match)return i$0;
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function parse_lword(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0);
          if(25 < match - 97 >>> 0)return j$0;
          var j$1=j$0 + 1 | 0,j$0=j$1;
          continue}}
      function parse_int(i,j)
       {var j$0=j;
        for(;;)
         {if(j$0 === len)return j$0;
          var match=caml_string_get(str,j$0),switch$0=0;
          if(48 <= match)
           {if(! (58 <= match))switch$0 = 1}
          else
           if(45 === match)switch$0 = 1;
          if(switch$0){var j$1=j$0 + 1 | 0,j$0=j$1;continue}
          return j$0}}
      var
       wstart=parse_spaces(0),
       wend=parse_lword(wstart,wstart),
       box_name=sub$0(str,wstart,wend - wstart | 0),
       nstart=parse_spaces(wend),
       nend=parse_int(nstart,nstart);
      if(nstart === nend)
       var indent=0;
      else
       try
        {var
          _HH_=caml_int_of_string(sub$0(str,nstart,nend - nstart | 0)),
          indent=_HH_}
       catch(_HI_)
        {_HI_ = caml_wrap_exception(_HI_);
         if(_HI_[1] !== Failure)throw _HI_;
         var indent=invalid_box(0)}
      var exp_end=parse_spaces(nend);
      if(exp_end !== len)invalid_box(0);
      var switch$0=0;
      if
       (caml_string_notequal(box_name,_b8_)
        &&
        caml_string_notequal(box_name,_b9_))
       var
        box_type=
         caml_string_notequal(box_name,_b__)
          ?caml_string_notequal(box_name,_b$_)
            ?caml_string_notequal(box_name,_ca_)
              ?caml_string_notequal(box_name,_cb_)?invalid_box(0):1
              :2
            :3
          :0;
      else
       switch$0 = 1;
      if(switch$0)var box_type=4;
      return [0,indent,box_type]}
    function make_padding_fmt_ebb(pad,fmt)
     {if(typeof pad === "number")
       return [0,0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],fmt]}}
    function make_padprec_fmt_ebb(pad,prec,fmt)
     {if(typeof prec === "number")
       var match=prec?[0,1,fmt]:[0,0,fmt];
      else
       var p=prec[1],match=[0,[0,p],fmt];
      var prec$0=match[1];
      if(typeof pad === "number")
       return [0,0,prec$0,fmt];
      else
       {if(0 === pad[0]){var w=pad[2],s=pad[1];return [0,[0,s,w],prec$0,fmt]}
        var s$0=pad[1];
        return [0,[1,s$0],prec$0,fmt]}}
    function fmt_ebb_of_string(legacy_behavior,str)
     {if(legacy_behavior)
       var flag=legacy_behavior[1],legacy_behavior$0=flag;
      else
       var legacy_behavior$0=1;
      function invalid_format_message(str_ind,msg)
       {return caml_call3(failwith_message(_cc_),str,str_ind,msg)}
      function unexpected_end_of_format(end_ind)
       {return invalid_format_message(end_ind,_cd_)}
      function invalid_format_without(str_ind,c,s)
       {return caml_call4(failwith_message(_cf_),str,str_ind,c,s)}
      function expected_character(str_ind,expected,read)
       {return caml_call4(failwith_message(_cg_),str,str_ind,expected,read)}
      function add_literal(lit_start,str_ind,fmt)
       {var size=str_ind - lit_start | 0;
        return 0 === size
                ?[0,fmt]
                :1 === size
                  ?[0,[12,caml_string_get(str,lit_start),fmt]]
                  :[0,[11,sub$0(str,lit_start,size),fmt]]}
      function parse_positive(str_ind,end_ind,acc)
       {var str_ind$0=str_ind,acc$0=acc;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var c=caml_string_get(str,str_ind$0);
          if(9 < c - 48 >>> 0)return [0,str_ind$0,acc$0];
          var acc$1=(acc$0 * 10 | 0) + (c - 48 | 0) | 0;
          if(max_length$0 < acc$1)
           return caml_call3(failwith_message(_cP_),str,acc$1,max_length$0);
          var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,acc$0=acc$1;
          continue}}
      function parse_integer(str_ind,end_ind)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var match=caml_string_get(str,str_ind);
        if(48 <= match)
         {if(! (58 <= match))return parse_positive(str_ind,end_ind,0)}
        else
         if(45 === match)
          {if((str_ind + 1 | 0) === end_ind)unexpected_end_of_format(end_ind);
           var c=caml_string_get(str,str_ind + 1 | 0);
           if(9 < c - 48 >>> 0)
            return expected_character(str_ind + 1 | 0,_cR_,c);
           var
            match$0=parse_positive(str_ind + 1 | 0,end_ind,0),
            n=match$0[2],
            next_ind=match$0[1];
           return [0,next_ind,- n | 0]}
        throw [0,Assert_failure,_cQ_]}
      function parse_spaces(str_ind,end_ind)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          if(32 === caml_string_get(str,str_ind$0))
           {var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;continue}
          return str_ind$0}}
      function incompatible_flag(pct_ind,str_ind,symb,option)
       {var subfmt=sub$0(str,pct_ind,str_ind - pct_ind | 0);
        return caml_call5
                (failwith_message(_c3_),str,pct_ind,option,symb,subfmt)}
      function compute_int_conv(pct_ind,str_ind,plus,hash,space,symb)
       {var plus$0=plus,hash$0=hash,space$0=space;
        for(;;)
         {var switch$0=0;
          if(plus$0)
           {if(hash$0)
             switch$0 = 1;
            else
             if(! space$0){if(100 === symb)return 1;if(105 === symb)return 4}}
          else
           if(hash$0)
            if(space$0)
             switch$0 = 1;
            else
             {var switcher$0=symb - 88 | 0;
              if(32 < switcher$0 >>> 0)
               switch$0 = 1;
              else
               switch(switcher$0)
                {case 0:return 9;
                 case 12:return 13;
                 case 17:return 14;
                 case 23:return 11;
                 case 29:return 15;
                 case 32:return 7;
                 default:switch$0 = 1}}
           else
            if(space$0)
             {if(100 === symb)return 2;if(105 === symb)return 5}
            else
             {var switcher$1=symb - 88 | 0;
              if(! (32 < switcher$1 >>> 0))
               switch(switcher$1)
                {case 0:return 8;
                 case 12:return 0;
                 case 17:return 3;
                 case 23:return 10;
                 case 29:return 12;
                 case 32:return 6
                 }}
          if(switch$0)
           {var switcher=symb - 88 | 0;
            if(! (32 < switcher >>> 0))
             switch(switcher)
              {case 0:if(legacy_behavior$0)return 9;break;
               case 23:if(legacy_behavior$0)return 11;break;
               case 32:if(legacy_behavior$0)return 7;break;
               case 12:
               case 17:
               case 29:
                if(legacy_behavior$0){var hash$0=0;continue}
                return incompatible_flag(pct_ind,str_ind,symb,_c0_)
               }}
          if(plus$0)
           {if(space$0)
             {if(legacy_behavior$0){var space$0=0;continue}
              return incompatible_flag(pct_ind,str_ind,32,_cW_)}
            if(legacy_behavior$0){var plus$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,_cX_)}
          if(space$0)
           {if(legacy_behavior$0){var space$0=0;continue}
            return incompatible_flag(pct_ind,str_ind,symb,_cY_)}
          throw [0,Assert_failure,_cZ_]}}
      function search_subformat_end(str_ind,end_ind,c)
       {var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)
           caml_call3(failwith_message(_cS_),str,c,end_ind);
          var match=caml_string_get(str,str_ind$0);
          if(37 === match)
           {if((str_ind$0 + 1 | 0) === end_ind)
             unexpected_end_of_format(end_ind);
            if(caml_string_get(str,str_ind$0 + 1 | 0) === c)return str_ind$0;
            var match$0=caml_string_get(str,str_ind$0 + 1 | 0);
            if(95 <= match$0)
             {if(123 <= match$0)
               {if(! (126 <= match$0))
                 switch(match$0 - 123 | 0)
                  {case 0:
                    var
                     sub_end=search_subformat_end(str_ind$0 + 2 | 0,end_ind,125),
                     str_ind$2=sub_end + 2 | 0,
                     str_ind$0=str_ind$2;
                    continue;
                   case 1:break;
                   default:
                    return expected_character(str_ind$0 + 1 | 0,_cT_,125)}}
              else
               if(! (96 <= match$0))
                {if((str_ind$0 + 2 | 0) === end_ind)
                  unexpected_end_of_format(end_ind);
                 var match$1=caml_string_get(str,str_ind$0 + 2 | 0);
                 if(40 === match$1)
                  {var
                    sub_end$0=search_subformat_end(str_ind$0 + 3 | 0,end_ind,41),
                    str_ind$3=sub_end$0 + 2 | 0,
                    str_ind$0=str_ind$3;
                   continue}
                 if(123 === match$1)
                  {var
                    sub_end$1=
                     search_subformat_end(str_ind$0 + 3 | 0,end_ind,125),
                    str_ind$4=sub_end$1 + 2 | 0,
                    str_ind$0=str_ind$4;
                   continue}
                 var str_ind$5=str_ind$0 + 3 | 0,str_ind$0=str_ind$5;
                 continue}}
            else
             {if(40 === match$0)
               {var
                 sub_end$2=search_subformat_end(str_ind$0 + 2 | 0,end_ind,41),
                 str_ind$6=sub_end$2 + 2 | 0,
                 str_ind$0=str_ind$6;
                continue}
              if(41 === match$0)
               return expected_character(str_ind$0 + 1 | 0,_cU_,41)}
            var str_ind$1=str_ind$0 + 2 | 0,str_ind$0=str_ind$1;
            continue}
          var str_ind$7=str_ind$0 + 1 | 0,str_ind$0=str_ind$7;
          continue}}
      function parse_magic_size(str_ind,end_ind)
       {try
         {var
           str_ind_1=parse_spaces(str_ind,end_ind),
           match$2=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$2)
           {if(! (58 <= match$2))switch$0 = 1}
          else
           if(45 === match$2)switch$0 = 1;
          if(switch$0)
           {var
             match$3=parse_integer(str_ind_1,end_ind),
             size=match$3[2],
             str_ind_2=match$3[1],
             str_ind_3=parse_spaces(str_ind_2,end_ind);
            if(62 !== caml_string_get(str,str_ind_3))throw Not_found;
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _HF_=[0,[0,str_ind_3 + 1 | 0,[1,s,size]]]}
          else
           var _HF_=0;
          var _HE_=_HF_}
        catch(_HG_)
         {_HG_ = caml_wrap_exception(_HG_);
          if(_HG_ !== Not_found && _HG_[1] !== Failure)throw _HG_;
          var _HE_=0}
        if(_HE_)
         {var
           match=_HE_[1],
           formatting_lit=match[2],
           next_ind=match[1],
           match$0=parse(next_ind,end_ind),
           fmt_rest=match$0[1];
          return [0,[17,formatting_lit,fmt_rest]]}
        var match$1=parse(str_ind,end_ind),fmt_rest$0=match$1[1];
        return [0,[17,_cN_,fmt_rest$0]]}
      function parse_good_break(str_ind,end_ind)
       {try
         {var
           _Hx_=str_ind === end_ind?1:0,
           _Hy_=_Hx_ || (60 !== caml_string_get(str,str_ind)?1:0);
          if(_Hy_)throw Not_found;
          var
           str_ind_1=parse_spaces(str_ind + 1 | 0,end_ind),
           match$0=caml_string_get(str,str_ind_1),
           switch$0=0;
          if(48 <= match$0)
           {if(! (58 <= match$0))switch$0 = 1}
          else
           if(45 === match$0)switch$0 = 1;
          if(! switch$0)throw Not_found;
          var
           match$1=parse_integer(str_ind_1,end_ind),
           width=match$1[2],
           str_ind_2=match$1[1],
           str_ind_3=parse_spaces(str_ind_2,end_ind),
           match$2=caml_string_get(str,str_ind_3),
           switcher=match$2 - 45 | 0,
           switch$1=0;
          if(12 < switcher >>> 0)
           if(17 === switcher)
            var
             s=sub$0(str,str_ind - 2 | 0,(str_ind_3 - str_ind | 0) + 3 | 0),
             _Hz_=[0,s,width,0],
             _HA_=str_ind_3 + 1 | 0,
             formatting_lit$0=_Hz_,
             next_ind=_HA_;
           else
            switch$1 = 1;
          else
           if(1 < switcher - 1 >>> 0)
            {var
              match$3=parse_integer(str_ind_3,end_ind),
              offset=match$3[2],
              str_ind_4=match$3[1],
              str_ind_5=parse_spaces(str_ind_4,end_ind);
             if(62 !== caml_string_get(str,str_ind_5))throw Not_found;
             var
              s$0=sub$0(str,str_ind - 2 | 0,(str_ind_5 - str_ind | 0) + 3 | 0),
              _HB_=[0,s$0,width,offset],
              _HC_=str_ind_5 + 1 | 0,
              formatting_lit$0=_HB_,
              next_ind=_HC_}
           else
            switch$1 = 1;
          if(switch$1)throw Not_found}
        catch(_HD_)
         {_HD_ = caml_wrap_exception(_HD_);
          if(_HD_ !== Not_found && _HD_[1] !== Failure)throw _HD_;
          var formatting_lit$0=formatting_lit,next_ind=str_ind}
        var match=parse(next_ind,end_ind),fmt_rest=match[1];
        return [0,[17,formatting_lit$0,fmt_rest]]}
      function parse_tag(is_open_tag,str_ind,end_ind)
       {try
         {if(str_ind === end_ind)throw Not_found;
          var match$0=caml_string_get(str,str_ind);
          if(60 === match$0)
           {var ind=index_from(str,str_ind + 1 | 0,62);
            if(end_ind <= ind)throw Not_found;
            var
             sub_str=sub$0(str,str_ind,(ind - str_ind | 0) + 1 | 0),
             match$1=parse(ind + 1 | 0,end_ind),
             fmt_rest$0=match$1[1],
             match$2=parse(str_ind,ind + 1 | 0),
             sub_fmt=match$2[1],
             sub_format$0=[0,sub_fmt,sub_str],
             formatting$0=is_open_tag?[0,sub_format$0]:[1,sub_format$0],
             _Hv_=[0,[18,formatting$0,fmt_rest$0]];
            return _Hv_}
          throw Not_found}
        catch(_Hw_)
         {_Hw_ = caml_wrap_exception(_Hw_);
          if(_Hw_ === Not_found)
           {var
             match=parse(str_ind,end_ind),
             fmt_rest=match[1],
             formatting=is_open_tag?[0,sub_format]:[1,sub_format];
            return [0,[18,formatting,fmt_rest]]}
          throw _Hw_}}
      function parse_flags(pct_ind,str_ind,end_ind,ign)
       {var zero=[0,0],minus=[0,0],plus=[0,0],space=[0,0],hash=[0,0];
        function set_flag(str_ind,flag)
         {var _Hs_=flag[1],_Ht_=_Hs_?1 - legacy_behavior$0:_Hs_;
          if(_Ht_)
           {var _Hu_=caml_string_get(str,str_ind);
            caml_call3(failwith_message(_ch_),str,str_ind,_Hu_)}
          flag[1] = 1;
          return 0}
        var str_ind$0=str_ind;
        for(;;)
         {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var match=caml_string_get(str,str_ind$0),switcher=match - 32 | 0;
          if(! (16 < switcher >>> 0))
           switch(switcher)
            {case 0:
              set_flag(str_ind$0,space);
              var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
              continue;
             case 3:
              set_flag(str_ind$0,hash);
              var str_ind$2=str_ind$0 + 1 | 0,str_ind$0=str_ind$2;
              continue;
             case 11:
              set_flag(str_ind$0,plus);
              var str_ind$3=str_ind$0 + 1 | 0,str_ind$0=str_ind$3;
              continue;
             case 13:
              set_flag(str_ind$0,minus);
              var str_ind$4=str_ind$0 + 1 | 0,str_ind$0=str_ind$4;
              continue;
             case 16:
              set_flag(str_ind$0,zero);
              var str_ind$5=str_ind$0 + 1 | 0,str_ind$0=str_ind$5;
              continue
             }
          var
           _Hn_=space[1],
           _Ho_=hash[1],
           _Hp_=plus[1],
           _Hq_=minus[1],
           _Hr_=zero[1];
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           padty=
            _Hr_
             ?_Hq_
               ?legacy_behavior$0
                 ?0
                 :incompatible_flag(pct_ind,str_ind$0,45,_ck_)
               :2
             :_Hq_?0:1,
           match$0=caml_string_get(str,str_ind$0);
          if(48 <= match$0)
           {if(! (58 <= match$0))
             {var
               match$1=parse_positive(str_ind$0,end_ind,0),
               width=match$1[2],
               new_ind=match$1[1];
              return parse_after_padding
                      (pct_ind,
                       new_ind,
                       end_ind,
                       _Hq_,
                       _Hp_,
                       _Ho_,
                       _Hn_,
                       ign,
                       [0,padty,width])}}
          else
           if(42 === match$0)
            return parse_after_padding
                    (pct_ind,
                     str_ind$0 + 1 | 0,
                     end_ind,
                     _Hq_,
                     _Hp_,
                     _Ho_,
                     _Hn_,
                     ign,
                     [1,padty]);
          switch(padty)
           {case 0:
             if(1 - legacy_behavior$0)
              invalid_format_without(str_ind$0 - 1 | 0,45,_ci_);
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_Hq_,_Hp_,_Ho_,_Hn_,ign,0);
            case 1:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_Hq_,_Hp_,_Ho_,_Hn_,ign,0);
            default:
             return parse_after_padding
                     (pct_ind,str_ind$0,end_ind,_Hq_,_Hp_,_Ho_,_Hn_,ign,_cj_)}}}
      function parse_after_padding
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        var symb=caml_string_get(str,str_ind);
        if(46 === symb)
         {var str_ind$0=str_ind + 1 | 0;
          if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
          var
           parse_literal=
            function(minus,str_ind)
             {var
               match=parse_positive(str_ind,end_ind,0),
               prec=match[2],
               new_ind=match[1];
              return parse_after_precision
                      (pct_ind,
                       new_ind,
                       end_ind,
                       minus,
                       plus,
                       hash,
                       space,
                       ign,
                       pad,
                       [0,prec])},
           symb$0=caml_string_get(str,str_ind$0);
          if(48 <= symb$0)
           {if(! (58 <= symb$0))return parse_literal(minus,str_ind$0)}
          else
           if(42 <= symb$0)
            switch(symb$0 - 42 | 0)
             {case 0:
               return parse_after_precision
                       (pct_ind,
                        str_ind$0 + 1 | 0,
                        end_ind,
                        minus,
                        plus,
                        hash,
                        space,
                        ign,
                        pad,
                        1);
              case 1:
              case 3:
               if(legacy_behavior$0)
                {var
                  _Hm_=str_ind$0 + 1 | 0,
                  minus$0=minus || (45 === symb$0?1:0);
                 return parse_literal(minus$0,_Hm_)}
               break
              }
          return legacy_behavior$0
                  ?parse_after_precision
                    (pct_ind,
                     str_ind$0,
                     end_ind,
                     minus,
                     plus,
                     hash,
                     space,
                     ign,
                     pad,
                     _cl_)
                  :invalid_format_without(str_ind$0 - 1 | 0,46,_cm_)}
        return parse_conversion
                (pct_ind,
                 str_ind + 1 | 0,
                 end_ind,
                 plus,
                 hash,
                 space,
                 ign,
                 pad,
                 0,
                 pad,
                 symb)}
      function parse_after_precision
       (pct_ind,str_ind,end_ind,minus,plus,hash,space,ign,pad,match)
       {if(str_ind === end_ind)unexpected_end_of_format(end_ind);
        function parse_conv(padprec)
         {return parse_conversion
                  (pct_ind,
                   str_ind + 1 | 0,
                   end_ind,
                   plus,
                   hash,
                   space,
                   ign,
                   pad,
                   match,
                   padprec,
                   caml_string_get(str,str_ind))}
        if(typeof pad === "number")
         {if(typeof match === "number" && ! match)return parse_conv(0);
          if(minus)
           {if(typeof match === "number")return parse_conv(_cn_);
            var n=match[1];
            return parse_conv([0,0,n])}
          if(typeof match === "number")return parse_conv(_co_);
          var n$0=match[1];
          return parse_conv([0,1,n$0])}
        return parse_conv(pad)}
      function parse_conversion
       (pct_ind,str_ind,end_ind,plus,hash,space,ign,pad,prec,padprec,symb)
       {var
         plus_used=[0,0],
         hash_used=[0,0],
         space_used=[0,0],
         ign_used=[0,0],
         pad_used=[0,0],
         prec_used=[0,0];
        function get_plus(param){plus_used[1] = 1;return plus}
        function get_hash(param){hash_used[1] = 1;return hash}
        function get_space(param){space_used[1] = 1;return space}
        function get_ign(param){ign_used[1] = 1;return ign}
        function get_pad(param){pad_used[1] = 1;return pad}
        function get_prec(param){prec_used[1] = 1;return prec}
        function get_padprec(param){pad_used[1] = 1;return padprec}
        function get_int_pad(param)
         {var pad=get_pad(0),match=get_prec(0);
          if(typeof match === "number" && ! match)return pad;
          if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var n=pad[2];
                return legacy_behavior$0
                        ?[0,1,n]
                        :incompatible_flag(pct_ind,str_ind,48,_cp_)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_cq_
                      :incompatible_flag(pct_ind,str_ind,48,_cr_)
                    :pad}}
        function check_no_0(symb,pad)
         {if(typeof pad === "number")
           return pad;
          else
           {if(0 === pad[0])
             {if(2 <= pad[1])
               {var width=pad[2];
                return legacy_behavior$0
                        ?[0,1,width]
                        :incompatible_flag(pct_ind,str_ind,symb,_cs_)}
              return pad}
            return 2 <= pad[1]
                    ?legacy_behavior$0
                      ?_ct_
                      :incompatible_flag(pct_ind,str_ind,symb,_cu_)
                    :pad}}
        function opt_of_pad(c,pad)
         {if(typeof pad === "number")
           return 0;
          else
           {if(0 === pad[0])
             switch(pad[1])
              {case 0:
                var width=pad[2];
                return legacy_behavior$0
                        ?[0,width]
                        :incompatible_flag(pct_ind,str_ind,c,_cv_);
               case 1:var width$0=pad[2];return [0,width$0];
               default:
                var width$1=pad[2];
                return legacy_behavior$0
                        ?[0,width$1]
                        :incompatible_flag(pct_ind,str_ind,c,_cw_)}
            return incompatible_flag(pct_ind,str_ind,c,_cx_)}}
        function get_pad_opt(c){return opt_of_pad(c,get_pad(0))}
        function get_padprec_opt(c){return opt_of_pad(c,get_padprec(0))}
        var switch$0=0;
        if(124 <= symb)
         switch$0 = 1;
        else
         switch(symb)
          {case 33:
            var
             match$6=parse(str_ind,end_ind),
             fmt_rest$5=match$6[1],
             fmt_result=[0,[10,fmt_rest$5]];
            break;
           case 40:
            var
             sub_end=search_subformat_end(str_ind,end_ind,41),
             match$8=parse(sub_end + 2 | 0,end_ind),
             fmt_rest$7=match$8[1],
             match$9=parse(str_ind,sub_end),
             sub_fmt=match$9[1],
             sub_fmtty=fmtty_of_fmt(sub_fmt);
            if(get_ign(0))
             var
              ignored$2=[9,get_pad_opt(95),sub_fmtty],
              _GV_=[0,[23,ignored$2,fmt_rest$7]];
            else
             var _GV_=[0,[14,get_pad_opt(40),sub_fmtty,fmt_rest$7]];
            var fmt_result=_GV_;
            break;
           case 44:var fmt_result=parse(str_ind,end_ind);break;
           case 67:
            var
             match$12=parse(str_ind,end_ind),
             fmt_rest$10=match$12[1],
             _GX_=get_ign(0)?[0,[23,1,fmt_rest$10]]:[0,[1,fmt_rest$10]],
             fmt_result=_GX_;
            break;
           case 78:
            var
             match$16=parse(str_ind,end_ind),
             fmt_rest$14=match$16[1],
             counter$0=2;
            if(get_ign(0))
             var ignored$6=[11,counter$0],_G3_=[0,[23,ignored$6,fmt_rest$14]];
            else
             var _G3_=[0,[21,counter$0,fmt_rest$14]];
            var fmt_result=_G3_;
            break;
           case 83:
            var
             pad$6=check_no_0(symb,get_padprec(0)),
             match$17=parse(str_ind,end_ind),
             fmt_rest$15=match$17[1];
            if(get_ign(0))
             var
              ignored$7=[1,get_padprec_opt(95)],
              _G4_=[0,[23,ignored$7,fmt_rest$15]];
            else
             var
              match$18=make_padding_fmt_ebb(pad$6,fmt_rest$15),
              fmt_rest$16=match$18[2],
              pad$7=match$18[1],
              _G4_=[0,[3,pad$7,fmt_rest$16]];
            var fmt_result=_G4_;
            break;
           case 91:
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var
             char_set$1=create_char_set(0),
             add_char=function(c){return add_in_char_set(char_set$1,c)},
             add_range=
              function(c$0,c)
               {if(! (c < c$0))
                 {var i=c$0;
                  for(;;)
                   {add_in_char_set(char_set$1,char_of_int(i));
                    var _Hl_=i + 1 | 0;
                    if(c !== i){var i=_Hl_;continue}
                    break}}
                return 0},
             fail_single_percent=
              function(str_ind)
               {return caml_call2(failwith_message(_cO_),str,str_ind)},
             parse_char_set_content=
              function(counter,str_ind,end_ind)
               {var str_ind$0=str_ind;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c=caml_string_get(str,str_ind$0);
                  if(45 === c)
                   {add_char(45);
                    var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1;
                    continue}
                  if(93 === c)return str_ind$0 + 1 | 0;
                  var _Hk_=str_ind$0 + 1 | 0;
                  if(counter < 50)
                   {var counter$0=counter + 1 | 0;
                    return parse_char_set_after_char$0(counter$0,_Hk_,end_ind,c)}
                  return caml_trampoline_return
                          (parse_char_set_after_char$0,[0,_Hk_,end_ind,c])}},
             parse_char_set_after_char$0=
              function(counter,str_ind,end_ind,c)
               {var str_ind$0=str_ind,c$0=c;
                for(;;)
                 {if(str_ind$0 === end_ind)unexpected_end_of_format(end_ind);
                  var c$1=caml_string_get(str,str_ind$0),switch$0=0;
                  if(46 <= c$1)
                   {if(64 === c$1)
                     switch$0 = 1;
                    else
                     if(93 === c$1){add_char(c$0);return str_ind$0 + 1 | 0}}
                  else
                   if(37 === c$1)
                    switch$0 = 1;
                   else
                    if(45 <= c$1)
                     {var str_ind$2=str_ind$0 + 1 | 0;
                      if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
                      var c$2=caml_string_get(str,str_ind$2);
                      if(37 === c$2)
                       {if((str_ind$2 + 1 | 0) === end_ind)
                         unexpected_end_of_format(end_ind);
                        var c$3=caml_string_get(str,str_ind$2 + 1 | 0);
                        if(37 !== c$3 && 64 !== c$3)
                         return fail_single_percent(str_ind$2);
                        add_range(c$0,c$3);
                        var _Hi_=str_ind$2 + 2 | 0;
                        if(counter < 50)
                         {var counter$2=counter + 1 | 0;
                          return parse_char_set_content(counter$2,_Hi_,end_ind)}
                        return caml_trampoline_return
                                (parse_char_set_content,[0,_Hi_,end_ind])}
                      if(93 === c$2)
                       {add_char(c$0);add_char(45);return str_ind$2 + 1 | 0}
                      add_range(c$0,c$2);
                      var _Hj_=str_ind$2 + 1 | 0;
                      if(counter < 50)
                       {var counter$1=counter + 1 | 0;
                        return parse_char_set_content(counter$1,_Hj_,end_ind)}
                      return caml_trampoline_return
                              (parse_char_set_content,[0,_Hj_,end_ind])}
                  if(switch$0 && 37 === c$0)
                   {add_char(c$1);
                    var _Hh_=str_ind$0 + 1 | 0;
                    if(counter < 50)
                     {var counter$0=counter + 1 | 0;
                      return parse_char_set_content(counter$0,_Hh_,end_ind)}
                    return caml_trampoline_return
                            (parse_char_set_content,[0,_Hh_,end_ind])}
                  if(37 === c$0)fail_single_percent(str_ind$0);
                  add_char(c$0);
                  var str_ind$1=str_ind$0 + 1 | 0,str_ind$0=str_ind$1,c$0=c$1;
                  continue}},
             parse_char_set_after_char=
              function(str_ind,end_ind,c)
               {return caml_trampoline
                        (parse_char_set_after_char$0(0,str_ind,end_ind,c))};
            if(str_ind === end_ind)unexpected_end_of_format(end_ind);
            var match$31=caml_string_get(str,str_ind);
            if(94 === match$31)
             var str_ind$0=str_ind + 1 | 0,reverse=1,str_ind$1=str_ind$0;
            else
             var reverse=0,str_ind$1=str_ind;
            if(str_ind$1 === end_ind)unexpected_end_of_format(end_ind);
            var
             c=caml_string_get(str,str_ind$1),
             next_ind=parse_char_set_after_char(str_ind$1 + 1 | 0,end_ind,c),
             char_set=to_string$0(char_set$1);
            if(reverse)
             {var char_set$0=create_char_set(0),i=0;
              for(;;)
               {caml_bytes_set
                 (char_set$0,i,char_of_int(caml_string_get(char_set,i) ^ 255));
                var _Gv_=i + 1 | 0;
                if(31 !== i){var i=_Gv_;continue}
                var char_set$2=caml_string_of_bytes(char_set$0);
                break}}
            else
             var char_set$2=char_set;
            var match$21=parse(next_ind,end_ind),fmt_rest$19=match$21[1];
            if(get_ign(0))
             var
              ignored$9=[10,get_pad_opt(95),char_set$2],
              _G9_=[0,[23,ignored$9,fmt_rest$19]];
            else
             var _G9_=[0,[20,get_pad_opt(91),char_set$2,fmt_rest$19]];
            var fmt_result=_G9_;
            break;
           case 97:
            var
             match$22=parse(str_ind,end_ind),
             fmt_rest$20=match$22[1],
             fmt_result=[0,[15,fmt_rest$20]];
            break;
           case 99:
            var
             char_format=
              function(fmt_rest)
               {return get_ign(0)?[0,[23,0,fmt_rest]]:[0,[0,fmt_rest]]},
             match$23=parse(str_ind,end_ind),
             fmt_rest$21=match$23[1],
             match$24=get_pad_opt(99);
            if(match$24)
             {if(0 === match$24[1])
               var
                _G__=get_ign(0)?[0,[23,3,fmt_rest$21]]:[0,[22,fmt_rest$21]],
                _G$_=_G__;
              else
               var
                _G$_=
                 legacy_behavior$0
                  ?char_format(fmt_rest$21)
                  :invalid_format_message(str_ind,_ce_);
              var _Ha_=_G$_}
            else
             var _Ha_=char_format(fmt_rest$21);
            var fmt_result=_Ha_;
            break;
           case 114:
            var
             match$25=parse(str_ind,end_ind),
             fmt_rest$22=match$25[1],
             _Hb_=get_ign(0)?[0,[23,2,fmt_rest$22]]:[0,[19,fmt_rest$22]],
             fmt_result=_Hb_;
            break;
           case 115:
            var
             pad$9=check_no_0(symb,get_padprec(0)),
             match$26=parse(str_ind,end_ind),
             fmt_rest$23=match$26[1];
            if(get_ign(0))
             var
              ignored$10=[0,get_padprec_opt(95)],
              _Hc_=[0,[23,ignored$10,fmt_rest$23]];
            else
             var
              match$27=make_padding_fmt_ebb(pad$9,fmt_rest$23),
              fmt_rest$24=match$27[2],
              pad$10=match$27[1],
              _Hc_=[0,[2,pad$10,fmt_rest$24]];
            var fmt_result=_Hc_;
            break;
           case 116:
            var
             match$28=parse(str_ind,end_ind),
             fmt_rest$25=match$28[1],
             fmt_result=[0,[16,fmt_rest$25]];
            break;
           case 123:
            var
             sub_end$0=search_subformat_end(str_ind,end_ind,125),
             match$29=parse(str_ind,sub_end$0),
             sub_fmt$0=match$29[1],
             match$30=parse(sub_end$0 + 2 | 0,end_ind),
             fmt_rest$26=match$30[1],
             sub_fmtty$0=fmtty_of_fmt(sub_fmt$0);
            if(get_ign(0))
             var
              ignored$11=[8,get_pad_opt(95),sub_fmtty$0],
              _Hd_=[0,[23,ignored$11,fmt_rest$26]];
            else
             var _Hd_=[0,[13,get_pad_opt(123),sub_fmtty$0,fmt_rest$26]];
            var fmt_result=_Hd_;
            break;
           case 66:
           case 98:
            var
             pad$3=check_no_0(symb,get_padprec(0)),
             match$10=parse(str_ind,end_ind),
             fmt_rest$8=match$10[1];
            if(get_ign(0))
             var
              ignored$3=[7,get_padprec_opt(95)],
              _GW_=[0,[23,ignored$3,fmt_rest$8]];
            else
             var
              match$11=make_padding_fmt_ebb(pad$3,fmt_rest$8),
              fmt_rest$9=match$11[2],
              pad$4=match$11[1],
              _GW_=[0,[9,pad$4,fmt_rest$9]];
            var fmt_result=_GW_;
            break;
           case 37:
           case 64:
            var
             match$7=parse(str_ind,end_ind),
             fmt_rest$6=match$7[1],
             fmt_result=[0,[12,symb,fmt_rest$6]];
            break;
           case 76:
           case 108:
           case 110:
            var switch$1=0;
            if(str_ind !== end_ind)
             {var
               symb$0=caml_string_get(str,str_ind),
               _He_=symb$0 - 88 | 0,
               switch$2=0;
              if(! (32 < _He_ >>> 0))
               switch(_He_)
                {case 0:
                 case 12:
                 case 17:
                 case 23:
                 case 29:
                 case 32:var _G2_=1;switch$2 = 1;break
                 }
              if(! switch$2)var _G2_=0;
              if(_G2_){switch$0 = 1;switch$1 = 1}}
            if(! switch$1)
             {var
               match$15=parse(str_ind,end_ind),
               fmt_rest$13=match$15[1],
               switch$3=0;
              if(108 <= symb)
               {if(! (111 <= symb))
                 switch(symb - 108 | 0)
                  {case 0:var counter=0;switch$3 = 1;break;
                   case 1:break;
                   default:var counter=1;switch$3 = 1}}
              else
               if(76 === symb){var counter=2;switch$3 = 1}
              if(! switch$3)throw [0,Assert_failure,_cV_];
              if(get_ign(0))
               var ignored$5=[11,counter],_G1_=[0,[23,ignored$5,fmt_rest$13]];
              else
               var _G1_=[0,[21,counter,fmt_rest$13]];
              var fmt_result=_G1_}
            break;
           case 32:
           case 35:
           case 43:
           case 45:
           case 95:
            var
             fmt_result=
              caml_call3(failwith_message(_cJ_),str,pct_ind,symb);
            break;
           case 88:
           case 100:
           case 105:
           case 111:
           case 117:
           case 120:
            var
             _G5_=get_space(0),
             _G6_=get_hash(0),
             iconv$2=
              compute_int_conv(pct_ind,str_ind,get_plus(0),_G6_,_G5_,symb),
             match$19=parse(str_ind,end_ind),
             fmt_rest$17=match$19[1];
            if(get_ign(0))
             var
              ignored$8=[2,iconv$2,get_pad_opt(95)],
              _G7_=[0,[23,ignored$8,fmt_rest$17]];
            else
             var
              _G8_=get_prec(0),
              match$20=make_padprec_fmt_ebb(get_int_pad(0),_G8_,fmt_rest$17),
              fmt_rest$18=match$20[3],
              prec$4=match$20[2],
              pad$8=match$20[1],
              _G7_=[0,[4,iconv$2,pad$8,prec$4,fmt_rest$18]];
            var fmt_result=_G7_;
            break;
           case 69:
           case 70:
           case 71:
           case 72:
           case 101:
           case 102:
           case 103:
           case 104:
            var
             space$1=get_space(0),
             hash$1=get_hash(0),
             plus$2=get_plus(0),
             flag=
              plus$2
               ?space$1
                 ?legacy_behavior$0
                   ?1
                   :incompatible_flag(pct_ind,str_ind,32,_c2_)
                 :1
               :space$1?2:0,
             switch$4=0;
            if(73 <= symb)
             {var switcher=symb - 101 | 0;
              if(3 < switcher >>> 0)
               switch$4 = 1;
              else
               {switch(switcher)
                 {case 0:var _Hf_=1;break;
                  case 1:var _Hf_=0;break;
                  case 2:var _Hf_=3;break;
                  default:var _Hf_=6}
                var kind=_Hf_}}
            else
             if(69 <= symb)
              {var switch$5=0;
               switch(symb - 69 | 0)
                {case 0:var _Hg_=2;break;
                 case 1:switch$4 = 1;switch$5 = 1;break;
                 case 2:var _Hg_=4;break;
                 default:var _Hg_=7}
               if(! switch$5)var kind=_Hg_}
             else
              switch$4 = 1;
            if(switch$4)
             {var switch$6=0;
              if(hash$1)
               if(70 === symb)var kind=8;else switch$6 = 1;
              else
               if(70 === symb)var kind=5;else switch$6 = 1;
              if(switch$6)throw [0,Assert_failure,_c1_]}
            var
             fconv=[0,flag,kind],
             match$13=parse(str_ind,end_ind),
             fmt_rest$11=match$13[1];
            if(get_ign(0))
             {var match=get_prec(0);
              if(typeof match === "number")
               var _GY_=match?incompatible_flag(pct_ind,str_ind,95,_cy_):0;
              else
               var ndec=match[1],_GY_=[0,ndec];
              var
               ignored$4=[6,get_pad_opt(95),_GY_],
               _GZ_=[0,[23,ignored$4,fmt_rest$11]]}
            else
             var
              _G0_=get_prec(0),
              match$14=make_padprec_fmt_ebb(get_pad(0),_G0_,fmt_rest$11),
              fmt_rest$12=match$14[3],
              prec$3=match$14[2],
              pad$5=match$14[1],
              _GZ_=[0,[8,fconv,pad$5,prec$3,fmt_rest$12]];
            var fmt_result=_GZ_;
            break;
           default:switch$0 = 1}
        if(switch$0)
         {var switch$7=0;
          if(108 <= symb)
           if(111 <= symb)
            switch$7 = 1;
           else
            {var switch$8=0;
             switch(symb - 108 | 0)
              {case 0:
                var
                 _GF_=caml_string_get(str,str_ind),
                 _GG_=get_space(0),
                 _GH_=get_hash(0),
                 iconv=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_GH_,_GG_,_GF_),
                 match$0=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest=match$0[1];
                if(get_ign(0))
                 var
                  ignored=[3,iconv,get_pad_opt(95)],
                  _GI_=[0,[23,ignored,fmt_rest]];
                else
                 var
                  _GK_=get_prec(0),
                  match$1=make_padprec_fmt_ebb(get_int_pad(0),_GK_,fmt_rest),
                  fmt_rest$0=match$1[3],
                  prec$0=match$1[2],
                  pad$0=match$1[1],
                  _GI_=[0,[5,iconv,pad$0,prec$0,fmt_rest$0]];
                var _GJ_=_GI_;
                break;
               case 1:switch$7 = 1;switch$8 = 1;break;
               default:
                var
                 _GL_=caml_string_get(str,str_ind),
                 _GM_=get_space(0),
                 _GN_=get_hash(0),
                 iconv$0=
                  compute_int_conv
                   (pct_ind,str_ind + 1 | 0,get_plus(0),_GN_,_GM_,_GL_),
                 match$2=parse(str_ind + 1 | 0,end_ind),
                 fmt_rest$1=match$2[1];
                if(get_ign(0))
                 var
                  ignored$0=[4,iconv$0,get_pad_opt(95)],
                  _GO_=[0,[23,ignored$0,fmt_rest$1]];
                else
                 var
                  _GP_=get_prec(0),
                  match$3=make_padprec_fmt_ebb(get_int_pad(0),_GP_,fmt_rest$1),
                  fmt_rest$2=match$3[3],
                  prec$1=match$3[2],
                  pad$1=match$3[1],
                  _GO_=[0,[6,iconv$0,pad$1,prec$1,fmt_rest$2]];
                var _GJ_=_GO_}
             if(! switch$8)var fmt_result=_GJ_}
          else
           if(76 === symb)
            {var
              _GQ_=caml_string_get(str,str_ind),
              _GR_=get_space(0),
              _GS_=get_hash(0),
              iconv$1=
               compute_int_conv
                (pct_ind,str_ind + 1 | 0,get_plus(0),_GS_,_GR_,_GQ_),
              match$4=parse(str_ind + 1 | 0,end_ind),
              fmt_rest$3=match$4[1];
             if(get_ign(0))
              var
               ignored$1=[5,iconv$1,get_pad_opt(95)],
               _GT_=[0,[23,ignored$1,fmt_rest$3]];
             else
              var
               _GU_=get_prec(0),
               match$5=make_padprec_fmt_ebb(get_int_pad(0),_GU_,fmt_rest$3),
               fmt_rest$4=match$5[3],
               prec$2=match$5[2],
               pad$2=match$5[1],
               _GT_=[0,[7,iconv$1,pad$2,prec$2,fmt_rest$4]];
             var fmt_result=_GT_}
           else
            switch$7 = 1;
          if(switch$7)
           var
            fmt_result=
             caml_call3(failwith_message(_cz_),str,str_ind - 1 | 0,symb)}
        if(1 - legacy_behavior$0)
         {var _Gw_=1 - plus_used[1],plus$0=_Gw_?plus:_Gw_;
          if(plus$0)incompatible_flag(pct_ind,str_ind,symb,_cA_);
          var _Gx_=1 - hash_used[1],hash$0=_Gx_?hash:_Gx_;
          if(hash$0)incompatible_flag(pct_ind,str_ind,symb,_cB_);
          var _Gy_=1 - space_used[1],space$0=_Gy_?space:_Gy_;
          if(space$0)incompatible_flag(pct_ind,str_ind,symb,_cC_);
          var _Gz_=1 - pad_used[1],_GA_=_Gz_?caml_notequal([0,pad],_cD_):_Gz_;
          if(_GA_)incompatible_flag(pct_ind,str_ind,symb,_cE_);
          var
           _GB_=1 - prec_used[1],
           _GC_=_GB_?caml_notequal([0,prec],_cF_):_GB_;
          if(_GC_)
           {var _GD_=ign?95:symb;incompatible_flag(pct_ind,str_ind,_GD_,_cG_)}
          var plus$1=ign?plus:ign;
          if(plus$1)incompatible_flag(pct_ind,str_ind,95,_cH_)}
        var _GE_=1 - ign_used[1],ign$0=_GE_?ign:_GE_;
        if(ign$0)
         {var switch$9=0;
          if(38 <= symb)
           {if(44 !== symb && 64 !== symb)switch$9 = 1}
          else
           if(33 !== symb && ! (37 <= symb))switch$9 = 1;
          var switch$10=0;
          if(switch$9 || ! legacy_behavior$0)switch$10 = 1;
          if(switch$10)incompatible_flag(pct_ind,str_ind,symb,_cI_)}
        return fmt_result}
      function parse(lit_start,end_ind)
       {var str_ind=lit_start;
        for(;;)
         {if(str_ind === end_ind)return add_literal(lit_start,str_ind,0);
          var match=caml_string_get(str,str_ind);
          if(37 === match)
           {var str_ind$2=str_ind + 1 | 0;
            if(str_ind$2 === end_ind)unexpected_end_of_format(end_ind);
            var
             match$1=caml_string_get(str,str_ind$2),
             _Gu_=
              95 === match$1
               ?parse_flags(str_ind,str_ind$2 + 1 | 0,end_ind,1)
               :parse_flags(str_ind,str_ind$2,end_ind,0),
             fmt_rest=_Gu_[1];
            return add_literal(lit_start,str_ind,fmt_rest)}
          if(64 === match)
           {var str_ind$0=str_ind + 1 | 0;
            if(str_ind$0 === end_ind)
             var match$0=_cK_;
            else
             {var c=caml_string_get(str,str_ind$0),switch$0=0;
              if(65 <= c)
               if(94 <= c)
                {var switcher=c - 123 | 0;
                 if(2 < switcher >>> 0)
                  switch$0 = 1;
                 else
                  switch(switcher)
                   {case 0:
                     var match$0=parse_tag(1,str_ind$0 + 1 | 0,end_ind);break;
                    case 1:switch$0 = 1;break;
                    default:
                     var
                      match$3=parse(str_ind$0 + 1 | 0,end_ind),
                      fmt_rest$2=match$3[1],
                      match$0=[0,[17,1,fmt_rest$2]]}}
               else
                if(91 <= c)
                 switch(c - 91 | 0)
                  {case 0:
                    var match$0=parse_tag(0,str_ind$0 + 1 | 0,end_ind);break;
                   case 1:switch$0 = 1;break;
                   default:
                    var
                     match$4=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$3=match$4[1],
                     match$0=[0,[17,0,fmt_rest$3]]}
                else
                 switch$0 = 1;
              else
               if(10 === c)
                var
                 match$5=parse(str_ind$0 + 1 | 0,end_ind),
                 fmt_rest$4=match$5[1],
                 match$0=[0,[17,3,fmt_rest$4]];
               else
                if(32 <= c)
                 switch(c - 32 | 0)
                  {case 0:
                    var
                     match$6=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$5=match$6[1],
                     match$0=[0,[17,_cL_,fmt_rest$5]];
                    break;
                   case 5:
                    var switch$1=0;
                    if
                     ((str_ind$0 + 1 | 0)
                      <
                      end_ind
                      &&
                      37
                      ===
                      caml_string_get(str,str_ind$0 + 1 | 0))
                     {var
                       match$7=parse(str_ind$0 + 2 | 0,end_ind),
                       fmt_rest$6=match$7[1],
                       match$0=[0,[17,6,fmt_rest$6]];
                      switch$1 = 1}
                    if(! switch$1)
                     var
                      match$8=parse(str_ind$0,end_ind),
                      fmt_rest$7=match$8[1],
                      match$0=[0,[12,64,fmt_rest$7]];
                    break;
                   case 12:
                    var
                     match$9=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$8=match$9[1],
                     match$0=[0,[17,_cM_,fmt_rest$8]];
                    break;
                   case 14:
                    var
                     match$10=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$9=match$10[1],
                     match$0=[0,[17,4,fmt_rest$9]];
                    break;
                   case 27:
                    var match$0=parse_good_break(str_ind$0 + 1 | 0,end_ind);
                    break;
                   case 28:
                    var match$0=parse_magic_size(str_ind$0 + 1 | 0,end_ind);
                    break;
                   case 31:
                    var
                     match$11=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$10=match$11[1],
                     match$0=[0,[17,2,fmt_rest$10]];
                    break;
                   case 32:
                    var
                     match$12=parse(str_ind$0 + 1 | 0,end_ind),
                     fmt_rest$11=match$12[1],
                     match$0=[0,[17,5,fmt_rest$11]];
                    break;
                   default:switch$0 = 1}
                else
                 switch$0 = 1;
              if(switch$0)
               var
                match$2=parse(str_ind$0 + 1 | 0,end_ind),
                fmt_rest$1=match$2[1],
                match$0=[0,[17,[2,c],fmt_rest$1]]}
            var fmt_rest$0=match$0[1];
            return add_literal(lit_start,str_ind,fmt_rest$0)}
          var str_ind$1=str_ind + 1 | 0,str_ind=str_ind$1;
          continue}}
      return parse(0,caml_ml_string_length(str))}
    function fprintf(oc,fmt$0)
     {var fmt=fmt$0[1],_Gt_=0;
      return make_printf(function(acc){output_acc(oc,acc);return 0},_Gt_,fmt)}
    function bprintf(b,fmt$0)
     {var fmt=fmt$0[1],_Gs_=0;
      return make_printf(function(acc){bufput_acc(b,acc);return 0},_Gs_,fmt)}
    function printf(fmt){return fprintf(stdout,fmt)}
    function eprintf(fmt){return fprintf(stderr,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(acc)
       {var buf=create$0(64);
        strput_acc(buf,acc);
        return caml_call1(k,contents(buf))}
      return make_printf(k$0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var
     Bad=[248,_c5_,caml_fresh_oo_id(0)],
     Help=[248,_c6_,caml_fresh_oo_id(0)],
     Stop=[248,_c7_,caml_fresh_oo_id(0)];
    function assoc3(x,l)
     {var l$0=l;
      for(;;)
       {if(l$0)
         {var match=l$0[1],y2=match[2],y1=match[1];
          if(caml_equal(y1,x))return y2;
          var l$1=l$0[2],l$0=l$1;
          continue}
        throw Not_found}}
    function split(s)
     {var
       i=index(s,61),
       len=caml_ml_string_length(s),
       _Gr_=sub$0(s,i + 1 | 0,len - (i + 1 | 0) | 0);
      return [0,sub$0(s,0,i),_Gr_]}
    function make_symlist(prefix,sep,suffix,l)
     {if(l)
       {var t=l[2],h=l[1],_Gq_=symbol(prefix,h);
        return symbol
                (fold_left
                  (function(x,y){return symbol(x,symbol(sep,y))},_Gq_,t),
                 suffix)}
      return _c8_}
    function help_action(param){throw [0,Stop,_dc_]}
    function add_help(speclist)
     {try
       {assoc3(_di_,speclist);var _Gn_=0,_Gl_=_Gn_}
      catch(_Gp_)
       {_Gp_ = caml_wrap_exception(_Gp_);
        if(_Gp_ !== Not_found)throw _Gp_;
        var _Gl_=[0,[0,_de_,[0,help_action],_dd_],0]}
      try
       {assoc3(_dh_,speclist);var _Gm_=0,add2=_Gm_}
      catch(_Go_)
       {_Go_ = caml_wrap_exception(_Go_);
        if(_Go_ !== Not_found)throw _Go_;
        var add2=[0,[0,_dg_,[0,help_action],_df_],0]}
      return append(speclist,append(_Gl_,add2))}
    var current=[0,0];
    function bool_of_string_opt(x)
     {try
       {var _Gj_=[0,bool_of_string(x)];return _Gj_}
      catch(_Gk_)
       {_Gk_ = caml_wrap_exception(_Gk_);
        if(_Gk_[1] === Invalid_argument)return 0;
        throw _Gk_}}
    function int_of_string_opt(x)
     {try
       {var _Gh_=[0,caml_int_of_string(x)];return _Gh_}
      catch(_Gi_)
       {_Gi_ = caml_wrap_exception(_Gi_);
        if(_Gi_[1] === Failure)return 0;
        throw _Gi_}}
    function float_of_string_opt(x)
     {try
       {var _Gf_=[0,caml_float_of_string(x)];return _Gf_}
      catch(_Gg_)
       {_Gg_ = caml_wrap_exception(_Gg_);
        if(_Gg_[1] === Failure)return 0;
        throw _Gg_}}
    function parse_and_expand_argv_dynamic_
     (allow_expand,current,argv,speclist,anonfun,errmsg)
     {var initpos=current[1];
      function convert_error(error)
       {var
         buf=create$0(200),
         progname=
          initpos < argv[1].length - 1
           ?caml_check_bound(argv[1],initpos)[1 + initpos]
           :_ds_;
        switch(error[0])
         {case 0:
           var _Gb_=error[1];
           if
            (caml_string_notequal(_Gb_,_dk_)
             &&
             caml_string_notequal(_Gb_,_dl_))
            caml_call2(bprintf(buf,_dm_),progname,_Gb_);
           break;
          case 1:
           var expected=error[3],arg=error[2],opt=error[1];
           caml_call4(bprintf(buf,_dp_),progname,arg,opt,expected);
           break;
          case 2:
           var s=error[1];caml_call2(bprintf(buf,_dq_),progname,s);break;
          default:var s$0=error[1];caml_call2(bprintf(buf,_dr_),progname,s$0)}
        var _Gc_=speclist[1];
        caml_call1(bprintf(buf,_dj_),errmsg);
        var _Ga_=add_help(_Gc_);
        iter
         (function(param)
           {var
             doc=param[3],
             spec=param[2],
             key=param[1],
             _Gd_=0 < caml_ml_string_length(doc)?1:0;
            if(_Gd_)
             {if(11 === spec[0])
               {var l=spec[1],_Ge_=make_symlist(_da_,_c$_,_c__,l);
                return caml_call3(bprintf(buf,_db_),key,_Ge_,doc)}
              return caml_call2(bprintf(buf,_c9_),key,doc)}
            return _Gd_},
          _Ga_);
        if(! caml_equal(error,_dn_) && ! caml_equal(error,_do_))
         return [0,Bad,contents(buf)];
        return [0,Help,contents(buf)]}
      current[1]++;
      for(;;)
       {if(current[1] < argv[1].length - 1)
         {try
           {var
             _F1_=current[1],
             s=caml_check_bound(argv[1],_F1_)[1 + _F1_],
             switch$0=0;
            if(1 <= caml_ml_string_length(s) && 45 === caml_string_get(s,0))
             {try
               {var
                 follow$1=0,
                 _F3_=assoc3(s,speclist[1]),
                 follow$0=follow$1,
                 action=_F3_}
              catch(_F__)
               {_F__ = caml_wrap_exception(_F__);
                if(_F__ !== Not_found)throw _F__;
                try
                 {var
                   match=split(s),
                   arg=match[2],
                   keyword=match[1],
                   follow=[0,arg],
                   _F2_=assoc3(keyword,speclist[1])}
                catch(_F$_)
                 {_F$_ = caml_wrap_exception(_F$_);
                  if(_F$_ === Not_found)throw [0,Stop,[0,s]];
                  throw _F$_;
                  var _F4_=_F$_}
                var follow$0=follow,action=_F2_,_F5_=_F__}
              var
               no_arg$0=
                function(s,follow)
                 {function no_arg(param)
                   {if(follow){var arg=follow[1];throw [0,Stop,[1,s,arg,_dt_]]}
                    return 0}
                  return no_arg},
               no_arg=no_arg$0(s,follow$0),
               get_arg$0=
                function(s,follow)
                 {function get_arg(param)
                   {if(follow){var arg=follow[1];return arg}
                    if((current[1] + 1 | 0) < argv[1].length - 1)
                     {var _F9_=current[1] + 1 | 0;
                      return caml_check_bound(argv[1],_F9_)[1 + _F9_]}
                    throw [0,Stop,[2,s]]}
                  return get_arg},
               get_arg=get_arg$0(s,follow$0),
               consume_arg$0=
                function(follow)
                 {function consume_arg(param)
                   {return follow?0:(current[1]++,0)}
                  return consume_arg},
               consume_arg=consume_arg$0(follow$0),
               treat_action$0=
                function(s,no_arg,get_arg,consume_arg)
                 {function treat_action(param)
                   {switch(param[0])
                     {case 0:var f=param[1];no_arg(0);return caml_call1(f,0);
                      case 1:
                       var
                        f$0=param[1],
                        arg=get_arg(0),
                        match=bool_of_string_opt(arg);
                       if(match)
                        {var s$0=match[1];caml_call1(f$0,s$0);return consume_arg(0)}
                       throw [0,Stop,[1,s,arg,_du_]];
                      case 2:var r=param[1];no_arg(0);r[1] = 1;return 0;
                      case 3:var r$0=param[1];no_arg(0);r$0[1] = 0;return 0;
                      case 4:
                       var f$1=param[1],arg$0=get_arg(0);
                       caml_call1(f$1,arg$0);
                       return consume_arg(0);
                      case 5:
                       var r$1=param[1];r$1[1] = get_arg(0);return consume_arg(0);
                      case 6:
                       var
                        f$2=param[1],
                        arg$1=get_arg(0),
                        match$0=int_of_string_opt(arg$1);
                       if(match$0)
                        {var x=match$0[1];caml_call1(f$2,x);return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$1,_dv_]];
                      case 7:
                       var
                        r$2=param[1],
                        arg$2=get_arg(0),
                        match$1=int_of_string_opt(arg$2);
                       if(match$1)
                        {var x$0=match$1[1];r$2[1] = x$0;return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$2,_dw_]];
                      case 8:
                       var
                        f$3=param[1],
                        arg$3=get_arg(0),
                        match$2=float_of_string_opt(arg$3);
                       if(match$2)
                        {var x$1=match$2[1];
                         caml_call1(f$3,x$1);
                         return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$3,_dx_]];
                      case 9:
                       var
                        r$3=param[1],
                        arg$4=get_arg(0),
                        match$3=float_of_string_opt(arg$4);
                       if(match$3)
                        {var x$2=match$3[1];r$3[1] = x$2;return consume_arg(0)}
                       throw [0,Stop,[1,s,arg$4,_dy_]];
                      case 10:
                       var specs=param[1];
                       no_arg(0);
                       return iter(treat_action,specs);
                      case 11:
                       var f$4=param[2],symb=param[1],arg$5=get_arg(0);
                       if(mem(arg$5,symb))
                        {caml_call1(f$4,arg$5);return consume_arg(0)}
                       throw [0,
                              Stop,
                              [1,s,arg$5,symbol(_dC_,make_symlist(_dB_,_dA_,_dz_,symb))]];
                      case 12:
                       var f$5=param[1];
                       no_arg(0);
                       for(;;)
                        {if(current[1] < (argv[1].length - 1 - 1 | 0))
                          {var _F6_=current[1] + 1 | 0;
                           caml_call1(f$5,caml_check_bound(argv[1],_F6_)[1 + _F6_]);
                           consume_arg(0);
                           continue}
                         return 0}
                      case 13:
                       var f$6=param[1];
                       no_arg(0);
                       var acc=[0,0];
                       for(;;)
                        {if(current[1] < (argv[1].length - 1 - 1 | 0))
                          {var _F8_=current[1] + 1 | 0,_F7_=acc[1];
                           acc[1] = [0,caml_check_bound(argv[1],_F8_)[1 + _F8_],_F7_];
                           consume_arg(0);
                           continue}
                         return caml_call1(f$6,rev(acc[1]))}
                      default:
                       var f$7=param[1];
                       if(1 - allow_expand)throw [0,Invalid_argument,_dD_];
                       var arg$6=get_arg(0),newarg=caml_call1(f$7,arg$6);
                       consume_arg(0);
                       var
                        before=sub$1(argv[1],0,current[1] + 1 | 0),
                        after=
                         sub$1
                          (argv[1],
                           current[1] + 1 | 0,
                           (argv[1].length - 1 - current[1] | 0) - 1 | 0);
                       argv[1]
                       =
                       caml_array_concat([0,before,[0,newarg,[0,after,0]]]);
                       return 0}}
                  return treat_action},
               treat_action=treat_action$0(s,no_arg,get_arg,consume_arg);
              treat_action(action);
              switch$0 = 1}
            if(! switch$0)caml_call1(anonfun,s)}
          catch(exn$0)
           {exn$0 = caml_wrap_exception(exn$0);
            if(exn$0[1] === Bad){var m=exn$0[2];throw convert_error([3,m])}
            if(exn$0[1] === Stop){var e=exn$0[2];throw convert_error(e)}
            throw exn$0;
            var exn=exn$0}
          current[1]++;
          continue}
        return 0}}
    function parse_argv(opt,argv,speclist,anonfun,errmsg)
     {if(opt)var sth=opt[1],sth$0=sth;else var sth$0=current;
      var speclist$0=[0,speclist];
      return parse_and_expand_argv_dynamic_
              (0,sth$0,[0,argv],speclist$0,anonfun,errmsg)}
    function second_word(s)
     {var len=caml_ml_string_length(s);
      function loop(n)
       {var n$0=n;
        for(;;)
         {if(len <= n$0)return len;
          if(32 === caml_string_get(s,n$0))
           {var n$1=n$0 + 1 | 0,n$0=n$1;continue}
          return n$0}}
      try
       {var n$0=index(s,9)}
      catch(_FZ_)
       {_FZ_ = caml_wrap_exception(_FZ_);
        if(_FZ_ === Not_found)
         {try
           {var n=index(s,32)}
          catch(_F0_)
           {_F0_ = caml_wrap_exception(_F0_);
            if(_F0_ === Not_found)return len;
            throw _F0_}
          return loop(n + 1 | 0)}
        throw _FZ_}
      return loop(n$0 + 1 | 0)}
    function max_arg_len(cur,param)
     {var doc=param[3],spec=param[2],kwd=param[1];
      return 11 === spec[0]
              ?max(cur,caml_ml_string_length(kwd))
              :max(cur,caml_ml_string_length(kwd) + second_word(doc) | 0)}
    function replace_leading_tab(s)
     {var seen=[0,0];
      function f(c){if(9 === c && ! seen[1]){seen[1] = 1;return 32}return c}
      return caml_string_of_bytes(map$1(f,caml_bytes_of_string(s)))}
    function align(opt,speclist)
     {if(opt)var sth=opt[1],limit=sth;else var limit=max$0;
      var
       completed=add_help(speclist),
       len=fold_left(max_arg_len,0,completed),
       len$0=min(len,limit);
      return map$0
              (function(ksd)
                {var _FX_=ksd[1],_FY_=ksd[2];
                 if(caml_string_notequal(ksd[3],_dE_))
                  {if(11 === _FY_[0])
                    {var
                      msg$0=ksd[3],
                      cutcol$0=second_word(msg$0),
                      spaces$0=make$0(max(0,len$0 - cutcol$0 | 0) + 3 | 0,32);
                     return [0,
                             _FX_,
                             _FY_,
                             symbol(_dF_,symbol(spaces$0,replace_leading_tab(msg$0)))]}
                   var
                    msg=ksd[3],
                    spec=ksd[2],
                    cutcol=second_word(msg),
                    kwd_len=caml_ml_string_length(_FX_),
                    diff=(len$0 - kwd_len | 0) - cutcol | 0;
                   if(0 < diff)
                    {var
                      spaces=make$0(diff,32),
                      prefix=sub$0(replace_leading_tab(msg),0,cutcol),
                      suffix=
                       sub$0(msg,cutcol,caml_ml_string_length(msg) - cutcol | 0);
                     return [0,_FX_,spec,symbol(prefix,symbol(spaces,suffix))]}
                   return [0,_FX_,spec,replace_leading_tab(msg)]}
                 return ksd},
               completed)}
    var printers=[0,0];
    function field(x,i$1)
     {var f=x[1 + i$1];
      if(is_block(f))
       {if(caml_obj_tag(f) === 252)return caml_call1(sprintf(_dG_),f);
        if(caml_obj_tag(f) === 253)
         {var s=caml_format_float(_j_,f),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return symbol(s,_i_);
            var match=caml_string_get(s,i),switch$0=0;
            if(48 <= match)
             {if(! (58 <= match))switch$0 = 1}
            else
             if(45 === match)switch$0 = 1;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _dH_}
      return caml_call1(sprintf(_dI_),f)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _dJ_;
      var _FV_=other_fields(x,i + 1 | 0),_FW_=field(x,i);
      return caml_call2(sprintf(_dK_),_FW_,_FV_)}
    function to_string$1(e)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var switch$0=0,val=caml_call1(hd,e);switch$0 = 1}
            catch(_FU_){}
            if(switch$0 && val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      var match$0=conv(printers[1]);
      if(match$0){var s=match$0[1];return s}
      if(e === Out_of_memory)return _dP_;
      if(e === Stack_overflow)return _dQ_;
      if(e[1] === Match_failure)
       {var match$1=e[2],char$0=match$1[3],line=match$1[2],file=match$1[1];
        return caml_call5
                (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_dR_)}
      if(e[1] === Assert_failure)
       {var
         match$2=e[2],
         char$1=match$2[3],
         line$0=match$2[2],
         file$0=match$2[1];
        return caml_call5
                (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_dS_)}
      if(e[1] === Undefined_recursive_module)
       {var
         match$3=e[2],
         char$2=match$3[3],
         line$1=match$3[2],
         file$1=match$3[1];
        return caml_call5
                (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_dT_)}
      if(0 === caml_obj_tag(e))
       {var constructor=e[1][1],match=e.length - 1;
        if(2 < match >>> 0)
         var
          _FQ_=other_fields(e,2),
          _FR_=field(e,1),
          _FT_=caml_call2(sprintf(_dL_),_FR_,_FQ_);
        else
         switch(match)
          {case 0:var _FT_=_dM_;break;
           case 1:var _FT_=_dN_;break;
           default:var _FS_=field(e,1),_FT_=caml_call1(sprintf(_dO_),_FS_)}
        return symbol(constructor,_FT_)}
      return e[1]}
    function convert_raw_backtrace(bt)
     {return [0,caml_convert_raw_backtrace(bt)]}
    function format_backtrace_slot(pos,slot)
     {function info(is_raise)
       {return is_raise?0 === pos?_dU_:_dV_:0 === pos?_dW_:_dX_}
      if(0 === slot[0])
       {var
         _FI_=slot[5],
         _FJ_=slot[4],
         _FK_=slot[3],
         _FL_=slot[6]?_dY_:_d0_,
         _FM_=slot[2],
         _FN_=slot[7],
         _FO_=info(slot[1]);
        return [0,
                caml_call7(sprintf(_dZ_),_FO_,_FN_,_FM_,_FL_,_FK_,_FJ_,_FI_)]}
      if(slot[1])return 0;
      var _FP_=info(0);
      return [0,caml_call1(sprintf(_d1_),_FP_)]}
    function print_raw_backtrace(outchan,raw_backtrace)
     {var backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],_FG_=a.length - 1 - 1 | 0,_FF_=0;
        if(! (_FG_ < 0))
         {var i=_FF_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
            if(match){var str=match[1];caml_call1(fprintf(outchan,_d2_),str)}
            var _FH_=i + 1 | 0;
            if(_FG_ !== i){var i=_FH_;continue}
            break}}
        return 0}
      return fprintf(outchan,_d3_)}
    function get_backtrace(param)
     {var
       raw_backtrace=caml_get_exception_raw_backtrace(0),
       backtrace=convert_raw_backtrace(raw_backtrace);
      if(backtrace)
       {var a=backtrace[1],b=create$0(1024),_FD_=a.length - 1 - 1 | 0,_FC_=0;
        if(! (_FD_ < 0))
         {var i=_FC_;
          for(;;)
           {var match=format_backtrace_slot(i,caml_check_bound(a,i)[1 + i]);
            if(match){var str=match[1];caml_call1(bprintf(b,_d4_),str)}
            var _FE_=i + 1 | 0;
            if(_FD_ !== i){var i=_FE_;continue}
            break}}
        return contents(b)}
      return _d5_}
    function register_printer(fn)
     {for(;;)
       {var
         old_printers=printers[1],
         new_printers=[0,fn,old_printers],
         success=compare_and_set(printers,old_printers,new_printers),
         _FB_=1 - success;
        if(_FB_)continue;
        return _FB_}}
    var errors=_d6_.slice();
    function default_uncaught_exception_han(exn,raw_backtrace)
     {var _Fz_=to_string$1(exn);
      caml_call1(eprintf(_d7_),_Fz_);
      print_raw_backtrace(stderr,raw_backtrace);
      var status=caml_ml_debug_info_status(0);
      if(status < 0)
       {var _FA_=abs(status);
        prerr_endline(caml_check_bound(errors,_FA_)[1 + _FA_])}
      return caml_ml_flush(stderr)}
    var empty_backtrace=[0];
    function handle_uncaught_exception(exn,debugger_in_use)
     {try
       {try
         {var
           raw_backtrace=
            debugger_in_use
             ?empty_backtrace
             :caml_get_exception_raw_backtrace(0);
          try {do_at_exit(0)}catch(_Fy_){}
          try
           {var
             _Fu_=default_uncaught_exception_han(exn,raw_backtrace),
             _Ft_=_Fu_}
          catch(exn$0)
           {exn$0 = caml_wrap_exception(exn$0);
            var
             raw_backtrace$0=caml_get_exception_raw_backtrace(0),
             _Fr_=to_string$1(exn);
            caml_call1(eprintf(_d9_),_Fr_);
            print_raw_backtrace(stderr,raw_backtrace);
            var _Fs_=to_string$1(exn$0);
            caml_call1(eprintf(_d__),_Fs_);
            print_raw_backtrace(stderr,raw_backtrace$0);
            var _Ft_=caml_ml_flush(stderr)}
          var _Fv_=_Ft_}
        catch(_Fx_)
         {_Fx_ = caml_wrap_exception(_Fx_);
          if(_Fx_ !== Out_of_memory)throw _Fx_;
          var _Fv_=prerr_endline(_d8_)}
        return _Fv_}
      catch(_Fw_){return 0}}
    caml_register_named_value
     (caml_string_of_jsbytes("Printexc.handle_uncaught_exception"),
      handle_uncaught_exception);
    var Finally_raised=[248,_d$_,caml_fresh_oo_id(0)];
    register_printer
     (function(param)
       {if(param[1] === Finally_raised)
         {var exn=param[2];return [0,symbol(_ea_,to_string$1(exn))]}
        return 0});
    function new_state(param){return [0,caml_make_vect(55,0),0]}
    function assign(st1,st2)
     {blit$0(st2[1],0,st1[1],0,55);st1[2] = st2[2];return 0}
    function full_init(s,seed)
     {var seed$0=0 === seed.length - 1?[0,0]:seed,l=seed$0.length - 1,i$0=0;
      for(;;)
       {caml_check_bound(s[1],i$0)[1 + i$0] = i$0;
        var _Fq_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_Fq_;continue}
        var accu=[0,_eb_],_Fm_=54 + max(55,l) | 0,_Fl_=0;
        if(! (_Fm_ < 0))
         {var i=_Fl_;
          for(;;)
           {var
             j=i % 55 | 0,
             k=caml_mod(i,l),
             x=caml_check_bound(seed$0,k)[1 + k],
             str=symbol(accu[1],caml_string_of_jsbytes("" + x));
            accu[1] = caml_md5_string(str,0,caml_ml_string_length(str));
            var
             _Fn_=accu[1],
             _Fh_=caml_string_get(_Fn_,3) << 24,
             _Fi_=caml_string_get(_Fn_,2) << 16,
             _Fj_=caml_string_get(_Fn_,1) << 8,
             _Fk_=((caml_string_get(_Fn_,0) + _Fj_ | 0) + _Fi_ | 0) + _Fh_ | 0,
             _Fo_=(caml_check_bound(s[1],j)[1 + j] ^ _Fk_) & 1073741823;
            caml_check_bound(s[1],j)[1 + j] = _Fo_;
            var _Fp_=i + 1 | 0;
            if(_Fm_ !== i){var i=_Fp_;continue}
            break}}
        s[2] = 0;
        return 0}}
    function make$1(seed)
     {var result=new_state(0);full_init(result,seed);return result}
    function make_self_init(param){return make$1(caml_sys_random_seed(0))}
    function copy$0(s){var result=new_state(0);assign(result,s);return result}
    function bits(s)
     {s[2] = (s[2] + 1 | 0) % 55 | 0;
      var
       _Fe_=s[2],
       curval=caml_check_bound(s[1],_Fe_)[1 + _Fe_],
       _Ff_=(s[2] + 24 | 0) % 55 | 0,
       newval=
        caml_check_bound(s[1],_Ff_)[1 + _Ff_]
        +
        (curval ^ (curval >>> 25 | 0) & 31)
        |
        0,
       newval30=newval & 1073741823,
       _Fg_=s[2];
      caml_check_bound(s[1],_Fg_)[1 + _Fg_] = newval30;
      return newval30}
    var default$0=[0,_ec_.slice(),0];
    function init$0(seed){return full_init(default$0,[0,seed])}
    function get_state(param){return copy$0(default$0)}
    function set_state(s){return assign(default$0,s)}
    try
     {var _rh_=caml_sys_getenv(_rg_),params=_rh_}
    catch(_Fc_)
     {_Fc_ = caml_wrap_exception(_Fc_);
      if(_Fc_ !== Not_found)throw _Fc_;
      try
       {var _rf_=caml_sys_getenv(_re_),_ee_=_rf_}
      catch(_Fd_)
       {_Fd_ = caml_wrap_exception(_Fd_);
        if(_Fd_ !== Not_found)throw _Fd_;
        var _ee_=_ed_}
      var params=_ee_}
    var
     randomized_default=contains(params,82),
     prng=[246,function(_Fb_){return make_self_init(0)}];
    function create$1(opt,initial_size)
     {if(opt)var sth=opt[1],random=sth;else var random=randomized_default;
      var x=16;
      for(;;)
       {if(! (initial_size <= x) && ! (max_length < (x * 2 | 0)))
         {var x$0=x * 2 | 0,x=x$0;continue}
        if(random)
         var
          _E$_=caml_obj_tag(prng),
          _Fa_=250 === _E$_?prng[1]:246 === _E$_?force_lazy_block(prng):prng,
          seed=bits(_Fa_);
        else
         var seed=0;
        return [0,0,caml_make_vect(x,0),seed,x]}}
    function indexfun(h,key)
     {return 4 <= h.length - 1
              ?caml_hash(10,100,h[3],key) & (h[2].length - 1 - 1 | 0)
              :invalid_arg(_ef_)}
    function add$0(h,key$0,data$0)
     {var
       i$1=indexfun(h,key$0),
       bucket=[0,key$0,data$0,caml_check_bound(h[2],i$1)[1 + i$1]];
      caml_check_bound(h[2],i$1)[1 + i$1] = bucket;
      h[1] = h[1] + 1 | 0;
      var _E__=h[2].length - 1 << 1 < h[1]?1:0;
      if(_E__)
       {var
         odata=h[2],
         osize=odata.length - 1,
         nsize$0=osize * 2 | 0,
         _E9_=nsize$0 < max_length?1:0;
        if(_E9_)
         {var
           ndata=caml_make_vect(nsize$0,0),
           _E0_=h.length - 1 < 4?1:0,
           _E1_=_E0_ || (h[4] < 0?1:0),
           inplace=1 - _E1_;
          h[2] = ndata;
          var
           nsize=ndata.length - 1,
           ndata_tail=caml_make_vect(nsize,0),
           _E3_=odata.length - 1 - 1 | 0,
           _E2_=0;
          if(! (_E3_ < 0))
           {var i$0=_E2_;
            a:
            for(;;)
             {var cell$1=caml_check_bound(odata,i$0)[1 + i$0],cell=cell$1;
              for(;;)
               {if(cell)
                 {var
                   key=cell[1],
                   data=cell[2],
                   next=cell[3],
                   cell$0=inplace?cell:[0,key,data,0],
                   nidx=indexfun(h,key),
                   match=caml_check_bound(ndata_tail,nidx)[1 + nidx];
                  if(match)
                   match[3] = cell$0;
                  else
                   caml_check_bound(ndata,nidx)[1 + nidx] = cell$0;
                  caml_check_bound(ndata_tail,nidx)[1 + nidx] = cell$0;
                  var cell=next;
                  continue}
                var _E8_=i$0 + 1 | 0;
                if(_E3_ !== i$0){var i$0=_E8_;continue a}
                break}
              break}}
          if(inplace)
           {var _E5_=nsize - 1 | 0,_E4_=0;
            if(! (_E5_ < 0))
             {var i=_E4_;
              for(;;)
               {var match$0=caml_check_bound(ndata_tail,i)[1 + i];
                if(match$0)match$0[3] = 0;
                var _E7_=i + 1 | 0;
                if(_E5_ !== i){var i=_E7_;continue}
                break}}
            var _E6_=0}
          else
           var _E6_=inplace;
          return _E6_}
        return _E9_}
      return _E__}
    function mem$0(h,key)
     {var
       _EZ_=indexfun(h,key),
       param$0=caml_check_bound(h[2],_EZ_)[1 + _EZ_],
       param=param$0;
      for(;;)
       {if(param)
         {var k=param[1],next=param[3],_EY_=0 === caml_compare(k,key)?1:0;
          if(_EY_)return _EY_;
          var param=next;
          continue}
        return 0}}
    var String_tag=[248,_eg_,caml_fresh_oo_id(0)],size=0,unknown=-1;
    function pp_enqueue(state,token)
     {state[13] = state[13] + token[3] | 0;return add(token,state[28])}
    var pp_infinity=1000000010;
    function pp_output_string(state,s)
     {return caml_call3(state[17],s,0,caml_ml_string_length(s))}
    function pp_output_newline(state){return caml_call1(state[19],0)}
    function format_pp_text(state,size,text)
     {state[9] = state[9] - size | 0;
      pp_output_string(state,text);
      state[11] = 0;
      return 0}
    function format_string(state,s)
     {var _EX_=caml_string_notequal(s,_eh_);
      return _EX_?format_pp_text(state,caml_ml_string_length(s),s):_EX_}
    function break_new_line(state,param,width)
     {var after=param[3],offset=param[2],before=param[1];
      format_string(state,before);
      pp_output_newline(state);
      state[11] = 1;
      var
       indent=(state[6] - width | 0) + offset | 0,
       real_indent=min(state[8],indent);
      state[10] = real_indent;
      state[9] = state[6] - state[10] | 0;
      caml_call1(state[21],state[10]);
      return format_string(state,after)}
    function break_line(state,width){return break_new_line(state,_ei_,width)}
    function break_same_line(state,param)
     {var after=param[3],width=param[2],before=param[1];
      format_string(state,before);
      state[9] = state[9] - width | 0;
      caml_call1(state[20],width);
      return format_string(state,after)}
    function format_pp_token(state,size$0,param)
     {if(typeof param === "number")
       switch(param)
        {case 0:
          var match$3=top_opt(state[3]);
          if(match$3)
           {var
             match$4=match$3[1],
             tabs=match$4[1],
             add_tab=
              function(n,ls)
               {if(ls)
                 {var l=ls[2],x=ls[1];
                  return caml_lessthan(n,x)?[0,n,ls]:[0,x,add_tab(n,l)]}
                return [0,n,0]};
            tabs[1] = add_tab(state[6] - state[9] | 0,tabs[1]);
            return 0}
          return 0;
         case 1:pop_opt(state[2]);return 0;
         case 2:pop_opt(state[3]);return 0;
         case 3:
          var match$5=top_opt(state[2]);
          if(match$5)
           {var match$6=match$5[1],width$0=match$6[2];
            return break_line(state,width$0)}
          return pp_output_newline(state);
         case 4:
          var _EU_=state[10] !== (state[6] - state[9] | 0)?1:0;
          if(_EU_)
           {var _ET_=state[28],_ER_=_ET_[2];
            if(_ER_)
             {var _ES_=_ER_[1];
              if(_ER_[2])
               {var next=_ER_[2];
                _ET_[1] = _ET_[1] - 1 | 0;
                _ET_[2] = next;
                var match$1=[0,_ES_]}
              else
               {clear$0(_ET_);var match$1=[0,_ES_]}}
            else
             var match$1=0;
            if(match$1)
             {var match$2=match$1[1],size=match$2[1],length=match$2[3];
              state[12] = state[12] - length | 0;
              state[9] = state[9] + size | 0;
              return 0}
            return 0}
          return _EU_;
         default:
          var match$7=pop_opt(state[5]);
          if(match$7)
           {var tag_name=match$7[1],marker=caml_call1(state[25],tag_name);
            return pp_output_string(state,marker)}
          return 0}
      else
       switch(param[0])
        {case 0:var s=param[1];return format_pp_text(state,size$0,s);
         case 1:
          var
           breaks=param[2],
           fits=param[1],
           off=breaks[2],
           before=breaks[1],
           match$8=top_opt(state[2]);
          if(match$8)
           {var match$9=match$8[1],width$1=match$9[2],box_type$0=match$9[1];
            switch(box_type$0)
             {case 0:return break_same_line(state,fits);
              case 1:return break_new_line(state,breaks,width$1);
              case 2:return break_new_line(state,breaks,width$1);
              case 3:
               return state[9] < (size$0 + caml_ml_string_length(before) | 0)
                       ?break_new_line(state,breaks,width$1)
                       :break_same_line(state,fits);
              case 4:
               return state[11]
                       ?break_same_line(state,fits)
                       :state[9] < (size$0 + caml_ml_string_length(before) | 0)
                         ?break_new_line(state,breaks,width$1)
                         :((state[6] - width$1 | 0) + off | 0) < state[10]
                           ?break_new_line(state,breaks,width$1)
                           :break_same_line(state,fits);
              default:return break_same_line(state,fits)}}
          return 0;
         case 2:
          var
           off$0=param[2],
           n=param[1],
           insertion_point=state[6] - state[9] | 0,
           match$10=top_opt(state[3]);
          if(match$10)
           {var match$11=match$10[1],tabs$0=match$11[1],_EV_=tabs$0[1];
            if(_EV_)
             {var first=_EV_[1],param$0=tabs$0[1];
              for(;;)
               {if(param$0)
                 {var tail=param$0[2],head=param$0[1];
                  if(! (insertion_point <= head)){var param$0=tail;continue}
                  var _EW_=head}
                else
                 var _EW_=first;
                var tab=_EW_;
                break}}
            else
             var tab=insertion_point;
            var offset=tab - insertion_point | 0;
            return 0 <= offset
                    ?break_same_line(state,[0,_ek_,offset + n | 0,_ej_])
                    :break_new_line
                      (state,[0,_em_,tab + off$0 | 0,_el_],state[6])}
          return 0;
         case 3:
          var
           ty=param[2],
           off$1=param[1],
           insertion_point$0=state[6] - state[9] | 0;
          if(state[8] < insertion_point$0)
           {var match=top_opt(state[2]);
            if(match)
             {var match$0=match[1],width=match$0[2],box_type=match$0[1];
              if(state[9] < width && ! (3 < box_type - 1 >>> 0))
               break_line(state,width)}
            else
             pp_output_newline(state)}
          var
           width$2=state[9] - off$1 | 0,
           box_type$1=1 === ty?1:state[9] < size$0?ty:5;
          return push([0,box_type$1,width$2],state[2]);
         case 4:var tbox=param[1];return push(tbox,state[3]);
         default:
          var tag_name$0=param[1],marker$0=caml_call1(state[24],tag_name$0);
          pp_output_string(state,marker$0);
          return push(tag_name$0,state[5])}}
    function advance_left(state)
     {for(;;)
       {var _EM_=state[28][2];
        if(_EM_)var content=_EM_[1],match=[0,content];else var match=0;
        if(match)
         {var
           match$0=match[1],
           size=match$0[1],
           length=match$0[3],
           token=match$0[2],
           pending_count=state[13] - state[12] | 0,
           _EO_=0 <= size?1:0,
           _EP_=_EO_ || (state[9] <= pending_count?1:0);
          if(_EP_)
           {var _EQ_=state[28],_EN_=_EQ_[2];
            if(_EN_)
             {if(_EN_[2])
               {var next=_EN_[2];_EQ_[1] = _EQ_[1] - 1 | 0;_EQ_[2] = next}
              else
               clear$0(_EQ_);
              var size$0=0 <= size?size:pp_infinity;
              format_pp_token(state,size$0,token);
              state[12] = length + state[12] | 0;
              continue}
            throw Empty$0}
          return _EP_}
        return 0}}
    function enqueue_advance(state,tok)
     {pp_enqueue(state,tok);return advance_left(state)}
    function enqueue_string_as(state,size,s)
     {return enqueue_advance(state,[0,size,[0,s],size])}
    function initialize_scan_stack(stack)
     {clear(stack);
      var queue_elem=[0,unknown,_en_,0];
      return push([0,-1,queue_elem],stack)}
    function set_size(state,ty)
     {var match=top_opt(state[1]);
      if(match)
       {var
         match$0=match[1],
         queue_elem=match$0[2],
         left_total=match$0[1],
         _EJ_=queue_elem[1];
        if(left_total < state[12])return initialize_scan_stack(state[1]);
        var _EK_=queue_elem[2];
        if(typeof _EK_ !== "number")
         switch(_EK_[0])
          {case 3:
            var _EL_=1 - ty;
            return _EL_
                    ?(queue_elem[1] = state[13] + _EJ_ | 0,pop_opt(state[1]),0)
                    :_EL_;
           case 1:
           case 2:
            return ty
                    ?(queue_elem[1] = state[13] + _EJ_ | 0,pop_opt(state[1]),0)
                    :ty
           }
        return 0}
      return 0}
    function scan_push(state,b,token)
     {pp_enqueue(state,token);
      if(b)set_size(state,1);
      var elem=[0,state[13],token];
      return push(elem,state[1])}
    function pp_open_box_gen(state,indent,br_ty)
     {state[14] = state[14] + 1 | 0;
      if(state[14] < state[15])
       {var size=- state[13] | 0,elem=[0,size,[3,indent,br_ty],0];
        return scan_push(state,0,elem)}
      var _EH_=state[14] === state[15]?1:0;
      if(_EH_)
       {var _EI_=state[16];
        return enqueue_string_as(state,caml_ml_string_length(_EI_),_EI_)}
      return _EH_}
    function pp_close_box(state,param)
     {var _EF_=1 < state[14]?1:0;
      if(_EF_)
       {if(state[14] < state[15])
         {pp_enqueue(state,[0,size,1,0]);set_size(state,1);set_size(state,0)}
        state[14] = state[14] - 1 | 0;
        var _EG_=0}
      else
       var _EG_=_EF_;
      return _EG_}
    function pp_close_tag(state,param)
     {if(state[23])pp_enqueue(state,[0,size,5,0]);
      var _ED_=state[22];
      if(_ED_)
       {var match=pop_opt(state[4]);
        if(match){var tag_name=match[1];return caml_call1(state[27],tag_name)}
        var _EE_=0}
      else
       var _EE_=_ED_;
      return _EE_}
    function pp_rinit(state)
     {state[12] = 1;
      state[13] = 1;
      clear$0(state[28]);
      initialize_scan_stack(state[1]);
      clear(state[2]);
      clear(state[3]);
      clear(state[4]);
      clear(state[5]);
      state[10] = 0;
      state[14] = 0;
      state[9] = state[6];
      return pp_open_box_gen(state,0,3)}
    function pp_flush_queue(state,b)
     {var _EC_=state[4];
      function f(param){return pp_close_tag(state,0)}
      iter(f,_EC_[1]);
      for(;;)
       {if(1 < state[14]){pp_close_box(state,0);continue}
        state[13] = pp_infinity;
        advance_left(state);
        if(b)pp_output_newline(state);
        return pp_rinit(state)}}
    function pp_print_as_size(state,size,s)
     {var _EB_=state[14] < state[15]?1:0;
      return _EB_?enqueue_string_as(state,size,s):_EB_}
    function pp_print_as(state,isize,s)
     {return pp_print_as_size(state,isize,s)}
    function pp_print_string(state,s)
     {return pp_print_as(state,caml_ml_string_length(s),s)}
    function pp_print_char(state,c){return pp_print_as(state,1,make$0(1,c))}
    function pp_open_box(state,indent){return pp_open_box_gen(state,indent,4)}
    function pp_print_flush(state,param)
     {pp_flush_queue(state,0);return caml_call1(state[18],0)}
    function pp_force_newline(state,param)
     {var _EA_=state[14] < state[15]?1:0;
      return _EA_?enqueue_advance(state,[0,size,3,0]):_EA_}
    function pp_print_break(state,width$0,offset)
     {var
       breaks=[0,_ep_,offset,_eo_],
       fits=[0,_er_,width$0,_eq_],
       after=fits[3],
       width=fits[2],
       before=fits[1],
       _Ez_=state[14] < state[15]?1:0;
      if(_Ez_)
       {var
         size=- state[13] | 0,
         token=[1,fits,breaks],
         length=
          (caml_ml_string_length(before) + width | 0)
          +
          caml_ml_string_length(after)
          |
          0,
         elem=[0,size,token,length];
        return scan_push(state,1,elem)}
      return _Ez_}
    function pp_print_space(state,param){return pp_print_break(state,1,0)}
    function pp_print_cut(state,param){return pp_print_break(state,0,0)}
    function pp_limit(n){return n < 1000000010?n:1000000009}
    function pp_set_max_indent(state,n$0)
     {var _Ey_=1 < n$0?1:0;
      if(_Ey_)
       {var n$1=state[6] - n$0 | 0,_Ex_=1 <= n$1?1:0;
        if(_Ex_)
         {var n=pp_limit(n$1);
          state[7] = n;
          state[8] = state[6] - state[7] | 0;
          return pp_rinit(state)}
        return _Ex_}
      return _Ey_}
    var blank_line=make$0(80,32);
    function display_blanks(state,n)
     {var n$0=n;
      for(;;)
       {var _Ew_=0 < n$0?1:0;
        if(_Ew_)
         {if(80 < n$0)
           {caml_call3(state[17],blank_line,0,80);
            var n$1=n$0 - 80 | 0,n$0=n$1;
            continue}
          return caml_call3(state[17],blank_line,0,n$0)}
        return _Ew_}}
    function default_pp_mark_open_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(_eu_,symbol(s,_et_))}
      return _ev_}
    function default_pp_mark_close_tag(param)
     {if(param[1] === String_tag)
       {var s=param[2];return symbol(_ex_,symbol(s,_ew_))}
      return _ey_}
    function default_pp_print_open_tag(_Ev_){return 0}
    function default_pp_print_close_tag(_Eu_){return 0}
    function make_formatter(output,flush)
     {function j(_Et_){return 0}
      function i(_Es_){return 0}
      function h(_Er_){return 0}
      var pp_queue=[0,0,0,0],sys_tok=[0,unknown,_ez_,0];
      add(sys_tok,pp_queue);
      var scan_stack=create(0);
      initialize_scan_stack(scan_stack);
      push([0,1,sys_tok],scan_stack);
      var
       _El_=create(0),
       _Em_=create(0),
       _En_=create(0),
       ppf=
        [0,
         scan_stack,
         create(0),
         _En_,
         _Em_,
         _El_,
         78,
         10,
         68,
         78,
         0,
         1,
         1,
         1,
         1,
         max$0,
         _eA_,
         output,
         flush,
         h,
         i,
         j,
         0,
         0,
         default_pp_mark_open_tag,
         default_pp_mark_close_tag,
         default_pp_print_open_tag,
         default_pp_print_close_tag,
         pp_queue];
      ppf[19] = function(_Eq_){return caml_call3(ppf[17],_es_,0,1)};
      ppf[20] = function(_Ep_){return display_blanks(ppf,_Ep_)};
      ppf[21] = function(_Eo_){return display_blanks(ppf,_Eo_)};
      return ppf}
    function formatter_of_out_channel(oc)
     {function _Ek_(param){return caml_ml_flush(oc)}
      return make_formatter
              (function(s,ofs,len)
                {if
                  (0
                   <=
                   ofs
                   &&
                   0
                   <=
                   len
                   &&
                   !
                   ((caml_ml_string_length(s) - len | 0) < ofs))
                  return caml_ml_output(oc,s,ofs,len);
                 return invalid_arg(_m_)},
               _Ek_)}
    function formatter_of_buffer(b)
     {function _Ef_(_Ej_){return 0}
      return make_formatter
              (function(s,offset,len)
                {var _Eg_=offset < 0?1:0;
                 if(_Eg_)
                  var _Eh_=_Eg_;
                 else
                  var
                   _Ei_=len < 0?1:0,
                   _Eh_=
                    _Ei_
                    ||
                    ((caml_ml_string_length(s) - len | 0) < offset?1:0);
                 if(_Eh_)invalid_arg(_ai_);
                 var new_position=b[2] + len | 0;
                 if(b[3] < new_position)resize(b,len);
                 caml_blit_string(s,offset,b[1],b[2],len);
                 b[2] = new_position;
                 return 0},
               _Ef_)}
    var pp_buffer_size=512;
    function pp_make_buffer(param){return create$0(pp_buffer_size)}
    var
     stdbuf=pp_make_buffer(0),
     state=formatter_of_out_channel(stdout),
     err_formatter=formatter_of_out_channel(stderr);
    formatter_of_buffer(stdbuf);
    function set_margin(n$0)
     {var _Ee_=1 <= n$0?1:0;
      if(_Ee_)
       {var n=pp_limit(n$0);
        state[6] = n;
        var
         new_max_indent=
          state[8] <= state[6]
           ?state[8]
           :max(max(state[6] - state[7] | 0,state[6] / 2 | 0),1);
        return pp_set_max_indent(state,new_max_indent)}
      return _Ee_}
    function set_max_indent(_Ed_){return pp_set_max_indent(state,_Ed_)}
    function pp_print_list(opt,pp_v,ppf,param)
     {var opt$0=opt,param$0=param;
      for(;;)
       {if(opt$0)var sth=opt$0[1],pp_sep=sth;else var pp_sep=pp_print_cut;
        if(param$0)
         {var _Ec_=param$0[1];
          if(param$0[2])
           {var param$1=param$0[2];
            caml_call2(pp_v,ppf,_Ec_);
            caml_call2(pp_sep,ppf,0);
            var opt$1=[0,pp_sep],opt$0=opt$1,param$0=param$1;
            continue}
          return caml_call2(pp_v,ppf,_Ec_)}
        return 0}}
    function compute_tag(output,tag_acc)
     {var b=create$0(16),ppf=formatter_of_buffer(b);
      caml_call2(output,ppf,tag_acc);
      pp_print_flush(ppf,0);
      var len=b[2];
      if(2 <= len)
       {var len$0=len - 2 | 0,ofs=1;
        if(0 <= len$0 && ! ((b[2] - len$0 | 0) < 1))
         return sub_string(b[1],ofs,len$0);
        return invalid_arg(_ae_)}
      return contents(b)}
    function output_acc$0(ppf,acc)
     {var switch$0=0;
      if(typeof acc === "number")
       return 0;
      else
       switch(acc[0])
        {case 0:
          var f=acc[2],p=acc[1];
          output_acc$0(ppf,p);
          if(typeof f === "number")
           switch(f)
            {case 0:return pp_close_box(ppf,0);
             case 1:return pp_close_tag(ppf,0);
             case 2:return pp_print_flush(ppf,0);
             case 3:return pp_force_newline(ppf,0);
             case 4:pp_flush_queue(ppf,1);return caml_call1(ppf[18],0);
             case 5:return pp_print_char(ppf,64);
             default:return pp_print_char(ppf,37)}
          else
           switch(f[0])
            {case 0:
              var offset=f[3],width=f[2];
              return pp_print_break(ppf,width,offset);
             case 1:return 0;
             default:
              var c=f[1];pp_print_char(ppf,64);return pp_print_char(ppf,c)}
         case 1:
          var _D4_=acc[2],_D5_=acc[1];
          if(0 === _D4_[0])
           {var acc$0=_D4_[1];
            output_acc$0(ppf,_D5_);
            var tag_name=[0,String_tag,compute_tag(output_acc$0,acc$0)];
            if(ppf[22]){push(tag_name,ppf[4]);caml_call1(ppf[26],tag_name)}
            var _D3_=ppf[23];
            if(_D3_)
             {var token=[5,tag_name];return pp_enqueue(ppf,[0,size,token,0])}
            return _D3_}
          var acc$1=_D4_[1];
          output_acc$0(ppf,_D5_);
          var
           match=open_box_of_string(compute_tag(output_acc$0,acc$1)),
           bty=match[2],
           indent=match[1];
          return pp_open_box_gen(ppf,indent,bty);
         case 2:
          var _D6_=acc[1],switch$1=0;
          if(typeof _D6_ !== "number" && 0 === _D6_[0])
           {var _D7_=_D6_[2],switch$2=0;
            if(typeof _D7_ !== "number" && 1 === _D7_[0])
             {var s$0=acc[2],size$0=_D7_[2],p$1=_D6_[1];
              switch$1 = 1;
              switch$2 = 1}}
          if(! switch$1){var s=acc[2],p$0=_D6_;switch$0 = 2}
          break;
         case 3:
          var _D8_=acc[1],switch$3=0;
          if(typeof _D8_ !== "number" && 0 === _D8_[0])
           {var _D9_=_D8_[2],switch$4=0;
            if(typeof _D9_ !== "number" && 1 === _D9_[0])
             {var c$1=acc[2],size$1=_D9_[2],p$3=_D8_[1];
              switch$0 = 1;
              switch$3 = 1;
              switch$4 = 1}}
          if(! switch$3){var c$0=acc[2],p$2=_D8_;switch$0 = 3}
          break;
         case 4:
          var _D__=acc[1],switch$5=0;
          if(typeof _D__ !== "number" && 0 === _D__[0])
           {var _D$_=_D__[2],switch$6=0;
            if(typeof _D$_ !== "number" && 1 === _D$_[0])
             {var s$0=acc[2],size$0=_D$_[2],p$1=_D__[1];
              switch$5 = 1;
              switch$6 = 1}}
          if(! switch$5){var s=acc[2],p$0=_D__;switch$0 = 2}
          break;
         case 5:
          var _Ea_=acc[1],switch$7=0;
          if(typeof _Ea_ === "number" || ! (0 === _Ea_[0]))
           switch$7 = 1;
          else
           {var _Eb_=_Ea_[2],switch$8=0;
            if(typeof _Eb_ !== "number" && 1 === _Eb_[0])
             {var c$1=acc[2],size$1=_Eb_[2],p$3=_Ea_[1];
              switch$0 = 1;
              switch$8 = 1}
            if(! switch$8)switch$7 = 1}
          if(switch$7){var c$0=acc[2],p$2=_Ea_;switch$0 = 3}
          break;
         case 6:
          var f$0=acc[2],p$4=acc[1];
          output_acc$0(ppf,p$4);
          return caml_call1(f$0,ppf);
         case 7:
          var p$5=acc[1];output_acc$0(ppf,p$5);return pp_print_flush(ppf,0);
         default:
          var msg=acc[2],p$6=acc[1];
          output_acc$0(ppf,p$6);
          return invalid_arg(msg)}
      switch(switch$0)
       {case 0:output_acc$0(ppf,p$1);return pp_print_as_size(ppf,size$0,s$0);
        case 1:
         output_acc$0(ppf,p$3);
         return pp_print_as_size(ppf,size$1,make$0(1,c$1));
        case 2:output_acc$0(ppf,p$0);return pp_print_string(ppf,s);
        default:output_acc$0(ppf,p$2);return pp_print_char(ppf,c$0)}}
    function fprintf$0(ppf)
     {return function(param)
       {var fmt=param[1],_D2_=0;
        return make_printf
                (function(acc){output_acc$0(ppf,acc);return 0},_D2_,fmt)}}
    function printf$0(fmt){return caml_call1(fprintf$0(state),fmt)}
    function flush_standard_formatters(param)
     {pp_print_flush(state,0);return pp_print_flush(err_formatter,0)}
    at_exit(flush_standard_formatters);
    var null_char=0;
    function next_char(ib)
     {try
       {var c=caml_call1(ib[7],0);
        ib[2] = c;
        ib[3] = 1;
        ib[4] = ib[4] + 1 | 0;
        if(10 === c)ib[5] = ib[5] + 1 | 0;
        return c}
      catch(_D1_)
       {_D1_ = caml_wrap_exception(_D1_);
        if(_D1_ === End_of_file)
         {ib[2] = null_char;ib[3] = 0;ib[1] = 1;return null_char}
        throw _D1_}}
    function peek_char(ib){return ib[3]?ib[2]:next_char(ib)}
    function checked_peek_char(ib)
     {var c=peek_char(ib);if(ib[1])throw End_of_file;return c}
    function end_of_input(ib){peek_char(ib);return ib[1]}
    function char_count(ib){return ib[3]?ib[4] - 1 | 0:ib[4]}
    function reset_token(ib){return reset(ib[8])}
    function invalidate_current_char(ib){ib[3] = 0;return 0}
    function token_string(ib)
     {var token_buffer=ib[8],tok=contents(token_buffer);
      token_buffer[2] = 0;
      ib[6] = ib[6] + 1 | 0;
      return tok}
    function skip_char(width,ib){invalidate_current_char(ib);return width}
    function ignore_char(width,ib){return skip_char(width - 1 | 0,ib)}
    function store_char(width,ib,c)
     {add_char(ib[8],c);return ignore_char(width,ib)}
    var default_token_buffer_size=1024;
    function create$2(iname,next)
     {return [0,
              0,
              null_char,
              0,
              0,
              0,
              0,
              next,
              create$0(default_token_buffer_size),
              iname]}
    var len=1024;
    function scan_raise_at_end(ic){throw End_of_file}
    function from_ic(scan_close_ic,iname,ic)
     {var s=caml_create_bytes(1024),i=[0,0],lim=[0,0],eof=[0,0];
      function next(param)
       {if(i[1] < lim[1]){var c=caml_bytes_get(s,i[1]);i[1]++;return c}
        if(eof[1])throw End_of_file;
        var switch$0=0,ofs=0;
        if
         (0 <= 0 && 0 <= len && ! ((caml_ml_bytes_length(s) - len | 0) < ofs))
         {var _D0_=caml_ml_input(ic,s,ofs,len);switch$0 = 1}
        if(! switch$0)var _D0_=invalid_arg(_n_);
        lim[1] = _D0_;
        return 0 === lim[1]
                ?(eof[1] = 1,caml_call1(scan_close_ic,ic))
                :(i[1] = 1,caml_bytes_get(s,0))}
      return create$2(iname,next)}
    from_ic(scan_raise_at_end,[1,_eB_,stdin],stdin);
    var Scan_failure=[248,_eC_,caml_fresh_oo_id(0)];
    function bad_input(s){throw [0,Scan_failure,s]}
    function bad_input_escape(c)
     {return bad_input(caml_call1(sprintf(_eD_),c))}
    function bad_token_length(message)
     {return bad_input(caml_call1(sprintf(_eE_),message))}
    function bad_float(param){return bad_input(_eG_)}
    function bad_hex_float(param){return bad_input(_eH_)}
    function character_mismatch(c,ci)
     {return bad_input(caml_call2(sprintf(_eI_),c,ci))}
    function check_this_char(ib,c)
     {var ci=checked_peek_char(ib);
      return ci === c?invalidate_current_char(ib):character_mismatch(c,ci)}
    function check_char(ib,c$0)
     {if(10 === c$0)
       {var ci=checked_peek_char(ib);
        return 10 === ci
                ?invalidate_current_char(ib)
                :13 === ci
                  ?(invalidate_current_char(ib),check_this_char(ib,10))
                  :character_mismatch(10,ci)}
      if(32 === c$0)
       for(;;)
        {var c=peek_char(ib),_DY_=1 - ib[1];
         if(_DY_)
          {var _DZ_=c - 9 | 0,switch$0=0;
           if(4 < _DZ_ >>> 0)
            {if(23 === _DZ_)switch$0 = 1}
           else
            if(1 < _DZ_ - 2 >>> 0)switch$0 = 1;
           if(switch$0){invalidate_current_char(ib);continue}
           return 0}
         return _DY_}
      return check_this_char(ib,c$0)}
    function token_char(ib){return caml_string_get(token_string(ib),0)}
    function token_bool(ib)
     {var s=token_string(ib);
      return caml_string_notequal(s,_eJ_)
              ?caml_string_notequal(s,_eK_)
                ?bad_input(caml_call1(sprintf(_eL_),s))
                :1
              :0}
    function integer_conversion_of_char(param)
     {var switcher=param - 88 | 0;
      if(! (32 < switcher >>> 0))
       switch(switcher)
        {case 10:return 0;
         case 12:return 1;
         case 17:return 2;
         case 23:return 3;
         case 29:return 4;
         case 0:
         case 32:return 5
         }
      throw [0,Assert_failure,_eM_]}
    function token_int_literal(conv,ib)
     {switch(conv)
       {case 0:var tok=symbol(_eN_,token_string(ib));break;
        case 3:var tok=symbol(_eO_,token_string(ib));break;
        case 4:var tok=symbol(_eP_,token_string(ib));break;
        case 5:var tok=symbol(_eQ_,token_string(ib));break;
        default:var tok=token_string(ib)}
      var l=caml_ml_string_length(tok);
      if(0 !== l && 43 === caml_string_get(tok,0))
       return sub$0(tok,1,l - 1 | 0);
      return tok}
    function token_float(ib){return caml_float_of_string(token_string(ib))}
    function scan_decimal_digit_star(width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(58 <= c)
         {if(95 === c)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}}
        else
         if(48 <= c)
          {var width$2=store_char(width$0,ib,c),width$0=width$2;continue}
        return width$0}}
    function scan_decimal_digit_plus(width,ib)
     {if(0 === width)return bad_token_length(_eR_);
      var c=checked_peek_char(ib);
      if(9 < c - 48 >>> 0)return bad_input(caml_call1(sprintf(_eS_),c));
      var width$0=store_char(width,ib,c);
      return scan_decimal_digit_star(width$0,ib)}
    function scan_digit_plus(basis,digitp,width$2,ib)
     {if(0 === width$2)return bad_token_length(_eT_);
      var c$0=checked_peek_char(ib);
      if(caml_call1(digitp,c$0))
       {var width$3=store_char(width$2,ib,c$0),width=width$3;
        for(;;)
         {if(0 === width)return width;
          var c=peek_char(ib);
          if(ib[1])return width;
          if(caml_call1(digitp,c))
           {var width$0=store_char(width,ib,c),width=width$0;continue}
          if(95 === c)
           {var width$1=ignore_char(width,ib),width=width$1;continue}
          return width}}
      return bad_input(caml_call2(sprintf(_eU_),c$0,basis))}
    function is_binary_digit(param){return 1 < param - 48 >>> 0?0:1}
    function scan_binary_int(_DW_,_DX_)
     {return scan_digit_plus(_eV_,is_binary_digit,_DW_,_DX_)}
    function is_octal_digit(param){return 7 < param - 48 >>> 0?0:1}
    function scan_octal_int(_DU_,_DV_)
     {return scan_digit_plus(_eW_,is_octal_digit,_DU_,_DV_)}
    function is_hexa_digit(param)
     {var _DT_=param - 48 | 0,switch$0=0;
      if(22 < _DT_ >>> 0)
       {if(! (5 < _DT_ - 49 >>> 0))switch$0 = 1}
      else
       if(6 < _DT_ - 10 >>> 0)switch$0 = 1;
      return switch$0?1:0}
    function scan_hexadecimal_int(_DR_,_DS_)
     {return scan_digit_plus(_eX_,is_hexa_digit,_DR_,_DS_)}
    function scan_sign(width,ib)
     {var c=checked_peek_char(ib),switcher=c - 43 | 0;
      if(! (2 < switcher >>> 0))
       switch(switcher)
        {case 0:return store_char(width,ib,c);
         case 1:break;
         default:return store_char(width,ib,c)}
      return width}
    function scan_optionally_signed_decimal(width,ib)
     {var width$0=scan_sign(width,ib);
      return scan_decimal_digit_plus(width$0,ib)}
    function scan_int_conversion(conv,width$1,ib)
     {switch(conv)
       {case 0:return scan_binary_int(width$1,ib);
        case 1:return scan_optionally_signed_decimal(width$1,ib);
        case 2:
         var width$0=scan_sign(width$1,ib),c=checked_peek_char(ib);
         if(48 === c)
          {var width=store_char(width$0,ib,c);
           if(0 === width)return width;
           var c$0=peek_char(ib);
           if(ib[1])return width;
           var switch$0=0;
           if(99 <= c$0)
            {if(111 === c$0)
              return scan_octal_int(store_char(width,ib,c$0),ib);
             if(120 === c$0)switch$0 = 1}
           else
            if(88 === c$0)
             switch$0 = 1;
            else
             if(98 <= c$0)return scan_binary_int(store_char(width,ib,c$0),ib);
           return switch$0
                   ?scan_hexadecimal_int(store_char(width,ib,c$0),ib)
                   :scan_decimal_digit_star(width,ib)}
         return scan_decimal_digit_plus(width$0,ib);
        case 3:return scan_octal_int(width$1,ib);
        case 4:return scan_decimal_digit_plus(width$1,ib);
        default:return scan_hexadecimal_int(width$1,ib)}}
    function scan_fractional_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      return ib[1]
              ?width
              :9 < c - 48 >>> 0
                ?width
                :scan_decimal_digit_star(store_char(width,ib,c),ib)}
    function scan_exponent_part(width,ib)
     {if(0 === width)return width;
      var c=peek_char(ib);
      if(ib[1])return width;
      if(69 !== c && 101 !== c)return width;
      return scan_optionally_signed_decimal(store_char(width,ib,c),ib)}
    function scan_float(width$1,precision,ib)
     {var
       width=scan_sign(width$1,ib),
       width$0=scan_decimal_digit_star(width,ib);
      if(0 === width$0)return [0,width$0,precision];
      var c=peek_char(ib);
      if(ib[1])return [0,width$0,precision];
      if(46 === c)
       {var
         width$2=store_char(width$0,ib,c),
         precision$0=min(width$2,precision),
         width$3=
          width$2
          -
          (precision$0 - scan_fractional_part(precision$0,ib) | 0)
          |
          0;
        return [0,scan_exponent_part(width$3,ib),precision$0]}
      return [0,scan_exponent_part(width$0,ib),precision]}
    function check_case_insensitive_string(width,ib,error,str)
     {function lowercase(c)
       {return 25 < c - 65 >>> 0?c:char_of_int((c - 65 | 0) + 97 | 0)}
      var
       len=caml_ml_string_length(str),
       width$0=[0,width],
       _DO_=len - 1 | 0,
       _DN_=0;
      if(! (_DO_ < 0))
       {var i=_DN_;
        for(;;)
         {var c=peek_char(ib),_DP_=lowercase(caml_string_get(str,i));
          if(lowercase(c) !== _DP_)caml_call1(error,0);
          if(0 === width$0[1])caml_call1(error,0);
          width$0[1] = store_char(width$0[1],ib,c);
          var _DQ_=i + 1 | 0;
          if(_DO_ !== i){var i=_DQ_;continue}
          break}}
      return width$0[1]}
    function scan_hex_float(width,precision,ib)
     {var _DA_=0 === width?1:0,_DB_=_DA_ || end_of_input(ib);
      if(_DB_)bad_hex_float(0);
      var
       width$0=scan_sign(width,ib),
       _DC_=0 === width$0?1:0,
       _DD_=_DC_ || end_of_input(ib);
      if(_DD_)bad_hex_float(0);
      var c=peek_char(ib),switch$0=0;
      if(78 <= c)
       {var switcher=c - 79 | 0;
        if(30 < switcher >>> 0)
         {if(! (32 <= switcher))
           {var
             width$1=store_char(width$0,ib,c),
             _DE_=0 === width$1?1:0,
             _DF_=_DE_ || end_of_input(ib);
            if(_DF_)bad_hex_float(0);
            return check_case_insensitive_string
                    (width$1,ib,bad_hex_float,_eY_)}}
        else
         if(26 === switcher)switch$0 = 1}
      else
       {if(48 === c)
         {var
           width$3=store_char(width$0,ib,c),
           _DI_=0 === width$3?1:0,
           _DJ_=_DI_ || end_of_input(ib);
          if(_DJ_)bad_hex_float(0);
          var
           width$4=
            check_case_insensitive_string(width$3,ib,bad_hex_float,_e0_);
          if(0 !== width$4 && ! end_of_input(ib))
           {var match=peek_char(ib),_DK_=match - 46 | 0,switch$1=0;
            if(34 < _DK_ >>> 0)
             {if(66 === _DK_)switch$1 = 1}
            else
             if(32 < _DK_ - 1 >>> 0)switch$1 = 1;
            var width$5=switch$1?width$4:scan_hexadecimal_int(width$4,ib);
            if(0 !== width$5 && ! end_of_input(ib))
             {var c$0=peek_char(ib);
              if(46 === c$0)
               {var width$6=store_char(width$5,ib,c$0),switch$2=0;
                if(0 !== width$6 && ! end_of_input(ib))
                 {var match$0=peek_char(ib),switch$3=0;
                  if(80 !== match$0 && 112 !== match$0)
                   {var
                     precision$0=min(width$6,precision),
                     width$10=
                      width$6
                      -
                      (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                      |
                      0;
                    switch$3 = 1}
                  if(! switch$3)var width$10=width$6;
                  var width$7=width$10;
                  switch$2 = 1}
                if(! switch$2)var width$7=width$6;
                var width$8=width$7}
              else
               var width$8=width$5;
              if(0 !== width$8 && ! end_of_input(ib))
               {var c$1=peek_char(ib);
                if(80 !== c$1 && 112 !== c$1)return width$8;
                var
                 width$9=store_char(width$8,ib,c$1),
                 _DL_=0 === width$9?1:0,
                 _DM_=_DL_ || end_of_input(ib);
                if(_DM_)bad_hex_float(0);
                return scan_optionally_signed_decimal(width$9,ib)}
              return width$8}
            return width$5}
          return width$4}
        if(73 === c)switch$0 = 1}
      if(switch$0)
       {var
         width$2=store_char(width$0,ib,c),
         _DG_=0 === width$2?1:0,
         _DH_=_DG_ || end_of_input(ib);
        if(_DH_)bad_hex_float(0);
        return check_case_insensitive_string(width$2,ib,bad_hex_float,_eZ_)}
      return bad_hex_float(0)}
    function scan_caml_float_rest(width,precision,ib)
     {var _Dw_=0 === width?1:0,_Dx_=_Dw_ || end_of_input(ib);
      if(_Dx_)bad_float(0);
      var
       width$0=scan_decimal_digit_star(width,ib),
       _Dy_=0 === width$0?1:0,
       _Dz_=_Dy_ || end_of_input(ib);
      if(_Dz_)bad_float(0);
      var c=peek_char(ib),switcher=c - 69 | 0;
      if(32 < switcher >>> 0)
       {if(-23 === switcher)
         {var
           width$1=store_char(width$0,ib,c),
           precision$0=min(width$1,precision),
           width_precision=scan_fractional_part(precision$0,ib),
           frac_width=precision$0 - width_precision | 0,
           width$2=width$1 - frac_width | 0;
          return scan_exponent_part(width$2,ib)}}
      else
       if(30 < switcher - 1 >>> 0)return scan_exponent_part(width$0,ib);
      return bad_float(0)}
    function scan_caml_float(width,precision,ib)
     {var _Di_=0 === width?1:0,_Dj_=_Di_ || end_of_input(ib);
      if(_Dj_)bad_float(0);
      var
       width$0=scan_sign(width,ib),
       _Dk_=0 === width$0?1:0,
       _Dl_=_Dk_ || end_of_input(ib);
      if(_Dl_)bad_float(0);
      var c=peek_char(ib);
      if(49 <= c)
       {if(! (58 <= c))
         {var
           width$1=store_char(width$0,ib,c),
           _Dm_=0 === width$1?1:0,
           _Dn_=_Dm_ || end_of_input(ib);
          if(_Dn_)bad_float(0);
          return scan_caml_float_rest(width$1,precision,ib)}}
      else
       if(48 <= c)
        {var
          width$2=store_char(width$0,ib,c),
          _Do_=0 === width$2?1:0,
          _Dp_=_Do_ || end_of_input(ib);
         if(_Dp_)bad_float(0);
         var c$0=peek_char(ib);
         if(88 !== c$0 && 120 !== c$0)
          return scan_caml_float_rest(width$2,precision,ib);
         var
          width$3=store_char(width$2,ib,c$0),
          _Dq_=0 === width$3?1:0,
          _Dr_=_Dq_ || end_of_input(ib);
         if(_Dr_)bad_float(0);
         var
          width$4=scan_hexadecimal_int(width$3,ib),
          _Ds_=0 === width$4?1:0,
          _Dt_=_Ds_ || end_of_input(ib);
         if(_Dt_)bad_float(0);
         var c$1=peek_char(ib),switcher=c$1 - 80 | 0,switch$0=0;
         if(32 < switcher >>> 0)
          if(-34 === switcher)
           {var width$5=store_char(width$4,ib,c$1),switch$1=0;
            if(0 !== width$5 && ! end_of_input(ib))
             {var match=peek_char(ib),switch$2=0;
              if(80 !== match && 112 !== match)
               {var
                 precision$0=min(width$5,precision),
                 width$10=
                  width$5
                  -
                  (precision$0 - scan_hexadecimal_int(precision$0,ib) | 0)
                  |
                  0;
                switch$2 = 1}
              if(! switch$2)var width$10=width$5;
              var width$6=width$10;
              switch$1 = 1}
            if(! switch$1)var width$6=width$5;
            var width$7=width$6}
          else
           switch$0 = 1;
         else
          if(30 < switcher - 1 >>> 0)var width$7=width$4;else switch$0 = 1;
         var width$8=switch$0?bad_float(0):width$7;
         if(0 !== width$8 && ! end_of_input(ib))
          {var c$2=peek_char(ib);
           if(80 !== c$2 && 112 !== c$2)return width$8;
           var
            width$9=store_char(width$8,ib,c$2),
            _Du_=0 === width$9?1:0,
            _Dv_=_Du_ || end_of_input(ib);
           if(_Dv_)bad_hex_float(0);
           return scan_optionally_signed_decimal(width$9,ib)}
         return width$8}
      return bad_float(0)}
    function scan_string(stp,width,ib)
     {var width$0=width;
      for(;;)
       {if(0 === width$0)return width$0;
        var c=peek_char(ib);
        if(ib[1])return width$0;
        if(stp)
         {var c$0=stp[1];
          if(c === c$0)return skip_char(width$0,ib);
          var width$1=store_char(width$0,ib,c),width$0=width$1;
          continue}
        var _Dh_=c - 9 | 0,switch$0=0;
        if(4 < _Dh_ >>> 0)
         {if(23 === _Dh_)switch$0 = 1}
        else
         if(1 < _Dh_ - 2 >>> 0)switch$0 = 1;
        if(switch$0)return width$0;
        var width$2=store_char(width$0,ib,c),width$0=width$2;
        continue}}
    function scan_char(width,ib)
     {return store_char(width,ib,checked_peek_char(ib))}
    function hexadecimal_value_of_char(d)
     {return 97 <= d?d - 87 | 0:65 <= d?d - 55 | 0:d - 48 | 0}
    function check_next_char(message,width,ib)
     {if(0 === width)return bad_token_length(message);
      var c=peek_char(ib);
      return ib[1]?bad_input(caml_call1(sprintf(_eF_),message)):c}
    function check_next_char_for_char(_Df_,_Dg_)
     {return check_next_char(_e3_,_Df_,_Dg_)}
    function check_next_char_for_string(_Dd_,_De_)
     {return check_next_char(_e4_,_Dd_,_De_)}
    function scan_backslash_char(width,ib)
     {var c0=check_next_char_for_char(width,ib),switch$0=0;
      if(40 <= c0)
       {if(58 <= c0)
         {var switcher=c0 - 92 | 0;
          if(! (28 < switcher >>> 0))
           switch(switcher)
            {case 28:
              var
               get_digit=
                function(param)
                 {var c=next_char(ib),_Dc_=c - 48 | 0,switch$0=0;
                  if(22 < _Dc_ >>> 0)
                   {if(! (5 < _Dc_ - 49 >>> 0))switch$0 = 1}
                  else
                   if(6 < _Dc_ - 10 >>> 0)switch$0 = 1;
                  return switch$0?c:bad_input_escape(c)},
               c1=get_digit(0),
               c2=get_digit(0),
               _C__=hexadecimal_value_of_char(c2),
               c$0=(16 * hexadecimal_value_of_char(c1) | 0) + _C__ | 0,
               switch$1=0;
              if(0 <= c$0 && ! (255 < c$0))
               {var _Da_=char_of_int(c$0);switch$1 = 1}
              if(! switch$1)
               var _Da_=bad_input(caml_call2(sprintf(_e2_),c1,c2));
              return store_char(width - 2 | 0,ib,_Da_);
             case 0:
             case 6:
             case 18:
             case 22:
             case 24:switch$0 = 1;break
             }}
        else
         if(48 <= c0)
          {var
            get_digit$0=
             function(param)
              {var c=next_char(ib);
               return 9 < c - 48 >>> 0?bad_input_escape(c):c},
            c1$0=get_digit$0(0),
            c2$0=get_digit$0(0),
            c=
             ((100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
             +
             (c2$0 - 48 | 0)
             |
             0,
            switch$2=0;
           if(0 <= c && ! (255 < c)){var _Db_=char_of_int(c);switch$2 = 1}
           if(! switch$2)
            var _Db_=bad_input(caml_call3(sprintf(_e1_),c0,c1$0,c2$0));
           return store_char(width - 2 | 0,ib,_Db_)}}
      else
       if(34 === c0 || 39 <= c0)switch$0 = 1;
      if(switch$0)
       {var switch$3=0;
        if(110 <= c0)
         if(117 <= c0)
          switch$3 = 1;
         else
          switch(c0 - 110 | 0)
           {case 0:var _C$_=10;break;
            case 4:var _C$_=13;break;
            case 6:var _C$_=9;break;
            default:switch$3 = 1}
        else
         if(98 === c0)var _C$_=8;else switch$3 = 1;
        if(switch$3)var _C$_=c0;
        return store_char(width,ib,_C$_)}
      return bad_input_escape(c0)}
    function scan_caml_char(width,ib)
     {function find_stop(width)
       {var c=check_next_char_for_char(width,ib);
        return 39 === c?ignore_char(width,ib):character_mismatch(39,c)}
      var c=checked_peek_char(ib);
      if(39 === c)
       {var
         width$0=ignore_char(width,ib),
         c$0=check_next_char_for_char(width$0,ib);
        return 92 === c$0
                ?find_stop(scan_backslash_char(ignore_char(width$0,ib),ib))
                :find_stop(store_char(width$0,ib,c$0))}
      return character_mismatch(39,c)}
    function scan_caml_string(width,ib)
     {function find_stop$0(counter,width)
       {var width$0=width;
        for(;;)
         {var c=check_next_char_for_string(width$0,ib);
          if(34 === c)return ignore_char(width$0,ib);
          if(92 === c)
           {var
             width$1=ignore_char(width$0,ib),
             match=check_next_char_for_string(width$1,ib);
            if(10 === match)
             {var _C8_=ignore_char(width$1,ib);
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return skip_spaces(counter$0,_C8_)}
              return caml_trampoline_return(skip_spaces,[0,_C8_])}
            if(13 === match)
             {var
               width$3=ignore_char(width$1,ib),
               match$0=check_next_char_for_string(width$3,ib);
              if(10 === match$0)
               {var _C9_=ignore_char(width$3,ib);
                if(counter < 50)
                 {var counter$1=counter + 1 | 0;
                  return skip_spaces(counter$1,_C9_)}
                return caml_trampoline_return(skip_spaces,[0,_C9_])}
              var width$5=store_char(width$3,ib,13),width$0=width$5;
              continue}
            var width$4=scan_backslash_char(width$1,ib),width$0=width$4;
            continue}
          var width$2=store_char(width$0,ib,c),width$0=width$2;
          continue}}
      function skip_spaces(counter,width)
       {var width$0=width;
        for(;;)
         {var match=check_next_char_for_string(width$0,ib);
          if(32 === match)
           {var width$1=ignore_char(width$0,ib),width$0=width$1;continue}
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return find_stop$0(counter$0,width$0)}
          return caml_trampoline_return(find_stop$0,[0,width$0])}}
      function find_stop(width){return caml_trampoline(find_stop$0(0,width))}
      var c=checked_peek_char(ib);
      return 34 === c
              ?find_stop(ignore_char(width,ib))
              :character_mismatch(34,c)}
    function scan_chars_in_char_set(char_set,scan_indic,width,ib)
     {function scan_chars(i,stp)
       {var i$0=i;
        for(;;)
         {var c=peek_char(ib),_C5_=0 < i$0?1:0;
          if(_C5_)
           {var _C6_=1 - ib[1];
            if(_C6_)
             var
              str_ind=c >>> 3 | 0,
              mask=1 << (c & 7),
              _C4_=0 !== (caml_string_get(char_set,str_ind) & mask)?1:0,
              _C7_=_C4_?c !== stp?1:0:_C4_;
            else
             var _C7_=_C6_}
          else
           var _C7_=_C5_;
          if(_C7_)
           {store_char(max$0,ib,c);var i$1=i$0 - 1 | 0,i$0=i$1;continue}
          return _C7_}}
      if(scan_indic)
       {var c=scan_indic[1];
        scan_chars(width,c);
        var _C3_=1 - ib[1];
        if(_C3_)
         {var ci=peek_char(ib);
          return c === ci?invalidate_current_char(ib):character_mismatch(c,ci)}
        return _C3_}
      return scan_chars(width,-1)}
    function ef(ib,x)
     {if(x[1] === Scan_failure)
       var s=x[2];
      else
       {if(x[1] !== Failure)throw x;var s=x[2]}
      var i=char_count(ib);
      return bad_input(caml_call2(sprintf(_e6_),i,s))}
    function get_counter(ib,counter)
     {switch(counter)
       {case 0:return ib[5];case 1:return char_count(ib);default:return ib[6]}}
    function width_of_pad_opt(pad_opt)
     {if(pad_opt){var width=pad_opt[1];return width}return max$0}
    function stopper_of_formatting_lit(fmting)
     {if(6 === fmting)return _e7_;
      var
       str=string_of_formatting_lit(fmting),
       stp=caml_string_get(str,1),
       sub_str=sub$0(str,2,caml_ml_string_length(str) - 2 | 0);
      return [0,stp,sub_str]}
    function take_format_readers$0(counter,k,fmt)
     {var fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k,0);
       else
        switch(fmt$0[0])
         {case 0:var fmt$1=fmt$0[1],fmt$0=fmt$1;continue;
          case 1:var fmt$2=fmt$0[1],fmt$0=fmt$2;continue;
          case 2:var fmt$3=fmt$0[2],fmt$0=fmt$3;continue;
          case 3:var fmt$4=fmt$0[2],fmt$0=fmt$4;continue;
          case 4:var fmt$5=fmt$0[4],fmt$0=fmt$5;continue;
          case 5:var fmt$6=fmt$0[4],fmt$0=fmt$6;continue;
          case 6:var fmt$7=fmt$0[4],fmt$0=fmt$7;continue;
          case 7:var fmt$8=fmt$0[4],fmt$0=fmt$8;continue;
          case 8:var fmt$9=fmt$0[4],fmt$0=fmt$9;continue;
          case 9:var fmt$10=fmt$0[2],fmt$0=fmt$10;continue;
          case 10:var fmt$11=fmt$0[1],fmt$0=fmt$11;continue;
          case 11:var fmt$12=fmt$0[2],fmt$0=fmt$12;continue;
          case 12:var fmt$13=fmt$0[2],fmt$0=fmt$13;continue;
          case 13:var fmt$14=fmt$0[3],fmt$0=fmt$14;continue;
          case 14:
           var rest=fmt$0[3],fmtty=fmt$0[2],_C1_=erase_rel(symm(fmtty));
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return take_fmtty_format_readers$0(counter$0,k,_C1_,rest)}
           return caml_trampoline_return
                   (take_fmtty_format_readers$0,[0,k,_C1_,rest]);
          case 15:var fmt$15=fmt$0[1],fmt$0=fmt$15;continue;
          case 16:var fmt$16=fmt$0[1],fmt$0=fmt$16;continue;
          case 17:var fmt$17=fmt$0[2],fmt$0=fmt$17;continue;
          case 18:
           var _C2_=fmt$0[1];
           if(0 === _C2_[0])
            {var
              rest$0=fmt$0[2],
              match=_C2_[1],
              fmt$18=match[1],
              fmt$19=concat_fmt(fmt$18,rest$0),
              fmt$0=fmt$19;
             continue}
           var
            rest$1=fmt$0[2],
            match$0=_C2_[1],
            fmt$20=match$0[1],
            fmt$21=concat_fmt(fmt$20,rest$1),
            fmt$0=fmt$21;
           continue;
          case 19:
           var fmt_rest=fmt$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_format_readers(new_k,fmt_rest)};
          case 20:var fmt$22=fmt$0[3],fmt$0=fmt$22;continue;
          case 21:var fmt$23=fmt$0[2],fmt$0=fmt$23;continue;
          case 22:var fmt$24=fmt$0[1],fmt$0=fmt$24;continue;
          case 23:
           var rest$2=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:
               return function(reader)
                {function new_k(readers_rest)
                  {return caml_call1(k,[0,reader,readers_rest])}
                 return take_format_readers(new_k,rest$2)};
              default:var fmt$0=rest$2;continue}
           else
            switch(ign[0])
             {case 0:var fmt$0=rest$2;continue;
              case 1:var fmt$0=rest$2;continue;
              case 2:var fmt$0=rest$2;continue;
              case 3:var fmt$0=rest$2;continue;
              case 4:var fmt$0=rest$2;continue;
              case 5:var fmt$0=rest$2;continue;
              case 6:var fmt$0=rest$2;continue;
              case 7:var fmt$0=rest$2;continue;
              case 8:var fmt$0=rest$2;continue;
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return take_fmtty_format_readers$0
                         (counter$1,k,fmtty$0,rest$2)}
               return caml_trampoline_return
                       (take_fmtty_format_readers$0,[0,k,fmtty$0,rest$2]);
              case 10:var fmt$0=rest$2;continue;
              default:var fmt$0=rest$2;continue}
          default:var fmt$25=fmt$0[3],fmt$0=fmt$25;continue}}
    function take_fmtty_format_readers$0(counter,k,fmtty,fmt)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        {if(counter < 50)
          {var counter$0=counter + 1 | 0;
           return take_format_readers$0(counter$0,k,fmt)}
         return caml_trampoline_return(take_format_readers$0,[0,k,fmt])}
       else
        switch(fmtty$0[0])
         {case 0:var fmtty$1=fmtty$0[1],fmtty$0=fmtty$1;continue;
          case 1:var fmtty$2=fmtty$0[1],fmtty$0=fmtty$2;continue;
          case 2:var fmtty$3=fmtty$0[1],fmtty$0=fmtty$3;continue;
          case 3:var fmtty$4=fmtty$0[1],fmtty$0=fmtty$4;continue;
          case 4:var fmtty$5=fmtty$0[1],fmtty$0=fmtty$5;continue;
          case 5:var fmtty$6=fmtty$0[1],fmtty$0=fmtty$6;continue;
          case 6:var fmtty$7=fmtty$0[1],fmtty$0=fmtty$7;continue;
          case 7:var fmtty$8=fmtty$0[1],fmtty$0=fmtty$8;continue;
          case 8:var fmtty$9=fmtty$0[2],fmtty$0=fmtty$9;continue;
          case 9:
           var
            rest=fmtty$0[3],
            ty2=fmtty$0[2],
            ty1=fmtty$0[1],
            ty=trans(symm(ty1),ty2),
            fmtty$10=concat_fmtty(ty,rest),
            fmtty$0=fmtty$10;
           continue;
          case 10:var fmtty$11=fmtty$0[1],fmtty$0=fmtty$11;continue;
          case 11:var fmtty$12=fmtty$0[1],fmtty$0=fmtty$12;continue;
          case 12:var fmtty$13=fmtty$0[1],fmtty$0=fmtty$13;continue;
          case 13:
           var fmt_rest=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest,fmt)};
          default:
           var fmt_rest$0=fmtty$0[1];
           return function(reader)
            {function new_k(readers_rest)
              {return caml_call1(k,[0,reader,readers_rest])}
             return take_fmtty_format_readers(new_k,fmt_rest$0,fmt)}}}
    function take_format_readers(k,fmt)
     {return caml_trampoline(take_format_readers$0(0,k,fmt))}
    function take_fmtty_format_readers(k,fmtty,fmt)
     {return caml_trampoline(take_fmtty_format_readers$0(0,k,fmtty,fmt))}
    function make_scanf(ib,fmt$0,readers)
     {var fmt$1=fmt$0;
      for(;;)
       if(typeof fmt$1 === "number")
        return 0;
       else
        switch(fmt$1[0])
         {case 0:
           var rest=fmt$1[1];
           scan_char(0,ib);
           var c=token_char(ib);
           return [0,c,make_scanf(ib,rest,readers)];
          case 1:
           var rest$0=fmt$1[1];
           scan_caml_char(0,ib);
           var c$0=token_char(ib);
           return [0,c$0,make_scanf(ib,rest$0,readers)];
          case 2:
           var _CN_=fmt$1[1],_CO_=fmt$1[2];
           if(typeof _CO_ !== "number")
            switch(_CO_[0])
             {case 17:
               var
                rest$2=_CO_[2],
                fmting_lit=_CO_[1],
                match$0=stopper_of_formatting_lit(fmting_lit),
                str=match$0[2],
                stp=match$0[1],
                scan$0=
                 function(width,param,ib)
                  {return scan_string([0,stp],width,ib)},
                str_rest=[11,str,rest$2];
               return pad_prec_scanf
                       (ib,str_rest,readers,_CN_,0,scan$0,token_string);
              case 18:
               var _CP_=_CO_[1];
               if(0 === _CP_[0])
                {var
                  rest$3=_CO_[2],
                  match$1=_CP_[1],
                  fmt$2=match$1[1],
                  scan$1=
                   function(width,param,ib){return scan_string(_e8_,width,ib)};
                 return pad_prec_scanf
                         (ib,
                          concat_fmt(fmt$2,rest$3),
                          readers,
                          _CN_,
                          0,
                          scan$1,
                          token_string)}
               var
                rest$4=_CO_[2],
                match$2=_CP_[1],
                fmt$3=match$2[1],
                scan$2=
                 function(width,param,ib){return scan_string(_e9_,width,ib)};
               return pad_prec_scanf
                       (ib,
                        concat_fmt(fmt$3,rest$4),
                        readers,
                        _CN_,
                        0,
                        scan$2,
                        token_string)
              }
           var
            rest$1=fmt$1[2],
            scan=function(width,param,ib){return scan_string(0,width,ib)};
           return pad_prec_scanf(ib,rest$1,readers,_CN_,0,scan,token_string);
          case 3:
           var
            rest$5=fmt$1[2],
            pad=fmt$1[1],
            scan$3=function(width,param,ib){return scan_caml_string(width,ib)};
           return pad_prec_scanf(ib,rest$5,readers,pad,0,scan$3,token_string);
          case 4:
           var
            rest$6=fmt$1[4],
            prec=fmt$1[3],
            pad$0=fmt$1[2],
            iconv=fmt$1[1],
            conv=integer_conversion_of_char(char_of_iconv(iconv)),
            scan$4=
             function(width,param,ib)
              {return scan_int_conversion(conv,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$6,
                    readers,
                    pad$0,
                    prec,
                    scan$4,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv,ib))});
          case 5:
           var
            rest$7=fmt$1[4],
            prec$0=fmt$1[3],
            pad$1=fmt$1[2],
            iconv$0=fmt$1[1],
            conv$0=integer_conversion_of_char(char_of_iconv(iconv$0)),
            scan$5=
             function(width,param,ib)
              {return scan_int_conversion(conv$0,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$7,
                    readers,
                    pad$1,
                    prec$0,
                    scan$5,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$0,ib))});
          case 6:
           var
            rest$8=fmt$1[4],
            prec$1=fmt$1[3],
            pad$2=fmt$1[2],
            iconv$1=fmt$1[1],
            conv$1=integer_conversion_of_char(char_of_iconv(iconv$1)),
            scan$6=
             function(width,param,ib)
              {return scan_int_conversion(conv$1,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$8,
                    readers,
                    pad$2,
                    prec$1,
                    scan$6,
                    function(ib)
                     {return caml_int_of_string(token_int_literal(conv$1,ib))});
          case 7:
           var
            rest$9=fmt$1[4],
            prec$2=fmt$1[3],
            pad$3=fmt$1[2],
            iconv$2=fmt$1[1],
            conv$2=integer_conversion_of_char(char_of_iconv(iconv$2)),
            scan$7=
             function(width,param,ib)
              {return scan_int_conversion(conv$2,width,ib)};
           return pad_prec_scanf
                   (ib,
                    rest$9,
                    readers,
                    pad$3,
                    prec$2,
                    scan$7,
                    function(ib)
                     {return caml_int64_of_string(token_int_literal(conv$2,ib))});
          case 8:
           switch(fmt$1[1][2])
            {case 5:
             case 8:
              var rest$11=fmt$1[4],prec$4=fmt$1[3],pad$5=fmt$1[2];
              return pad_prec_scanf
                      (ib,
                       rest$11,
                       readers,
                       pad$5,
                       prec$4,
                       scan_caml_float,
                       token_float);
             case 6:
             case 7:
              var rest$12=fmt$1[4],prec$5=fmt$1[3],pad$6=fmt$1[2];
              return pad_prec_scanf
                      (ib,rest$12,readers,pad$6,prec$5,scan_hex_float,token_float);
             default:
              var rest$10=fmt$1[4],prec$3=fmt$1[3],pad$4=fmt$1[2];
              return pad_prec_scanf
                      (ib,rest$10,readers,pad$4,prec$3,scan_float,token_float)}
          case 9:
           var
            rest$13=fmt$1[2],
            pad$7=fmt$1[1],
            scan$8=
             function(param,_C0_,ib)
              {var
                c=checked_peek_char(ib),
                m=
                 102 === c
                  ?5
                  :116 === c?4:bad_input(caml_call1(sprintf(_e5_),c));
               return scan_string(0,m,ib)};
           return pad_prec_scanf(ib,rest$13,readers,pad$7,0,scan$8,token_bool);
          case 10:
           var rest$14=fmt$1[1];
           if(end_of_input(ib)){var fmt$1=rest$14;continue}
           return bad_input(_e__);
          case 11:
           var fmt$4=fmt$1[2],str$0=fmt$1[1];
           iter$0(function(_CZ_){return check_char(ib,_CZ_)},str$0);
           var fmt$1=fmt$4;
           continue;
          case 12:
           var fmt$5=fmt$1[2],chr=fmt$1[1];
           check_char(ib,chr);
           var fmt$1=fmt$5;
           continue;
          case 13:
           var rest$15=fmt$1[3],fmtty=fmt$1[2],pad_opt=fmt$1[1];
           scan_caml_string(width_of_pad_opt(pad_opt),ib);
           var str$1=token_string(ib);
           try
            {var match=fmt_ebb_of_string(0,str$1),fmt=match[1];
             try
              {var _CM_=[0,type_format(fmt,fmtty),str$1],_CQ_=_CM_}
             catch(_CY_)
              {_CY_ = caml_wrap_exception(_CY_);
               if(_CY_ !== Type_mismatch)throw _CY_;
               var
                _CL_=string_of_fmtty(fmtty),
                _CQ_=caml_call2(failwith_message(_c4_),str$1,_CL_)}
             var fmt$6=_CQ_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var msg=exn[2],fmt$6=bad_input(msg)}
           return [0,fmt$6,make_scanf(ib,rest$15,readers)];
          case 14:
           var rest$16=fmt$1[3],fmtty$0=fmt$1[2],pad_opt$0=fmt$1[1];
           scan_caml_string(width_of_pad_opt(pad_opt$0),ib);
           var s=token_string(ib);
           try
            {var
              match$3=fmt_ebb_of_string(0,s),
              fmt$9=match$3[1],
              match$4=fmt_ebb_of_string(0,s),
              fmt$10=match$4[1],
              fmt$11=type_format(fmt$10,erase_rel(symm(fmtty$0))),
              _CS_=type_format(fmt$9,erase_rel(fmtty$0)),
              fmt$8=fmt$11,
              fmt$7=_CS_}
           catch(exn)
            {exn = caml_wrap_exception(exn);
             if(exn[1] !== Failure)throw exn;
             var
              msg$0=exn[2],
              _CR_=bad_input(msg$0),
              fmt$8=_CR_[2],
              fmt$7=_CR_[1]}
           return [0,
                   [0,fmt$7,s],
                   make_scanf(ib,concat_fmt(fmt$8,rest$16),readers)];
          case 15:return invalid_arg(_e$_);
          case 16:return invalid_arg(_fa_);
          case 17:
           var
            fmt$12=fmt$1[2],
            formatting_lit=fmt$1[1],
            _CT_=string_of_formatting_lit(formatting_lit);
           iter$0(function(_CX_){return check_char(ib,_CX_)},_CT_);
           var fmt$1=fmt$12;
           continue;
          case 18:
           var _CU_=fmt$1[1];
           if(0 === _CU_[0])
            {var rest$17=fmt$1[2],match$5=_CU_[1],fmt$13=match$5[1];
             check_char(ib,64);
             check_char(ib,123);
             var fmt$14=concat_fmt(fmt$13,rest$17),fmt$1=fmt$14;
             continue}
           var rest$18=fmt$1[2],match$6=_CU_[1],fmt$15=match$6[1];
           check_char(ib,64);
           check_char(ib,91);
           var fmt$16=concat_fmt(fmt$15,rest$18),fmt$1=fmt$16;
           continue;
          case 19:
           var fmt_rest=fmt$1[1];
           if(readers)
            {var
              readers_rest=readers[2],
              reader=readers[1],
              x=caml_call1(reader,ib);
             return [0,x,make_scanf(ib,fmt_rest,readers_rest)]}
           return invalid_arg(_fb_);
          case 20:
           var _CV_=fmt$1[1],_CW_=fmt$1[3];
           if(typeof _CW_ !== "number" && 17 === _CW_[0])
            {var
              rest$20=_CW_[2],
              fmting_lit$0=_CW_[1],
              char_set$0=fmt$1[2],
              match$7=stopper_of_formatting_lit(fmting_lit$0),
              str$2=match$7[2],
              stp$0=match$7[1],
              width$0=width_of_pad_opt(_CV_);
             scan_chars_in_char_set(char_set$0,[0,stp$0],width$0,ib);
             var s$1=token_string(ib),str_rest$0=[11,str$2,rest$20];
             return [0,s$1,make_scanf(ib,str_rest$0,readers)]}
           var
            rest$19=fmt$1[3],
            char_set=fmt$1[2],
            width=width_of_pad_opt(_CV_);
           scan_chars_in_char_set(char_set,0,width,ib);
           var s$0=token_string(ib);
           return [0,s$0,make_scanf(ib,rest$19,readers)];
          case 21:
           var
            rest$21=fmt$1[2],
            counter=fmt$1[1],
            count=get_counter(ib,counter);
           return [0,count,make_scanf(ib,rest$21,readers)];
          case 22:
           var rest$22=fmt$1[1],c$1=checked_peek_char(ib);
           return [0,c$1,make_scanf(ib,rest$22,readers)];
          case 23:
           var
            rest$23=fmt$1[2],
            ign=fmt$1[1],
            match$8=param_format_of_ignored_format(ign,rest$23),
            fmt$17=match$8[1],
            match$9=make_scanf(ib,fmt$17,readers);
           if(match$9){var arg_rest=match$9[2];return arg_rest}
           throw [0,Assert_failure,_fc_];
          default:return invalid_arg(_fd_)}}
    function pad_prec_scanf(ib,fmt,readers,pad,prec,scan,token)
     {if(typeof pad === "number")
       {if(typeof prec === "number")
         {if(prec)return invalid_arg(_fe_);
          caml_call3(scan,max$0,max$0,ib);
          var x=caml_call1(token,ib);
          return [0,x,make_scanf(ib,fmt,readers)]}
        var p=prec[1];
        caml_call3(scan,max$0,p,ib);
        var x$0=caml_call1(token,ib);
        return [0,x$0,make_scanf(ib,fmt,readers)]}
      else
       {if(0 === pad[0])
         {if(pad[1])
           {var _CK_=pad[2];
            if(typeof prec === "number")
             {if(prec)return invalid_arg(_ff_);
              caml_call3(scan,_CK_,max$0,ib);
              var x$1=caml_call1(token,ib);
              return [0,x$1,make_scanf(ib,fmt,readers)]}
            var p$0=prec[1];
            caml_call3(scan,_CK_,p$0,ib);
            var x$2=caml_call1(token,ib);
            return [0,x$2,make_scanf(ib,fmt,readers)]}
          return invalid_arg(_fg_)}
        return invalid_arg(_fh_)}}
    function sscanf(s,fmt$0)
     {var i=[0,0],len=caml_ml_string_length(s);
      function next(param)
       {if(len <= i[1])throw End_of_file;
        var c=caml_string_get(s,i[1]);
        i[1]++;
        return c}
      var ib=create$2(1,next),str=fmt$0[2],fmt=fmt$0[1];
      function apply(f,args)
       {var f$0=f,args$0=args;
        for(;;)
         {if(args$0)
           {var
             args$1=args$0[2],
             x=args$0[1],
             f$1=caml_call1(f$0,x),
             f$0=f$1,
             args$0=args$1;
            continue}
          return f$0}}
      function k(readers,f)
       {reset_token(ib);
        try
         {var _CJ_=[0,make_scanf(ib,fmt,readers)],_CI_=_CJ_}
        catch(exc)
         {exc = caml_wrap_exception(exc);
          var switch$0=0;
          if
           (exc[1]
            !==
            Scan_failure
            &&
            exc[1]
            !==
            Failure
            &&
            exc
            !==
            End_of_file)
           {if(exc[1] !== Invalid_argument)throw exc;
            var
             msg=exc[2],
             _CH_=
              invalid_arg(symbol(msg,symbol(_fj_,symbol(escaped(str),_fi_))));
            switch$0 = 1}
          if(! switch$0)var _CH_=[1,exc];
          var _CI_=_CH_}
        if(0 === _CI_[0]){var args=_CI_[1];return apply(f,args)}
        var exc=_CI_[1];
        return ef(ib,exc)}
      return take_format_readers(k,fmt)}
    function register_exception(name,exn)
     {var slot=caml_obj_tag(exn) === 248?exn:exn[1];
      return caml_register_named_value(name,slot)}
    var initial_object_size=2;
    function public_method_label(s)
     {var accu=[0,0],_CE_=caml_ml_string_length(s) - 1 | 0,_CD_=0;
      if(! (_CE_ < 0))
       {var i=_CD_;
        for(;;)
         {var _CF_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _CF_ | 0;
          var _CG_=i + 1 | 0;
          if(_CE_ !== i){var i=_CG_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     compare$1=caml_string_compare,
     Vars=___([0,compare$1]),
     compare$2=caml_string_compare,
     Meths=___([0,compare$2]),
     compare$3=caml_int_compare,
     Labs=___([0,compare$3]),
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _Cx_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _Cx_;
      var _Cz_=len - 1 | 0,_Cy_=0;
      if(! (_Cz_ < 0))
       {var i=_Cy_;
        for(;;)
         {var
           _CB_=(i * 2 | 0) + 3 | 0,
           _CA_=caml_check_bound(pub_labels,i)[1 + i];
          caml_check_bound(methods,_CB_)[1 + _CB_] = _CA_;
          var _CC_=i + 1 | 0;
          if(_Cz_ !== i){var i=_CC_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$0(array,new_size)
     {var old_size=array[2].length - 1,_Cv_=old_size < new_size?1:0;
      if(_Cv_)
       {var new_buck=caml_make_vect(new_size,dummy_met);
        blit$0(array[2],0,new_buck,0,old_size);
        array[2] = new_buck;
        var _Cw_=0}
      else
       var _Cw_=_Cv_;
      return _Cw_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$0(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _Ct_=caml_call2(Meths[28],name,table[3]);return _Ct_}
      catch(_Cu_)
       {_Cu_ = caml_wrap_exception(_Cu_);
        if(_Cu_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _Cu_}}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _Cr_=caml_call2(Vars[28],name,table[7]);return _Cr_}
      catch(_Cs_)
       {_Cs_ = caml_wrap_exception(_Cs_);
        if(_Cs_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,_fk_))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _Cs_}}
    function generic_basename(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,_fl_))return current_dir_name;
      var n$3=caml_ml_string_length(name) - 1 | 0,n=n$3;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var p=n + 1 | 0,n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               return sub$0(name,n$1 + 1 | 0,(p - n$1 | 0) - 1 | 0);
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return sub$0(name,0,p)}}
        return sub$0(name,0,1)}}
    function generic_dirname(is_dir_sep,current_dir_name,name)
     {if(caml_string_equal(name,_fm_))return current_dir_name;
      var n$5=caml_ml_string_length(name) - 1 | 0,n=n$5;
      for(;;)
       {if(0 <= n)
         {if(caml_call2(is_dir_sep,name,n)){var n$0=n - 1 | 0,n=n$0;continue}
          var n$1=n;
          for(;;)
           {if(0 <= n$1)
             {if(caml_call2(is_dir_sep,name,n$1))
               {var n$3=n$1;
                for(;;)
                 {if(0 <= n$3)
                   {if(caml_call2(is_dir_sep,name,n$3))
                     {var n$4=n$3 - 1 | 0,n$3=n$4;continue}
                    return sub$0(name,0,n$3 + 1 | 0)}
                  return sub$0(name,0,1)}}
              var n$2=n$1 - 1 | 0,n$1=n$2;
              continue}
            return current_dir_name}}
        return sub$0(name,0,1)}}
    function is_dir_sep(s,i){return 47 === caml_string_get(s,i)?1:0}
    function is_relative(n)
     {var
       _Cp_=caml_ml_string_length(n) < 1?1:0,
       _Cq_=_Cp_ || (47 !== caml_string_get(n,0)?1:0);
      return _Cq_}
    function is_implicit(n)
     {var _Ck_=is_relative(n);
      if(_Ck_)
       {var
         _Cl_=caml_ml_string_length(n) < 2?1:0,
         _Cm_=_Cl_ || caml_string_notequal(sub$0(n,0,2),_fo_);
        if(_Cm_)
         var
          _Cn_=caml_ml_string_length(n) < 3?1:0,
          _Co_=_Cn_ || caml_string_notequal(sub$0(n,0,3),_fn_);
        else
         var _Co_=_Cm_}
      else
       var _Co_=_Ck_;
      return _Co_}
    function check_suffix(name,suff)
     {var
       _Ci_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0,
       _Cj_=
        _Ci_
         ?caml_string_equal
           (sub$0
             (name,
              caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
              caml_ml_string_length(suff)),
            suff)
         :_Ci_;
      return _Cj_}
    function chop_suffix_opt(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s <= len_f)
       {var r=sub$0(filename,len_f - len_s | 0,len_s);
        return caml_string_equal(r,suffix)
                ?[0,sub$0(filename,0,len_f - len_s | 0)]
                :0}
      return 0}
    try
     {var _rd_=caml_sys_getenv(_rc_),temp_dir_name=_rd_}
    catch(_Ch_)
     {_Ch_ = caml_wrap_exception(_Ch_);
      if(_Ch_ !== Not_found)throw _Ch_;
      var temp_dir_name=_fp_}
    function quote(s)
     {var l=caml_ml_string_length(s),b=create$0(l + 20 | 0);
      add_char(b,39);
      var _Cf_=l - 1 | 0,_Ce_=0;
      if(! (_Cf_ < 0))
       {var i=_Ce_;
        for(;;)
         {if(39 === caml_string_get(s,i))
           add_string(b,quotequote);
          else
           add_char(b,caml_string_get(s,i));
          var _Cg_=i + 1 | 0;
          if(_Cf_ !== i){var i=_Cg_;continue}
          break}}
      add_char(b,39);
      return contents(b)}
    function quote_command(cmd,stdin,stdout,stderr,args)
     {if(stderr)
       var
        f=stderr[1],
        _B__=caml_equal(stderr,stdout)?_fq_:symbol(_fw_,quote(f)),
        _B$_=_B__;
      else
       var _B$_=_fx_;
      if(stdout)
       var f$0=stdout[1],_Ca_=symbol(_fr_,quote(f$0));
      else
       var _Ca_=_fv_;
      var _Cb_=symbol(_Ca_,_B$_);
      if(stdin)
       var f$1=stdin[1],_Cc_=symbol(_fs_,quote(f$1));
      else
       var _Cc_=_fu_;
      var _Cd_=symbol(_Cc_,_Cb_);
      return symbol(concat(_ft_,map$0(quote,[0,cmd,args])),_Cd_)}
    function basename(_B9_)
     {return generic_basename(is_dir_sep,current_dir_name,_B9_)}
    function dirname(_B8_)
     {return generic_dirname(is_dir_sep,current_dir_name,_B8_)}
    var
     Unix=
      [0,
       null$0,
       current_dir_name,
       parent_dir_name,
       dir_sep,
       is_dir_sep,
       is_relative,
       is_implicit,
       check_suffix,
       chop_suffix_opt,
       temp_dir_name,
       quote,
       quote_command,
       basename,
       dirname];
    function is_dir_sep$0(s,i)
     {var c=caml_string_get(s,i),_B5_=47 === c?1:0;
      if(_B5_)
       var _B6_=_B5_;
      else
       var _B7_=92 === c?1:0,_B6_=_B7_ || (58 === c?1:0);
      return _B6_}
    function is_relative$0(n)
     {var
       _BZ_=caml_ml_string_length(n) < 1?1:0,
       _B0_=_BZ_ || (47 !== caml_string_get(n,0)?1:0);
      if(_B0_)
       {var
         _B1_=caml_ml_string_length(n) < 1?1:0,
         _B2_=_B1_ || (92 !== caml_string_get(n,0)?1:0);
        if(_B2_)
         var
          _B3_=caml_ml_string_length(n) < 2?1:0,
          _B4_=_B3_ || (58 !== caml_string_get(n,1)?1:0);
        else
         var _B4_=_B2_}
      else
       var _B4_=_B0_;
      return _B4_}
    function is_implicit$0(n)
     {var _BQ_=is_relative$0(n);
      if(_BQ_)
       {var
         _BR_=caml_ml_string_length(n) < 2?1:0,
         _BS_=_BR_ || caml_string_notequal(sub$0(n,0,2),_fB_);
        if(_BS_)
         {var
           _BT_=caml_ml_string_length(n) < 2?1:0,
           _BU_=_BT_ || caml_string_notequal(sub$0(n,0,2),_fA_);
          if(_BU_)
           {var
             _BV_=caml_ml_string_length(n) < 3?1:0,
             _BW_=_BV_ || caml_string_notequal(sub$0(n,0,3),_fz_);
            if(_BW_)
             var
              _BX_=caml_ml_string_length(n) < 3?1:0,
              _BY_=_BX_ || caml_string_notequal(sub$0(n,0,3),_fy_);
            else
             var _BY_=_BW_}
          else
           var _BY_=_BU_}
        else
         var _BY_=_BS_}
      else
       var _BY_=_BQ_;
      return _BY_}
    function check_suffix$0(name,suff)
     {var _BN_=caml_ml_string_length(suff) <= caml_ml_string_length(name)?1:0;
      if(_BN_)
       var
        s=
         sub$0
          (name,
           caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
           caml_ml_string_length(suff)),
        _BO_=lowercase(suff),
        _BP_=caml_string_equal(lowercase(s),_BO_);
      else
       var _BP_=_BN_;
      return _BP_}
    function chop_suffix_opt$0(suffix,filename)
     {var
       len_s=caml_ml_string_length(suffix),
       len_f=caml_ml_string_length(filename);
      if(len_s <= len_f)
       {var r=sub$0(filename,len_f - len_s | 0,len_s),_BM_=lowercase(suffix);
        return caml_string_equal(lowercase(r),_BM_)
                ?[0,sub$0(filename,0,len_f - len_s | 0)]
                :0}
      return 0}
    try
     {var _rb_=caml_sys_getenv(_ra_),temp_dir_name$0=_rb_}
    catch(_BL_)
     {_BL_ = caml_wrap_exception(_BL_);
      if(_BL_ !== Not_found)throw _BL_;
      var temp_dir_name$0=_fC_}
    function quote$0(s)
     {var l=caml_ml_string_length(s),b=create$0(l + 20 | 0);
      add_char(b,34);
      function add_bs(n)
       {var _BJ_=1;
        if(! (n < 1))
         {var j=_BJ_;
          for(;;)
           {add_char(b,92);
            var _BK_=j + 1 | 0;
            if(n !== j){var j=_BK_;continue}
            break}}
        return 0}
      function loop$0(counter,i)
       {var i$0=i;
        for(;;)
         {if(i$0 === l)return add_char(b,34);
          var c=caml_string_get(s,i$0);
          if(34 === c)
           {var _BH_=0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;
              return loop_bs(counter$1,_BH_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_BH_,i$0])}
          if(92 === c)
           {var _BI_=0;
            if(counter < 50)
             {var counter$0=counter + 1 | 0;
              return loop_bs(counter$0,_BI_,i$0)}
            return caml_trampoline_return(loop_bs,[0,_BI_,i$0])}
          add_char(b,c);
          var i$1=i$0 + 1 | 0,i$0=i$1;
          continue}}
      function loop_bs(counter,n,i)
       {var n$0=n,i$0=i;
        for(;;)
         {if(i$0 === l){add_char(b,34);return add_bs(n$0)}
          var match=caml_string_get(s,i$0);
          if(34 === match)
           {add_bs((2 * n$0 | 0) + 1 | 0);
            add_char(b,34);
            var _BG_=i$0 + 1 | 0;
            if(counter < 50)
             {var counter$1=counter + 1 | 0;return loop$0(counter$1,_BG_)}
            return caml_trampoline_return(loop$0,[0,_BG_])}
          if(92 === match)
           {var i$1=i$0 + 1 | 0,n$1=n$0 + 1 | 0,n$0=n$1,i$0=i$1;continue}
          add_bs(n$0);
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,i$0)}
          return caml_trampoline_return(loop$0,[0,i$0])}}
      function loop(i){return caml_trampoline(loop$0(0,i))}
      loop(0);
      return contents(b)}
    function quote_cmd_filename(f)
     {if(! contains(f,34) && ! contains(f,37))
       return contains(f,32)?symbol(_fF_,symbol(f,_fE_)):f;
      return k(symbol(_fD_,f))}
    function quote_command$0(cmd,stdin,stdout,stderr,args)
     {if(stderr)
       var
        f=stderr[1],
        _Bx_=caml_equal(stderr,stdout)?_fH_:symbol(_fQ_,quote_cmd_filename(f)),
        _By_=_Bx_;
      else
       var _By_=_fR_;
      var _Bz_=[0,_By_,_fG_];
      if(stdout)
       var f$0=stdout[1],_BA_=symbol(_fI_,quote_cmd_filename(f$0));
      else
       var _BA_=_fP_;
      var _BB_=[0,_BA_,_Bz_];
      if(stdin)
       var f$1=stdin[1],_BC_=symbol(_fJ_,quote_cmd_filename(f$1));
      else
       var _BC_=_fO_;
      var
       s=concat(_fK_,map$0(quote$0,args)),
       b=create$0(caml_ml_string_length(s) + 20 | 0),
       _BD_=[0,_BC_,_BB_];
      iter$0
       (function(c)
         {var switch$0=0;
          if(62 <= c)
           {var _BF_=c - 63 | 0;
            if(60 < _BF_ >>> 0)
             {if(! (62 <= _BF_))switch$0 = 1}
            else
             if(31 === _BF_)switch$0 = 1}
          else
           if(42 <= c)
            {if(60 === c)switch$0 = 1}
           else
            if(33 <= c)
             switch(c - 33 | 0)
              {case 2:case 3:case 6:break;default:switch$0 = 1}
          return switch$0?(add_char(b,94),add_char(b,c)):add_char(b,c)},
        s);
      var _BE_=[0,_fL_,[0,contents(b),_BD_]];
      return concat(_fN_,[0,_fM_,[0,quote_cmd_filename(cmd),_BE_]])}
    function drive_and_path(s)
     {var _Bt_=2 <= caml_ml_string_length(s)?1:0;
      if(_Bt_)
       {var param=caml_string_get(s,0),switch$0=0;
        if(91 <= param)
         {if(! (25 < param - 97 >>> 0))switch$0 = 1}
        else
         if(65 <= param)switch$0 = 1;
        var _Bu_=switch$0?1:0,_Bv_=_Bu_?58 === caml_string_get(s,1)?1:0:_Bu_}
      else
       var _Bv_=_Bt_;
      if(_Bv_)
       {var _Bw_=sub$0(s,2,caml_ml_string_length(s) - 2 | 0);
        return [0,sub$0(s,0,2),_Bw_]}
      return [0,_fS_,s]}
    function dirname$0(s)
     {var
       match=drive_and_path(s),
       path=match[2],
       drive=match[1],
       dir=generic_dirname(is_dir_sep$0,current_dir_name$0,path);
      return symbol(drive,dir)}
    function basename$0(s)
     {var match=drive_and_path(s),path=match[2];
      return generic_basename(is_dir_sep$0,current_dir_name$0,path)}
    var
     Win32=
      [0,
       null$1,
       current_dir_name$0,
       parent_dir_name$0,
       dir_sep$0,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name$0,
       quote$0,
       quote_command$0,
       basename$0,
       dirname$0];
    function basename$1(_Bs_)
     {return generic_basename(is_dir_sep$0,current_dir_name$1,_Bs_)}
    function dirname$1(_Br_)
     {return generic_dirname(is_dir_sep$0,current_dir_name$1,_Br_)}
    var
     Cygwin=
      [0,
       null$2,
       current_dir_name$1,
       parent_dir_name$1,
       dir_sep$1,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name,
       quote,
       quote_command,
       basename$1,
       dirname$1],
     Sysdeps=
      caml_string_notequal(os_type$0,_fT_)
       ?caml_string_notequal(os_type$0,_fU_)?Unix:Win32
       :Cygwin,
     dir_sep$2=Sysdeps[4],
     is_dir_sep$1=Sysdeps[5],
     is_relative$1=Sysdeps[6],
     temp_dir_name$1=Sysdeps[10];
    function concat$0(dirname,filename)
     {var l=caml_ml_string_length(dirname);
      if(0 !== l && ! is_dir_sep$1(dirname,l - 1 | 0))
       return symbol(dirname,symbol(dir_sep$2,filename));
      return symbol(dirname,filename)}
    var prng$0=[246,function(_Bq_){return make_self_init(0)}];
    function temp_file_name(temp_dir,prefix,suffix)
     {var
       _Bo_=caml_obj_tag(prng$0),
       _Bp_=
        250 === _Bo_?prng$0[1]:246 === _Bo_?force_lazy_block(prng$0):prng$0,
       rnd=bits(_Bp_) & 16777215;
      return concat$0(temp_dir,caml_call3(sprintf(_fV_),prefix,rnd,suffix))}
    function pre_test_hook(_Bn_){return 0}
    var _fX_=[0,pre_test_hook];
    function sexp_of_t(t){return t}
    var
     Not_found_s=[248,_fY_,caml_fresh_oo_id(0)],
     Of_sexp_error=[248,_fZ_,caml_fresh_oo_id(0)],
     _f0_=1;
    function must_escape(str)
     {var len=caml_ml_string_length(str),_Bf_=0 === len?1:0;
      if(_Bf_)return _Bf_;
      var ix$3=len - 1 | 0,ix=ix$3;
      for(;;)
       {var match=caml_string_get(str,ix),switch$0=0;
        if(92 <= match)
         {var switcher=match - 93 | 0;
          if(33 < switcher >>> 0)
           if(0 <= switcher)switch$0 = 2;else switch$0 = 1;
          else
           if(31 === switcher)
            {var _Bg_=0 < ix?1:0;
             if(_Bg_)
              {var ix$0=ix - 1 | 0,_Bh_=equal(caml_string_get(str,ix$0),35);
               if(! _Bh_){var ix=ix$0;continue}
               var _Bi_=_Bh_}
             else
              var _Bi_=_Bg_;
             return _Bi_}}
        else
         if(42 <= match)
          {if(59 === match)switch$0 = 1}
         else
          if(33 <= match)
           switch(match - 33 | 0)
            {case 2:
              var _Bk_=0 < ix?1:0;
              if(_Bk_)
               {var ix$2=ix - 1 | 0,_Bl_=equal(caml_string_get(str,ix$2),124);
                if(! _Bl_){var ix=ix$2;continue}
                var _Bm_=_Bl_}
              else
               var _Bm_=_Bk_;
              return _Bm_;
             case 1:
             case 7:
             case 8:switch$0 = 1;break
             }
          else
           switch$0 = 2;
        switch(switch$0)
         {case 0:
           var _Bj_=0 < ix?1:0;
           if(_Bj_){var ix$1=ix - 1 | 0,ix=ix$1;continue}
           return _Bj_;
          case 1:return 1;
          default:return 1}}}
    function escaped$0(s)
     {var n=[0,0],_A7_=caml_ml_string_length(s) - 1 | 0,_A6_=0;
      if(! (_A7_ < 0))
       {var i$0=_A6_;
        for(;;)
         {var match=caml_string_unsafe_get(s,i$0),switch$0=0;
          if(32 <= match)
           {var _Bc_=match - 34 | 0,switch$1=0;
            if(58 < _Bc_ >>> 0)
             {if(93 <= _Bc_)switch$1 = 1}
            else
             if(56 < _Bc_ - 1 >>> 0){switch$0 = 1;switch$1 = 1}
            if(! switch$1){var _Bd_=1;switch$0 = 2}}
          else
           if(11 <= match)
            {if(13 === match)switch$0 = 1}
           else
            if(8 <= match)switch$0 = 1;
          switch(switch$0){case 0:var _Bd_=4;break;case 1:var _Bd_=2;break}
          n[1] = n[1] + _Bd_ | 0;
          var _Be_=i$0 + 1 | 0;
          if(_A7_ !== i$0){var i$0=_Be_;continue}
          break}}
      if(n[1] === caml_ml_string_length(s))return s;
      var s$0=caml_create_bytes(n[1]);
      n[1] = 0;
      var _A9_=caml_ml_string_length(s) - 1 | 0,_A8_=0;
      if(! (_A9_ < 0))
       {var i=_A8_;
        for(;;)
         {var c=caml_string_unsafe_get(s,i),switch$2=0;
          if(35 <= c)
           if(92 === c)
            switch$2 = 2;
           else
            if(127 <= c)switch$2 = 1;else switch$2 = 3;
          else
           if(32 <= c)
            if(34 <= c)switch$2 = 2;else switch$2 = 3;
           else
            if(14 <= c)
             switch$2 = 1;
            else
             switch(c)
              {case 8:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],98);
                break;
               case 9:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],116);
                break;
               case 10:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],110);
                break;
               case 13:
                caml_bytes_unsafe_set(s$0,n[1],92);
                n[1]++;
                caml_bytes_unsafe_set(s$0,n[1],114);
                break;
               default:switch$2 = 1}
          switch(switch$2)
           {case 1:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             var _A$_=chr(48 + (c / 100 | 0) | 0);
             caml_bytes_unsafe_set(s$0,n[1],_A$_);
             n[1]++;
             var _Ba_=chr(48 + ((c / 10 | 0) % 10 | 0) | 0);
             caml_bytes_unsafe_set(s$0,n[1],_Ba_);
             n[1]++;
             var _Bb_=chr(48 + (c % 10 | 0) | 0);
             caml_bytes_unsafe_set(s$0,n[1],_Bb_);
             break;
            case 2:
             caml_bytes_unsafe_set(s$0,n[1],92);
             n[1]++;
             caml_bytes_unsafe_set(s$0,n[1],c);
             break;
            case 3:caml_bytes_unsafe_set(s$0,n[1],c);break
            }
          n[1]++;
          var _A__=i + 1 | 0;
          if(_A9_ !== i){var i=_A__;continue}
          break}}
      return caml_string_of_bytes(s$0)}
    function esc_str(str)
     {var
       src=escaped$0(str),
       len=caml_ml_string_length(src),
       dst=caml_create_bytes(len + 2 | 0);
      blit_string(src,0,dst,1,len);
      caml_bytes_unsafe_set(dst,0,34);
      caml_bytes_unsafe_set(dst,len + 1 | 0,34);
      return caml_string_of_bytes(dst)}
    function index_of_newline(str,start)
     {try
       {var _A4_=[0,index_from(str,start,10)];return _A4_}
      catch(_A5_)
       {_A5_ = caml_wrap_exception(_A5_);
        if(_A5_ === Not_found)return 0;
        throw _A5_}}
    function pp_hum_indent(indent,ppf,param)
     {if(0 === param[0])
       {var str=param[1];
        if(must_escape(str))
         {var match=index_of_newline(str,0);
          if(match)
           var
            index=match[1],
            _A2_=(index + 1 | 0) === caml_ml_string_length(str)?1:0;
          else
           var _A2_=1;
          if(_A2_)return pp_print_string(ppf,esc_str(str));
          pp_open_box(ppf,0);
          pp_print_string(ppf,_f3_);
          var index$0=0;
          for(;;)
           {var end_pos_opt=index_of_newline(str,index$0);
            if(end_pos_opt)
             var end_pos=end_pos_opt[1],end_pos$0=end_pos;
            else
             var end_pos$0=caml_ml_string_length(str);
            var next_line=sub$0(str,index$0,end_pos$0 - index$0 | 0);
            pp_print_string(ppf,escaped$0(next_line));
            if(end_pos_opt)
             {var newline_index=end_pos_opt[1];
              pp_print_string(ppf,_f1_);
              pp_force_newline(ppf,0);
              pp_print_string(ppf,_f2_);
              var index$1=newline_index + 1 | 0,index$0=index$1;
              continue}
            pp_print_string(ppf,_f4_);
            return pp_close_box(ppf,0)}}
        return pp_print_string(ppf,str)}
      var _A3_=param[1];
      if(_A3_)
       {var t=_A3_[2],h=_A3_[1];
        pp_open_box(ppf,indent);
        pp_print_string(ppf,_f5_);
        pp_hum_indent(indent,ppf,h);
        var param$0=t;
        for(;;)
         {if(param$0)
           {var param$1=param$0[2],h$0=param$0[1];
            pp_print_space(ppf,0);
            pp_hum_indent(indent,ppf,h$0);
            var param$0=param$1;
            continue}
          pp_print_string(ppf,_f7_);
          return pp_close_box(ppf,0)}}
      return pp_print_string(ppf,_f6_)}
    function to_string_hum(indent$0,sexp)
     {if(0 === sexp[0])
       {var str=sexp[1],match=index_of_newline(str,0),_AZ_=match?0:1;
        if(_AZ_)return must_escape(str)?esc_str(str):str}
      var buf=create$0(1024);
      if(indent$0)var sth=indent$0[1],indent=sth;else var indent=_f0_;
      var ppf=formatter_of_buffer(buf);
      function _AY_(_A0_,_A1_){return pp_hum_indent(indent,_A0_,_A1_)}
      caml_call3(fprintf$0(ppf),_f8_,_AY_,sexp);
      return contents(buf)}
    function message(name,fields)
     {function conv_fields(param)
       {if(param)
         {var rest=param[2],match=param[1],fsexp=match[2],fname=match[1];
          return caml_string_notequal(fname,_f9_)
                  ?[0,[1,[0,[0,fname],[0,fsexp,0]]],conv_fields(rest)]
                  :[0,fsexp,conv_fields(rest)]}
        return 0}
      return [1,[0,[0,name],conv_fields(fields)]]}
    var t_sexp_grammar=4,int_sexp_grammar=2,int64_sexp_grammar=2;
    function sexp_of_t$0(param){return _f__}
    function sexp_of_t$1(str){return [0,str]}
    function sexp_of_t$2(c){return [0,make$0(1,c)]}
    function sexp_of_t$3(n){return [0,caml_string_of_jsbytes("" + n)]}
    function sexp_of_t$4(n){return [0,int64_to_string(n)]}
    function sexp_of_option(sexp_of_a,param)
     {if(param){var x=param[1];return [1,[0,caml_call1(sexp_of_a,x),0]]}
      return _f$_}
    function sexp_of_t$5(f,param$1)
     {var accu=0,param=param$1;
      for(;;)
       {if(param)
         {var
           param$0=param[2],
           a=param[1],
           accu$0=[0,caml_call1(f,a),accu],
           accu=accu$0,
           param=param$0;
          continue}
        return [1,rev(accu)]}}
    var
     compare$4=caml_compare,
     Int=[0,compare$4],
     Exn_ids=___(Int),
     exn_id_map=[0,Exn_ids[1]];
    function clean_up_handler(slot)
     {for(;;)
       {var
         id$0=id(slot),
         old_exn_id_map=exn_id_map[1],
         new_exn_id_map=caml_call2(Exn_ids[7],id$0,old_exn_id_map);
        if(exn_id_map[1] !== old_exn_id_map)continue;
        exn_id_map[1] = new_exn_id_map;
        return 0}}
    function add$1(opt,_AX_,k,sexp_of_exn)
     {if(opt)var sth=opt[1],printexc=sth;else var printexc=1;
      if(_AX_)var sth$0=_AX_[1],finalise=sth$0;else var finalise=1;
      var id$0=id(k);
      for(;;)
       {var old_exn_id_map=exn_id_map[1];
        if(1 - (1 <= max_ephe_length?1:0))invalid_arg(_G_);
        var ephe=caml_ephe_create(1);
        caml_ephe_set_data(ephe,[0,sexp_of_exn,printexc]);
        if(1 - (0 < (ephe.length - 1 - 2 | 0)?1:0))invalid_arg(msg);
        caml_ephe_set_key(ephe,0,k);
        var new_exn_id_map=caml_call3(Exn_ids[4],id$0,ephe,old_exn_id_map);
        if(exn_id_map[1] !== old_exn_id_map)continue;
        exn_id_map[1] = new_exn_id_map;
        return finalise?caml_final_register(clean_up_handler,k):finalise}}
    function find_auto(for_printexc,exn)
     {var id$0=id(of_val(exn));
      try
       {var ephe=caml_call2(Exn_ids[28],id$0,exn_id_map[1])}
      catch(_AW_)
       {_AW_ = caml_wrap_exception(_AW_);
        if(_AW_ === Not_found)return 0;
        throw _AW_}
      var match=caml_ephe_get_data(ephe);
      if(match)
       {var match$0=match[1],printexc=match$0[2],sexp_of_exn=match$0[1];
        if(for_printexc && ! printexc)return 0;
        return [0,caml_call1(sexp_of_exn,exn)]}
      return 0}
    function sexp_of_exn_opt(exn){return find_auto(0,exn)}
    function sexp_of_exn(exn)
     {var match=sexp_of_exn_opt(exn);
      if(match){var sexp=match[1];return sexp}
      return [1,[0,[0,to_string$1(exn)],0]]}
    function exn_to_string(e){return to_string_hum(0,sexp_of_exn(e))}
    register_printer
     (function(exn)
       {var match=find_auto(1,exn);
        if(match){var sexp=match[1];return [0,to_string_hum(_ga_,sexp)]}
        return 0});
    function of_sexp_error_exn(exc,sexp){throw [0,Of_sexp_error,exc,sexp]}
    function of_sexp_error(what,sexp)
     {throw [0,Of_sexp_error,[0,Failure,what],sexp]}
    function t_of_sexp(sexp)
     {if(1 === sexp[0] && ! sexp[1])return 0;return of_sexp_error(_gc_,sexp)}
    function t_of_sexp$0(sexp)
     {if(0 === sexp[0])
       {var str=sexp[1];
        if(1 !== caml_ml_string_length(str))of_sexp_error(_ge_,sexp);
        return caml_string_get(str,0)}
      return of_sexp_error(_gf_,sexp)}
    function int_of_sexp(sexp)
     {if(0 === sexp[0])
       {var str=sexp[1];
        try
         {var _AV_=caml_int_of_string(str);return _AV_}
        catch(exc)
         {exc = caml_wrap_exception(exc);
          return of_sexp_error(symbol(_gg_,exn_to_string(exc)),sexp)}}
      return of_sexp_error(_gh_,sexp)}
    function int64_of_sexp(sexp)
     {if(0 === sexp[0])
       {var str=sexp[1];
        try
         {var _AU_=caml_int64_of_string(str);return _AU_}
        catch(exc)
         {exc = caml_wrap_exception(exc);
          return of_sexp_error(symbol(_gi_,exn_to_string(exc)),sexp)}}
      return of_sexp_error(_gj_,sexp)}
    function get_flc_error(name,param)
     {var chr=param[3],line=param[2],file=param[1];
      return [0,caml_call4(sprintf(_gk_),name,file,line,chr)]}
    var
     _gl_=0,
     _go_=
      [0,
       [0,
        Break,
        function(param)
         {if(param === Break)return _gm_;throw [0,Assert_failure,_gn_]}],
       _gl_],
     _gr_=
      [0,
       [0,
        Error,
        function(param)
         {if(param[1] === Error)
           {var arg=param[2];return [1,[0,_gp_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_gq_]}],
       _go_],
     _gu_=
      [0,
       [0,
        Failure$0,
        function(param)
         {if(param === Failure$0)return _gs_;throw [0,Assert_failure,_gt_]}],
       _gr_],
     _gx_=
      [0,
       [0,
        Empty,
        function(param)
         {if(param === Empty)return _gv_;throw [0,Assert_failure,_gw_]}],
       _gu_],
     _gA_=
      [0,
       [0,
        Scan_failure,
        function(param)
         {if(param[1] === Scan_failure)
           {var arg=param[2];return [1,[0,_gy_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_gz_]}],
       _gx_],
     _gD_=
      [0,
       [0,
        Empty$0,
        function(param)
         {if(param === Empty$0)return _gB_;throw [0,Assert_failure,_gC_]}],
       _gA_],
     _gG_=
      [0,
       [0,
        Parse_error,
        function(param)
         {if(param === Parse_error)return _gE_;throw [0,Assert_failure,_gF_]}],
       _gD_],
     _gJ_=
      [0,
       [0,
        Undefined,
        function(param)
         {if(param === Undefined)return _gH_;throw [0,Assert_failure,_gI_]}],
       _gG_],
     _gM_=
      [0,
       [0,
        Bad,
        function(param)
         {if(param[1] === Bad)
           {var arg=param[2];return [1,[0,_gK_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_gL_]}],
       _gJ_],
     _gP_=
      [0,
       [0,
        Help,
        function(param)
         {if(param[1] === Help)
           {var arg=param[2];return [1,[0,_gN_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_gO_]}],
       _gM_],
     _gS_=
      [0,
       [0,
        Sys_error,
        function(param)
         {if(param[1] === Sys_error)
           {var arg=param[2];return [1,[0,_gQ_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_gR_]}],
       _gP_],
     _gV_=
      [0,
       [0,
        Not_found_s,
        function(param)
         {if(param[1] === Not_found_s)
           {var arg=param[2];return [1,[0,_gT_,[0,arg,0]]]}
          throw [0,Assert_failure,_gU_]}],
       _gS_],
     _gY_=
      [0,
       [0,
        Match_failure,
        function(param)
         {if(param[1] === Match_failure)
           {var arg=param[2];return get_flc_error(_gW_,arg)}
          throw [0,Assert_failure,_gX_]}],
       _gV_],
     _g1_=
      [0,
       [0,
        Invalid_argument,
        function(param)
         {if(param[1] === Invalid_argument)
           {var arg=param[2];return [1,[0,_gZ_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_g0_]}],
       _gY_],
     _g4_=
      [0,
       [0,
        Not_found,
        function(param)
         {if(param === Not_found)return _g2_;throw [0,Assert_failure,_g3_]}],
       _g1_],
     _g7_=
      [0,
       [0,
        Failure,
        function(param)
         {if(param[1] === Failure)
           {var arg=param[2];return [1,[0,_g5_,[0,[0,arg],0]]]}
          throw [0,Assert_failure,_g6_]}],
       _g4_],
     _g__=
      [0,
       [0,
        End_of_file,
        function(param)
         {if(param === End_of_file)return _g8_;throw [0,Assert_failure,_g9_]}],
       _g7_],
     _hb_=
      [0,
       [0,
        Exit,
        function(param)
         {if(param === Exit)return _g$_;throw [0,Assert_failure,_ha_]}],
       _g__],
     _he_=
      [0,
       [0,
        Assert_failure,
        function(param)
         {if(param[1] === Assert_failure)
           {var arg=param[2];return get_flc_error(_hc_,arg)}
          throw [0,Assert_failure,_hd_]}],
       _hb_];
    iter
     (function(param)
       {var handler=param[2],extension_constructor=param[1];
        return add$1(_hg_,_hf_,extension_constructor,handler)},
      _he_);
    var
     _hh_=0,
     _hk_=
      [0,
       [0,
        Of_sexp_error,
        function(param)
         {if(param[1] === Of_sexp_error)
           {var sexp=param[3],exc=param[2];
            return [1,[0,_hi_,[0,sexp_of_exn(exc),[0,sexp,0]]]]}
          throw [0,Assert_failure,_hj_]}],
       _hh_];
    iter
     (function(param)
       {var handler=param[2],extension_constructor=param[1];
        return add$1(_hm_,_hl_,extension_constructor,handler)},
      _hk_);
    function stag_no_args(loc,sexp)
     {return of_sexp_error(symbol(loc,_hn_),sexp)}
    var ascending=caml_int_compare;
    function descending(x,y){return caml_int_compare(y,x)}
    function max$1(x,y){return y <= x?x:y}
    function min$1(x,y){return x <= y?x:y}
    var ascending$0=caml_compare;
    function descending$0(x,y){return caml_compare(y,x)}
    function max$2(x,y){return caml_greaterequal(x,y)?x:y}
    function min$2(x,y){return caml_lessequal(x,y)?x:y}
    var
     symbol$0=caml_lessthan,
     symbol$1=caml_lessequal,
     symbol$2=caml_notequal,
     symbol$3=caml_equal,
     symbol$4=caml_greaterthan,
     symbol$5=caml_greaterequal;
    function char_equal(x,y){return x === y?1:0}
    function neg(_AT_){return - _AT_ | 0}
    function decr(_AS_){_AS_[1] += -1;return 0}
    function incr(_AR_){_AR_[1]++;return 0}
    var am_testing=Base_am_testing(0);
    function failwithf(fmt)
     {return ksprintf(function(s,param){return k(s)},fmt)}
    function invalid_argf(fmt)
     {return ksprintf(function(s,param){return invalid_arg(s)},fmt)}
    caml_sys_argv(0);
    function getenv(var$0)
     {try
       {var x=caml_sys_getenv(var$0)}
      catch(_AQ_)
       {_AQ_ = caml_wrap_exception(_AQ_);
        if(_AQ_ === Not_found)return 0;
        throw _AQ_}
      return [0,x]}
    function map$3(t,f){return map$2(f,t)}
    function func(_AP_){return _AP_}
    function unsafe_of_int(_AO_){return _AO_}
    function rev$0(res)
     {if(res)
       {var _AN_=res[2];
        if(_AN_)
         {var rest=_AN_[2],y=_AN_[1],x=res[1];
          return rev_append(rest,[0,y,[0,x,0]])}}
      return res}
    function Folding(Hash)
     {function hash_fold_unit(s,param){return s}
      var
       hash_fold_int=Hash[2],
       hash_fold_int64=Hash[3],
       hash_fold_float=Hash[4],
       hash_fold_string=Hash[5];
      function as_int(f,s,x)
       {return caml_call2(hash_fold_int,s,caml_call1(f,x))}
      function _Ak_(_AM_){return _AM_}
      function hash_fold_int32(_AK_,_AL_){return as_int(_Ak_,_AK_,_AL_)}
      function hash_fold_char(_AI_,_AJ_){return as_int(func,_AI_,_AJ_)}
      function _Al_(param){return param?1:0}
      function hash_fold_bool(_AG_,_AH_){return as_int(_Al_,_AG_,_AH_)}
      function hash_fold_nativeint(s,x)
       {return caml_call2(hash_fold_int64,s,caml_int64_of_int32(x))}
      function hash_fold_option(hash_fold_elem,s,param)
       {if(param)
         {var x=param[1];
          return caml_call2(hash_fold_elem,caml_call2(hash_fold_int,s,1),x)}
        return caml_call2(hash_fold_int,s,0)}
      function hash_fold_list(hash_fold_elem,s$1,list$1)
       {var
         s$2=caml_call2(hash_fold_int,s$1,length(list$1)),
         s=s$2,
         list=list$1;
        for(;;)
         {if(list)
           {var
             list$0=list[2],
             x=list[1],
             s$0=caml_call2(hash_fold_elem,s,x),
             s=s$0,
             list=list$0;
            continue}
          return s}}
      function hash_fold_lazy_t(hash_fold_elem,s,x)
       {var
         _AE_=caml_obj_tag(x),
         _AF_=250 === _AE_?x[1]:246 === _AE_?force_lazy_block(x):x;
        return caml_call2(hash_fold_elem,s,_AF_)}
      function hash_fold_ref_frozen(hash_fold_elem,s,x)
       {return caml_call2(hash_fold_elem,s,x[1])}
      function hash_fold_array_frozen(hash_fold_elem,s$1,array)
       {var s$2=caml_call2(hash_fold_int,s$1,array.length - 1),s=s$2,i=0;
        for(;;)
         {if(i === array.length - 1)return s;
          var
           e=array[1 + i],
           i$0=i + 1 | 0,
           s$0=caml_call2(hash_fold_elem,s,e),
           s=s$0,
           i=i$0;
          continue}}
      function hash_nativeint(x)
       {var
         _AC_=caml_call1(Hash[6],0),
         _AD_=hash_fold_nativeint(caml_call2(Hash[7],0,_AC_),x);
        return caml_call1(Hash[8],_AD_)}
      function hash_int64(x)
       {var
         _AA_=caml_call1(Hash[6],0),
         _AB_=caml_call2(hash_fold_int64,caml_call2(Hash[7],0,_AA_),x);
        return caml_call1(Hash[8],_AB_)}
      function hash_int32(x)
       {var
         _Ay_=caml_call1(Hash[6],0),
         _Az_=hash_fold_int32(caml_call2(Hash[7],0,_Ay_),x);
        return caml_call1(Hash[8],_Az_)}
      function hash_char(x)
       {var
         _Aw_=caml_call1(Hash[6],0),
         _Ax_=hash_fold_char(caml_call2(Hash[7],0,_Aw_),x);
        return caml_call1(Hash[8],_Ax_)}
      function hash_int(x)
       {var
         _Au_=caml_call1(Hash[6],0),
         _Av_=caml_call2(hash_fold_int,caml_call2(Hash[7],0,_Au_),x);
        return caml_call1(Hash[8],_Av_)}
      function hash_bool(x)
       {var
         _As_=caml_call1(Hash[6],0),
         _At_=hash_fold_bool(caml_call2(Hash[7],0,_As_),x);
        return caml_call1(Hash[8],_At_)}
      function hash_string(x)
       {var
         _Aq_=caml_call1(Hash[6],0),
         _Ar_=caml_call2(hash_fold_string,caml_call2(Hash[7],0,_Aq_),x);
        return caml_call1(Hash[8],_Ar_)}
      function hash_float(x)
       {var
         _Ao_=caml_call1(Hash[6],0),
         _Ap_=caml_call2(hash_fold_float,caml_call2(Hash[7],0,_Ao_),x);
        return caml_call1(Hash[8],_Ap_)}
      function hash_unit(x)
       {var _Am_=caml_call1(Hash[6],0),_An_=caml_call2(Hash[7],0,_Am_);
        return caml_call1(Hash[8],_An_)}
      return [0,
              hash_fold_nativeint,
              hash_fold_int64,
              hash_fold_int32,
              hash_fold_char,
              hash_fold_int,
              hash_fold_bool,
              hash_fold_string,
              hash_fold_float,
              hash_fold_unit,
              hash_fold_option,
              hash_fold_list,
              hash_fold_lazy_t,
              hash_fold_ref_frozen,
              hash_fold_array_frozen,
              hash_nativeint,
              hash_int64,
              hash_int32,
              hash_char,
              hash_int,
              hash_bool,
              hash_string,
              hash_float,
              hash_unit]}
    function alloc(param){return 0}
    function reset$0(opt,t)
     {if(opt)var sth=opt[1],seed=sth;else var seed=0;return seed}
    var compare_state=caml_int_compare;
    function state_to_string(state){return caml_string_of_jsbytes("" + state)}
    var
     For_tests=[0,compare_state,state_to_string],
     _hr_=Base_internalhash_get_hash_value;
    function _hs_(_Aj_,_Ai_){return Base_internalhash_fold_string(_Aj_,_Ai_)}
    function _ht_(_Ah_,_Ag_){return Base_internalhash_fold_float(_Ah_,_Ag_)}
    function _hu_(_Af_,_Ae_){return Base_internalhash_fold_int64(_Af_,_Ae_)}
    var
     Folding$0=
      Folding
       ([0,
         description,
         function(_Ad_,_Ac_){return Base_internalhash_fold_int(_Ad_,_Ac_)},
         _hu_,
         _ht_,
         _hs_,
         alloc,
         reset$0,
         _hr_,
         For_tests]),
     hash_fold_t=Folding$0[2],
     hash_fold_t$0=Folding$0[4],
     hash_fold_t$1=Folding$0[5],
     hash_fold_t$2=Folding$0[7],
     hash_fold_t$3=Folding$0[9],
     hash_fold_list=Folding$0[11];
    function func$0(t)
     {var
       t$0=(t ^ -1) + (t << 21) | 0,
       t$1=t$0 ^ (t$0 >>> 24 | 0),
       t$2=(t$1 + (t$1 << 3) | 0) + (t$1 << 8) | 0,
       t$3=t$2 ^ (t$2 >>> 14 | 0),
       t$4=(t$3 + (t$3 << 2) | 0) + (t$3 << 4) | 0,
       t$5=t$4 ^ (t$4 >>> 28 | 0);
      return t$5 + (t$5 << 31) | 0}
    var compare$5=caml_int_compare,compare$6=caml_int_compare;
    function compare$7(_Ab_,_Aa_){return caml_int64_compare(_Ab_,_Aa_)}
    function compare_elt(a_001,match)
     {if(a_001 === match)return 0;
      if(0 === a_001[0])
       {var _z__=a_001[1];
        if(0 === match[0])
         {var b_004=match[1];return caml_string_compare(_z__,b_004)}
        return -1}
      var _z$_=a_001[1];
      if(0 === match[0])return 1;
      var b_006=match[1],a=_z$_,b=b_006;
      for(;;)
       {if(a)
         {if(b)
           {var ys=b[2],y=b[1],xs=a[2],x=a[1],res=compare_elt(x,y);
            if(0 === res){var a=xs,b=ys;continue}
            return res}
          return 1}
        return b?-1:0}}
    var
     hash_fold_t$4=function _z9_(_z7_,_z8_){return _z9_.fun(_z7_,_z8_)},
     hash=function _z6_(_z5_){return _z6_.fun(_z5_)};
    caml_update_dummy
     (hash_fold_t$4,
      function(hsv,arg)
       {if(0 === arg[0])
         {var a0=arg[1],hsv$0=Base_internalhash_fold_int(hsv,0);
          return caml_call2(hash_fold_t$2,hsv$0,a0)}
        var a0$0=arg[1],hsv$1=Base_internalhash_fold_int(hsv,1);
        return caml_call3(hash_fold_list,hash_fold_t$4,hsv$1,a0$0)});
    caml_update_dummy
     (hash,
      function(x)
       {var hsv=reset$0(0,0);
        return Base_internalhash_get_hash_value
                (caml_call2(hash_fold_t$4,hsv,x))});
    function num_bits(param){return param?64:32}
    var r=[0,_hv_],word_size=0;
    function Register_pp(M)
     {var pp=M[1],module_name=M[2],p=symbol(M[2],_hw_);
      r[1] = [0,p,r[1]];
      return [0,pp,module_name]}
    function _hx_(_z4_){return [0,Register_pp(_z4_)[1]]}
    function _hy_(M)
     {var module_name=M[1];
      function pp(formatter,t)
       {return pp_print_string(formatter,caml_call1(M[2],t))}
      return [0,Register_pp([0,pp,module_name])[1]]}
    var Finally=[248,_hz_,caml_fresh_oo_id(0)];
    add$1
     (0,
      0,
      Finally,
      function(param)
       {if(param[1] === Finally)
         {var
           arg1_002=param[3],
           arg0_001=param[2],
           res0_003=sexp_of_exn(arg0_001),
           res1_004=sexp_of_exn(arg1_002);
          return [1,[0,_hA_,[0,res0_003,[0,res1_004,0]]]]}
        throw [0,Assert_failure,_hB_]});
    var Reraised=[248,_hC_,caml_fresh_oo_id(0)];
    add$1
     (0,
      0,
      Reraised,
      function(param)
       {if(param[1] === Reraised)
         {var
           arg1_006=param[3],
           arg0_005=param[2],
           res0_007=[0,arg0_005],
           res1_008=sexp_of_exn(arg1_006);
          return [1,[0,_hD_,[0,res0_007,[0,res1_008,0]]]]}
        throw [0,Assert_failure,_hE_]});
    var Sexp=[248,_hF_,caml_fresh_oo_id(0)];
    add$1
     (0,
      0,
      Sexp,
      function(param)
       {if(param[1] === Sexp){var t=param[2];return t}
        throw [0,Assert_failure,_hG_]});
    function pp(ppf,t)
     {var match=sexp_of_exn_opt(t);
      if(match){var sexp=match[1];return pp_hum_indent(_f0_,ppf,sexp)}
      return pp_print_string(ppf,to_string$1(t))}
    _hx_([0,pp,module_name]);
    function Make(M)
     {var bind=M[1],return$0=M[2],map$0=M[3];
      function map_via_bind(ma,f)
       {return caml_call2
                (bind,
                 ma,
                 function(a){return caml_call1(return$0,caml_call1(f,a))})}
      if(typeof map$0 === "number")
       var map=map_via_bind;
      else
       var x=map$0[2],map=x;
      function symbol_bind(t,f){return caml_call2(bind,t,f)}
      function symbol_map(t,f){return caml_call2(map,t,f)}
      var
       Monad_infix=[0,symbol_bind,symbol_map],
       symbol_bind$0=Monad_infix[1],
       symbol_map$0=Monad_infix[2],
       symbol_bind$1=Monad_infix[1],
       symbol_map$1=Monad_infix[2];
      function both(a,b)
       {return caml_call2
                (symbol_bind$1,
                 a,
                 function(a)
                  {return caml_call2
                           (symbol_map$1,b,function(b){return [0,a,b]})})}
      var
       Open_on_rhs=[0],
       Let_syntax=[0,return$0,bind,map,both,Open_on_rhs],
       Let_syntax$0=[0,return$0,symbol_bind$1,symbol_map$1,Let_syntax];
      function join(t)
       {return caml_call2(symbol_bind$0,t,function(t){return t})}
      function ignore_m(t){return caml_call2(map,t,function(param){return 0})}
      function loop(vs,param)
       {if(param)
         {var ts=param[2],t=param[1];
          return caml_call2
                  (symbol_bind$0,t,function(v){return loop([0,v,vs],ts)})}
        return caml_call1(return$0,rev$0(vs))}
      function all(ts){return loop(0,ts)}
      function all_unit(param)
       {if(param)
         {var ts=param[2],t=param[1];
          return caml_call2
                  (symbol_bind$0,t,function(param){return all_unit(ts)})}
        return caml_call1(return$0,0)}
      return [0,
              symbol_bind$0,
              symbol_map$0,
              Monad_infix,
              bind,
              return$0,
              map,
              join,
              ignore_m,
              all,
              all_unit,
              Let_syntax$0]}
    function _hH_(M){var comparator=[0,M[1],M[2]];return [0,comparator]}
    function arg(opt,l)
     {if(opt)var sth=opt[1],sep=sth;else var sep=_hJ_;
      if(l){if(l[2])return concat(sep,l);var x=l[1];return x}
      return _hI_}
    function sexp_of_t$6(t)
     {var pos_cnum=t[4],pos_bol=t[3],pos_lnum=t[2],pos_fname=t[1];
      return [0,
              arg
               (0,
                [0,
                 pos_fname,
                 [0,
                  _hL_,
                  [0,
                   caml_string_of_jsbytes("" + pos_lnum),
                   [0,
                    _hK_,
                    [0,caml_string_of_jsbytes("" + (pos_cnum - pos_bol | 0)),0]]]]])]}
    if(am_testing)
     {var t=get_state(0);init$0(137);var _hQ_=from_val(t)}
    else
     var
      _hQ_=
       [246,
        function(param)
         {if(am_testing)k(_hP_);
          var _z2_=from_val(make_self_init(0)),_z3_=caml_obj_tag(_z2_);
          return 250 === _z3_?_z2_[1]:246 === _z3_?force_lazy_block(_z2_):_z2_}];
    function set_state$0(t2)
     {var
       _zY_=caml_obj_tag(_hQ_),
       _zZ_=250 === _zY_?_hQ_[1]:246 === _zY_?force_lazy_block(_hQ_):_hQ_,
       _z0_=caml_obj_tag(t2),
       _z1_=250 === _z0_?t2[1]:246 === _z0_?force_lazy_block(t2):t2;
      blit$0(_z1_[1],0,_zZ_[1],0,_zZ_[1].length - 1);
      _zZ_[2] = _z1_[2];
      return 0}
    function count_map(f,l,ctr)
     {if(l)
       {var _zP_=l[2],_zQ_=l[1];
        if(_zP_)
         {var _zR_=_zP_[2],_zS_=_zP_[1];
          if(_zR_)
           {var _zT_=_zR_[2],_zU_=_zR_[1];
            if(_zT_)
             {var _zV_=_zT_[2],_zW_=_zT_[1];
              if(_zV_)
               {var
                 tl=_zV_[2],
                 x5$0=_zV_[1],
                 f1=caml_call1(f,_zQ_),
                 f2=caml_call1(f,_zS_),
                 f3=caml_call1(f,_zU_),
                 f4=caml_call1(f,_zW_),
                 f5=caml_call1(f,x5$0);
                if(50 < ctr)
                 {var bs=0,xs=tl;
                  for(;;)
                   {if(xs)
                     {var _zH_=xs[2];
                      if(_zH_)
                       {var _zI_=_zH_[2];
                        if(_zI_)
                         {var _zJ_=_zI_[2];
                          if(_zJ_)
                           {var _zK_=_zJ_[2];
                            if(_zK_)
                             {var _zL_=_zK_[2];
                              if(_zL_)
                               {var _zM_=_zL_[2];
                                if(_zM_)
                                 {var _zN_=_zM_[2];
                                  if(_zN_)
                                   {var _zO_=_zN_[2];
                                    if(_zO_)
                                     {var
                                       xs$0=_zO_[2],
                                       x8=_zO_[1],
                                       x7=_zN_[1],
                                       x6=_zM_[1],
                                       x5=_zL_[1],
                                       x4=_zK_[1],
                                       x3=_zJ_[1],
                                       x2=_zI_[1],
                                       x1=_zH_[1],
                                       x0=xs[1],
                                       y0$0=caml_call1(f,x0),
                                       y1$0=caml_call1(f,x1),
                                       y2$0=caml_call1(f,x2),
                                       y3$0=caml_call1(f,x3),
                                       y4$0=caml_call1(f,x4),
                                       y5$0=caml_call1(f,x5),
                                       y6$0=caml_call1(f,x6),
                                       y7$0=caml_call1(f,x7),
                                       y8$0=caml_call1(f,x8),
                                       bs$0=[0,[0,y0$0,y1$0,y2$0,y3$0,y4$0,y5$0,y6$0,y7$0,y8$0],bs],
                                       bs=bs$0,
                                       xs=xs$0;
                                      continue}}}}}}}}}
                    var ys=map$0(f,xs),ys$0=ys,param=bs;
                    for(;;)
                     {if(param)
                       {var
                         param$0=param[2],
                         match=param[1],
                         y8=match[9],
                         y7=match[8],
                         y6=match[7],
                         y5=match[6],
                         y4=match[5],
                         y3=match[4],
                         y2=match[3],
                         y1=match[2],
                         y0=match[1],
                         ys$1=
                          [0,
                           y0,
                           [0,y1,[0,y2,[0,y3,[0,y4,[0,y5,[0,y6,[0,y7,[0,y8,ys$0]]]]]]]]],
                         ys$0=ys$1,
                         param=param$0;
                        continue}
                      var _zX_=ys$0;
                      break}
                    break}}
                else
                 var _zX_=count_map(f,tl,ctr + 1 | 0);
                return [0,f1,[0,f2,[0,f3,[0,f4,[0,f5,_zX_]]]]]}
              var
               f1$0=caml_call1(f,_zQ_),
               f2$0=caml_call1(f,_zS_),
               f3$0=caml_call1(f,_zU_),
               f4$0=caml_call1(f,_zW_);
              return [0,f1$0,[0,f2$0,[0,f3$0,[0,f4$0,0]]]]}
            var
             f1$1=caml_call1(f,_zQ_),
             f2$1=caml_call1(f,_zS_),
             f3$1=caml_call1(f,_zU_);
            return [0,f1$1,[0,f2$1,[0,f3$1,0]]]}
          var f1$2=caml_call1(f,_zQ_),f2$2=caml_call1(f,_zS_);
          return [0,f1$2,[0,f2$2,0]]}
        var f1$3=caml_call1(f,_zQ_);
        return [0,f1$3,0]}
      return 0}
    var Transpose_got_lists_of_differe=[248,_hR_,caml_fresh_oo_id(0)];
    add$1
     (0,
      0,
      Transpose_got_lists_of_differe,
      function(param)
       {if(param[1] === Transpose_got_lists_of_differe)
         {var arg0_031=param[2],res0_032=sexp_of_t$5(sexp_of_t$3,arg0_031);
          return [1,[0,_hS_,[0,res0_032,0]]]}
        throw [0,Assert_failure,_hT_]});
    function sexp_of_t$7(param)
     {switch(param[0])
       {case 0:var arg0_001=param[1];return [1,[0,_hU_,[0,arg0_001,0]]];
        case 1:
         var arg0_003=param[1],res0_004=[0,arg0_003];
         return [1,[0,_hV_,[0,res0_004,0]]];
        case 2:
         var arg0_005=param[1],res0_006=sexp_of_exn(arg0_005);
         return [1,[0,_hW_,[0,res0_006,0]]];
        case 3:var arg0_007=param[1];return [1,[0,_hX_,[0,arg0_007,0]]];
        case 4:
         var
          arg2_011=param[3],
          arg1_010=param[2],
          arg0_009=param[1],
          res0_012=[0,arg0_009],
          res2_014=sexp_of_option(sexp_of_t$6,arg2_011);
         return [1,[0,_hY_,[0,res0_012,[0,arg1_010,[0,res2_014,0]]]]];
        case 5:
         var
          arg1_016=param[2],
          arg0_015=param[1],
          res0_017=[0,arg0_015],
          res1_018=sexp_of_t$7(arg1_016);
         return [1,[0,_hZ_,[0,res0_017,[0,res1_018,0]]]];
        case 6:
         var
          arg2_021=param[3],
          arg1_020=param[2],
          arg0_019=param[1],
          res0_022=[0,arg0_019],
          res2_024=sexp_of_t$7(arg2_021);
         return [1,[0,_h0_,[0,res0_022,[0,arg1_020,[0,res2_024,0]]]]];
        case 7:
         var
          arg1_026=param[2],
          arg0_025=param[1],
          res0_027=sexp_of_option(sexp_of_t$3,arg0_025),
          res1_028=sexp_of_t$5(sexp_of_t$7,arg1_026);
         return [1,[0,_h1_,[0,res0_027,[0,res1_028,0]]]];
        default:
         var
          arg1_030=param[2],
          arg0_029=param[1],
          res0_031=sexp_of_t$7(arg0_029),
          res1_032=[0,arg1_030];
         return [1,[0,_h2_,[0,res0_031,[0,res1_032,0]]]]}}
    function to_sexp_hum(t)
     {var sexps=to_sexps_hum(t,0);
      if(sexps && ! sexps[2]){var sexp=sexps[1];return sexp}
      return [1,sexps]}
    function to_sexps_hum(t,ac)
     {switch(t[0])
       {case 0:return [0,sexp_of_t$7(t),ac];
        case 1:var string=t[1];return [0,[0,string],ac];
        case 2:var exn=t[1];return [0,sexp_of_exn(exn),ac];
        case 3:var sexp=t[1];return [0,sexp,ac];
        case 4:
         var here=t[3],sexp$0=t[2],tag=t[1];
         if(here)
          var here$0=here[1],_zG_=[0,sexp_of_t$6(here$0),0];
         else
          var _zG_=0;
         return [0,[1,[0,[0,tag],[0,sexp$0,_zG_]]],ac];
        case 5:
         var t$0=t[2],tag$0=t[1];
         return [0,[1,[0,[0,tag$0],to_sexps_hum(t$0,0)]],ac];
        case 6:
         var
          t$1=t[3],
          sexp$1=t[2],
          tag$1=t[1],
          body=[0,sexp$1,to_sexps_hum(t$1,0)];
         return 0 === caml_ml_string_length(tag$1)
                 ?[0,[1,body],ac]
                 :[0,[1,[0,[0,tag$1],body]],ac];
        case 7:
         var
          ts=t[2],
          f=function(ac,t){return to_sexps_hum(t,ac)},
          t$2=rev$0(ts);
         return fold_left(f,ac,t$2);
        default:
         var backtrace=t[2],t$3=t[1];
         return [0,[1,[0,to_sexp_hum(t$3),[0,[0,backtrace],0]]],ac]}}
    function protect(f)
     {try
       {var _zF_=caml_call1(f,0);return _zF_}
      catch(exn){exn = caml_wrap_exception(exn);return [0,sexp_of_exn(exn)]}}
    function to_message(info)
     {return protect
              (function(param)
                {var _zE_=caml_obj_tag(info);
                 return 250 === _zE_
                         ?info[1]
                         :246 === _zE_?force_lazy_block(info):info})}
    function create_s(sexp){return from_val([3,sexp])}
    var Exn=[248,_h3_,caml_fresh_oo_id(0)];
    add$1
     (0,
      0,
      Exn,
      function(param)
       {if(param[1] === Exn){var t=param[2];return to_sexp_hum(to_message(t))}
        throw [0,Assert_failure,_h4_]});
    function pp$0(ppf,t)
     {var message=to_message(t);
      if(1 === message[0])
       var s=message[1],_zD_=s;
      else
       var _zD_=to_string_hum(0,to_sexp_hum(message));
      return pp_print_string(ppf,_zD_)}
    var include=_hx_([0,pp$0,module_name$0]),pp$1=include[1];
    function raise_s(sexp)
     {var t=create_s(sexp);
      if(caml_obj_tag(t) !== 246)
       {var
         _zA_=caml_obj_tag(t),
         _zB_=250 === _zA_?t[1]:246 === _zA_?force_lazy_block(t):t;
        if(2 === _zB_[0])var exn=_zB_[1],_zC_=exn;else var _zC_=[0,Exn,t]}
      else
       var _zC_=[0,Exn,t];
      throw _zC_}
    _hx_([0,pp$1,module_name$1]);
    function error_s(sexp){return [1,create_s(sexp)]}
    function t_of_sexp$1(sexp_004)
     {if(0 === sexp_004[0])
       {var _zw_=sexp_004[1],switch$0=0;
        if(caml_string_notequal(_zw_,_h5_))
         {var switch$1=0;
          if(caml_string_notequal(_zw_,_h6_))
           {var switch$2=0;
            if(caml_string_notequal(_zw_,_h7_))
             if(caml_string_notequal(_zw_,_h8_))
              if(caml_string_notequal(_zw_,_h9_))
               {if(caml_string_notequal(_zw_,_h__))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 1}
          if(! switch$1)return 2}
        if(! switch$0)return 0}
      else
       {var _zx_=sexp_004[1];
        if(! _zx_)return of_sexp_error(symbol(loc,_hp_),sexp_004);
        var _zy_=_zx_[1];
        if(0 !== _zy_[0])return of_sexp_error(symbol(loc,_ho_),sexp_004);
        var _zz_=_zy_[1],switch$3=0;
        if(caml_string_notequal(_zz_,_h$_))
         {var switch$4=0;
          if(caml_string_notequal(_zz_,_ia_))
           {var switch$5=0;
            if(caml_string_notequal(_zz_,_ib_))
             if(caml_string_notequal(_zz_,_ic_))
              if(caml_string_notequal(_zz_,_id_))
               {if(caml_string_notequal(_zz_,_ie_))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)return stag_no_args(loc,sexp_004)}
          if(! switch$4)return stag_no_args(loc,sexp_004)}
        if(! switch$3)return stag_no_args(loc,sexp_004)}
      return of_sexp_error(symbol(loc,_hq_),sexp_004)}
    function sexp_of_t$8(param)
     {switch(param){case 0:return _if_;case 1:return _ig_;default:return _ih_}}
    var compare$8=caml_int_compare;
    function hash_fold_t$5(hsv,arg)
     {switch(arg)
       {case 0:return Base_internalhash_fold_int(hsv,0);
        case 1:return Base_internalhash_fold_int(hsv,1);
        default:return Base_internalhash_fold_int(hsv,2)}}
    function of_string(s){return t_of_sexp$1([0,s])}
    function to_string$2(t)
     {var sexp=sexp_of_t$8(t);
      if(0 === sexp[0]){var str=sexp[1];return str}
      return of_sexp_error(_gd_,sexp)}
    function to_int(param)
     {switch(param){case 0:return -1;case 1:return 0;default:return 1}}
    function sign(n){return 0 <= n?0 === n?1:2:0}
    function geq(cmp,a,b){return 0 <= caml_call2(cmp,a,b)?1:0}
    function leq(cmp,a,b){return caml_call2(cmp,a,b) <= 0?1:0}
    function Make$0(T)
     {var
       sexp_of_t=T[2],
       include=_hH_(T),
       comparator=include[1],
       compare=comparator[1];
      function symbol(a,b){return 0 < caml_call2(compare,a,b)?1:0}
      function symbol$0(a,b){return caml_call2(compare,a,b) < 0?1:0}
      function symbol$1(a,b){return geq(compare,a,b)}
      function symbol$2(a,b){return leq(compare,a,b)}
      function equal(a,b){return 0 === caml_call2(compare,a,b)?1:0}
      function symbol$3(a,b){return 0 !== caml_call2(compare,a,b)?1:0}
      function min(t$0,t){return leq(compare,t$0,t)?t$0:t}
      function max(t$0,t){return geq(compare,t$0,t)?t$0:t}
      function descending(t$0,t){return caml_call2(compare,t,t$0)}
      function between(t,low,high)
       {var _zv_=symbol$2(low,t);return _zv_?symbol$2(t,high):_zv_}
      function clamp_unchecked(t,min,max)
       {return symbol$0(t,min)?min:symbol$2(t,max)?t:max}
      function clamp_exn(t,min,max)
       {if(symbol$2(min,max))return clamp_unchecked(t,min,max);
        throw [0,Assert_failure,_ii_]}
      function clamp(t,min,max)
       {if(symbol(min,max))
         {var _zu_=[0,[0,_ij_,caml_call1(sexp_of_t,max)],0];
          return error_s
                  (message(_il_,[0,[0,_ik_,caml_call1(sexp_of_t,min)],_zu_]))}
        return [0,clamp_unchecked(t,min,max)]}
      return [0,
              symbol$1,
              symbol$2,
              equal,
              symbol,
              symbol$0,
              symbol$3,
              equal,
              compare,
              min,
              max,
              compare,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator]}
    function _im_(_zr_)
     {var _zs_=_zr_[3],_zt_=_zr_[1];
      function is_positive(t){return 0 < caml_call2(_zt_,t,_zs_)?1:0}
      function is_non_negative(t){return 0 <= caml_call2(_zt_,t,_zs_)?1:0}
      function is_negative(t){return caml_call2(_zt_,t,_zs_) < 0?1:0}
      function is_non_positive(t){return caml_call2(_zt_,t,_zs_) <= 0?1:0}
      function sign$0(t){return sign(caml_call2(_zt_,t,_zs_))}
      return [0,
              is_positive,
              is_non_negative,
              is_negative,
              is_non_positive,
              sign$0]}
    function _in_(T)
     {var
       hash_fold_t=T[2],
       hash=T[3],
       t_of_sexp=T[4],
       sexp_of_t=T[5],
       of_string=T[6],
       to_string=T[7],
       _zq_=Make$0([0,T[1],T[5]]),
       symbol=_zq_[1],
       symbol$0=_zq_[2],
       symbol$1=_zq_[3],
       symbol$2=_zq_[4],
       symbol$3=_zq_[5],
       symbol$4=_zq_[6],
       equal=_zq_[7],
       compare=_zq_[8],
       min=_zq_[9],
       max=_zq_[10],
       ascending=_zq_[11],
       descending=_zq_[12],
       between=_zq_[13],
       clamp_exn=_zq_[14],
       clamp=_zq_[15],
       comparator=_zq_[16],
       include=_hy_([0,T[8],T[7]]),
       pp=include[1],
       hashable=[0,hash,compare,sexp_of_t];
      return [0,
              hash_fold_t,
              hash,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              pp,
              hashable]}
    function hash$0(x){return 0}
    function compare$9(param,_zp_){return 0}
    function of_string$0(param)
     {return caml_string_notequal(param,_io_)?k(_ip_):0}
    function to_string$3(param){return _iq_}
    _in_
     ([0,
       compare$9,
       hash_fold_t$3,
       hash$0,
       t_of_sexp,
       sexp_of_t$0,
       of_string$0,
       to_string$3,
       module_name$3]);
    function try_with(f)
     {try {var x=caml_call1(f,0)}catch(_zo_){return 0}return [0,x]}
    function _ir_(t,f){if(t){var a=t[1];return [0,caml_call1(f,a)]}return 0}
    function return$0(x){return [0,x]}
    var map$4=[0,-198771759,_ir_];
    function bind$0(o,f){if(o){var x=o[1];return caml_call1(f,x)}return 0}
    var symbol_bind=Make([0,bind$0,return$0,map$4])[1];
    function one_ulp(dir,t)
     {var
       match=
        t != t
         ?0
         :t == 0.
           ?_it_
           :0. < t
             ?[0,caml_int64_bits_of_float(t)]
             :[0,caml_int64_neg(caml_int64_bits_of_float(- t))];
      if(match)
       {var
         x=match[1],
         _zn_=759637122 <= dir?_iv_:_iw_,
         x$0=caml_int64_add(x,_zn_);
        return caml_greaterequal(x$0,_iu_)
                ?caml_int64_float_of_bits(x$0)
                :- caml_int64_float_of_bits(caml_int64_neg(x$0))}
      return nan}
    function upper_bound_for_int(num_bits)
     {var exp=num_bits - 1 | 0;return one_ulp(759637122,Math.pow(2.,exp))}
    function is_x_minus_one_exact(x)
     {return 1
             -
             caml_equal
              (caml_int64_bits_of_float(x),caml_int64_bits_of_float(x - 1.))}
    function lower_bound_for_int(num_bits)
     {var exp=num_bits - 1 | 0,min_int_as_float=- Math.pow(2.,exp);
      if(53 <= (num_bits - 1 | 0))
       {if(is_x_minus_one_exact(min_int_as_float))
         throw [0,Assert_failure,_ix_];
        return min_int_as_float}
      if(is_x_minus_one_exact(min_int_as_float))
       return one_ulp(19067,min_int_as_float - 1.);
      throw [0,Assert_failure,_iy_]}
    function hash$1(x){return x}
    function to_string$4(t){return make$0(1,t)}
    function of_string$1(s)
     {var match=caml_ml_string_length(s);
      return 1 === match?caml_string_get(s,0):caml_call2(failwithf(_iz_),s,0)}
    _in_
     ([0,
       compare$5,
       hash_fold_t$0,
       hash$1,
       t_of_sexp$0,
       sexp_of_t$2,
       of_string$1,
       to_string$4,
       module_name$4]);
    to_list(init(256,unsafe_of_int));
    function compare$10(c1,c2)
     {var _zm_=f(c2);return caml_int_compare(f(c1),_zm_)}
    var include$0=Make$0([0,compare$10,sexp_of_t$2]),equal$0=include$0[7];
    function sub$2(src,pos,len)
     {if(0 === pos && len === caml_ml_string_length(src))return src;
      var total_length=caml_ml_string_length(src),stop=pos + len | 0;
      if((pos | len | stop | total_length - stop | 0) < 0)
       {if(pos < 0)caml_call2(invalid_argf(_hM_),pos,0);
        if(len < 0)caml_call2(invalid_argf(_hN_),len,0);
        if((total_length - len | 0) < pos)
         caml_call4(invalid_argf(_hO_),pos,len,total_length,0)}
      if(0 === len)return _iA_;
      var dst=caml_create_bytes(len);
      caml_blit_string(src,pos,dst,0,len);
      return caml_string_of_bytes(dst)}
    function kmp_internal_loop
     (matched_chars,next_text_char,pattern,kmp_array,char_equal)
     {var matched_chars$0=[0,matched_chars];
      for(;;)
       {if
         (0
          <
          matched_chars$0[1]
          &&
          !
          caml_call2
           (char_equal,
            next_text_char,
            caml_string_unsafe_get(pattern,matched_chars$0[1])))
         {matched_chars$0[1] = kmp_array[1 + (matched_chars$0[1] - 1 | 0)];
          continue}
        if
         (caml_call2
           (char_equal,
            next_text_char,
            caml_string_unsafe_get(pattern,matched_chars$0[1])))
         matched_chars$0[1] = matched_chars$0[1] + 1 | 0;
        return matched_chars$0[1]}}
    function get_char_equal(case_sensitive)
     {return case_sensitive?char_equal:equal$0}
    function create$3(pattern,case_sensitive)
     {var n=caml_ml_string_length(pattern),kmp_array=caml_make_vect(n,-1);
      if(0 < n)
       {var char_equal=get_char_equal(case_sensitive);
        kmp_array[1] = 0;
        var matched_chars=[0,0],_zk_=n - 1 | 0,_zj_=1;
        if(! (_zk_ < 1))
         {var i=_zj_;
          for(;;)
           {matched_chars[1]
            =
            kmp_internal_loop
             (matched_chars[1],
              caml_string_unsafe_get(pattern,i),
              pattern,
              kmp_array,
              char_equal);
            kmp_array[1 + i] = matched_chars[1];
            var _zl_=i + 1 | 0;
            if(_zk_ !== i){var i=_zl_;continue}
            break}}}
      return [0,pattern,case_sensitive,kmp_array]}
    function index_internal(opt,param,text)
     {var kmp_array=param[3],case_sensitive=param[2],pattern=param[1];
      if(opt)var sth=opt[1],pos=sth;else var pos=0;
      if
       (0
        <=
        pos
        &&
        !
        ((caml_ml_string_length(text) - caml_ml_string_length(pattern) | 0)
         <
         pos))
       {var
         char_equal=get_char_equal(case_sensitive),
         j=[0,pos],
         matched_chars=[0,0],
         k=caml_ml_string_length(pattern),
         n=caml_ml_string_length(text);
        for(;;)
         {if(j[1] < n && matched_chars[1] < k)
           {var next_text_char=caml_string_unsafe_get(text,j[1]);
            matched_chars[1]
            =
            kmp_internal_loop
             (matched_chars[1],next_text_char,pattern,kmp_array,char_equal);
            j[1] = j[1] + 1 | 0;
            continue}
          return matched_chars[1] === k?j[1] - k | 0:-1}}
      return -1}
    var case_sensitive=1;
    function compare$11(string1,string2)
     {if(string1 === string2)return 0;
      var
       len2=caml_ml_string_length(string2),
       len1=caml_ml_string_length(string1),
       pos=0;
      for(;;)
       {if(pos === len1)return pos === len2?0:-1;
        if(pos === len2)return 1;
        var
         c2=caml_string_unsafe_get(string2,pos),
         c1=caml_string_unsafe_get(string1,pos),
         _zi_=f(c2),
         c=caml_int_compare(f(c1),_zi_);
        if(0 === c){var pos$0=pos + 1 | 0,pos=pos$0;continue}
        return c}}
    Make$0([0,compare$11,sexp_of_t$1]);
    function back_up_at_newline(t,pos,eol)
     {var switch$0=0;
      if(0 < pos[1] && caml_string_get(t,pos[1] - 1 | 0) === 13)
       {var _zh_=2;switch$0 = 1}
      if(! switch$0)var _zh_=1;
      pos[1] = pos[1] - _zh_ | 0;
      eol[1] = pos[1] + 1 | 0;
      return 0}
    function pp$2(fmt,t)
     {var _zg_=to_string$0(t);return caml_call2(fprintf$0(fmt),_iC_,_zg_)}
    _hx_([0,pp$2,module_name$5]);
    function convert_failure(x,a,b,to_string)
     {var _zf_=caml_call1(to_string,x);
      return caml_call4(failwithf(_iD_),a,b,_zf_,0)}
    var num_bits_nativeint=num_bits(word_size);
    function int_to_int32(x){return [0,x]}
    function int_to_int32_exn(x){return x}
    function int32_to_int_exn(x){return x}
    var
     int_to_int64=caml_int64_of_int32,
     min$3=caml_int64_of_int32(-2147483648),
     max$3=caml_int64_of_int32(2147483647);
    function int64_is_representable_as_int(x)
     {var
       _zd_=caml_int64_compare(min$3,x) <= 0?1:0,
       _ze_=_zd_?caml_int64_compare(x,max$3) <= 0?1:0:_zd_;
      return _ze_}
    function int64_to_int(x)
     {return int64_is_representable_as_int(x)?[0,caml_int64_to_int32(x)]:0}
    function int64_to_int_exn(x)
     {return int64_is_representable_as_int(x)
              ?caml_int64_to_int32(x)
              :convert_failure(x,_iF_,_iE_,int64_to_string)}
    if(32 <= num_bits_nativeint)
     {var
       int_to_nativeint=function(_zc_){return _zc_},
       _iI_=
        num_bits_nativeint <= 32
         ?function(param){return 1}
         :function(x)
           {var
             _za_=caml_int_compare(-2147483648,x) <= 0?1:0,
             _zb_=_za_?caml_int_compare(x,2147483647) <= 0?1:0:_za_;
            return _zb_},
       nativeint_to_int=function(x){return _iI_(x)?[0,x]:0},
       nativeint_to_int_exn=
        function(x)
         {return _iI_(x)?x:convert_failure(x,_iH_,_iG_,nativeint_to_string)},
       min$4=caml_int64_of_int32(-2147483648),
       max$4=caml_int64_of_int32(2147483647),
       int64_is_representable_as_int3=
        function(x)
         {var
           _y__=caml_int64_compare(min$4,x) <= 0?1:0,
           _y$_=_y__?caml_int64_compare(x,max$4) <= 0?1:0:_y__;
          return _y$_};
      if(32 <= num_bits_nativeint)
       {num_bits_nativeint <= 32;
        if(num_bits_nativeint <= 64)
         {if(64 <= num_bits_nativeint)
           var int64_is_representable_as_nati=function(param){return 1};
          else
           var
            min$6=caml_int64_of_int32(-2147483648),
            max$6=caml_int64_of_int32(2147483647),
            int64_is_representable_as_nati=
             function(x)
              {var
                _y8_=caml_int64_compare(min$6,x) <= 0?1:0,
                _y9_=_y8_?caml_int64_compare(x,max$6) <= 0?1:0:_y8_;
               return _y9_};
          var
           min$5=caml_int64_shift_right(min_int64,1),
           max$5=caml_int64_shift_right(max_int64,1),
           int64_is_representable_as_int6=
            function(x)
             {var
               _y6_=caml_int64_compare(min$5,x) <= 0?1:0,
               _y7_=_y6_?caml_int64_compare(x,max$5) <= 0?1:0:_y6_;
              return _y7_},
           insert_delimiter_every=
            function(input,delimiter,chars_per_delimiter)
             {var input_length=caml_ml_string_length(input);
              if(input_length <= chars_per_delimiter)return input;
              var match=caml_string_get(input,0),switch$0=0;
              if(43 !== match && 45 !== match){var has_sign=0;switch$0 = 1}
              if(! switch$0)var has_sign=1;
              var
               num_digits=has_sign?input_length - 1 | 0:input_length,
               num_delimiters=caml_div(num_digits - 1 | 0,chars_per_delimiter),
               output_length=input_length + num_delimiters | 0,
               output=caml_create_bytes(output_length),
               input_pos=[0,input_length - 1 | 0],
               output_pos=[0,output_length - 1 | 0],
               num_chars_until_delimiter=[0,chars_per_delimiter],
               first_digit_pos=has_sign?1:0;
              for(;;)
               {if(first_digit_pos <= input_pos[1])
                 {if(0 === num_chars_until_delimiter[1])
                   {caml_bytes_set(output,output_pos[1],delimiter);
                    decr(output_pos);
                    num_chars_until_delimiter[1] = chars_per_delimiter}
                  var _y5_=caml_string_get(input,input_pos[1]);
                  caml_bytes_set(output,output_pos[1],_y5_);
                  decr(input_pos);
                  decr(output_pos);
                  decr(num_chars_until_delimiter);
                  continue}
                if(has_sign)caml_bytes_set(output,0,caml_string_get(input,0));
                return caml_string_of_bytes(output)}},
           _iS_=
            function(I)
             {var compare=I[1],hash_fold_t=I[2],func=I[3];
              function hash(x){return caml_call1(func,x)}
              var chars_per_delimiter=4;
              function to_string(delimiter,t)
               {if(delimiter)
                 var
                  delimiter$0=delimiter[1],
                  make_suffix=
                   function(t)
                    {return insert_delimiter_every
                             (caml_call1(I[4],t),delimiter$0,chars_per_delimiter)};
                else
                 var make_suffix=I[4];
                return caml_call2(I[7],t,I[6])
                        ?symbol(_iP_,caml_call1(make_suffix,caml_call1(I[8],t)))
                        :symbol(_iQ_,caml_call1(make_suffix,t))}
              function to_string$0(t){return to_string(0,t)}
              function to_string_hum(opt,t)
               {if(opt)var sth=opt[1],delimiter=sth;else var delimiter=95;
                return to_string([0,delimiter],t)}
              function invalid(str)
               {var _y4_=I[9];return caml_call3(failwithf(_iR_),_y4_,str,0)}
              function of_string_with_delimiter(str)
               {var n=caml_ml_string_length(str),i=[0,0];
                for(;;)
                 {if(i[1] < n && caml_string_get(str,i[1]) !== 95)
                   {incr(i);continue}
                  if(i[1] === n)
                   var _y3_=str;
                  else
                   {var out=caml_create_bytes(n - 1 | 0);
                    blit_string(str,0,out,0,i[1]);
                    var out_pos=[0,i[1]];
                    incr(i);
                    for(;;)
                     {if(i[1] < n)
                       {var c=caml_string_get(str,i[1]);
                        if(c !== 95){caml_bytes_set(out,out_pos[1],c);incr(out_pos)}
                        incr(i);
                        continue}
                      var
                       out$0=caml_string_of_bytes(out),
                       _y3_=
                        out_pos[1] === (n - 1 | 0)?out$0:sub$2(out$0,0,out_pos[1]);
                      break}}
                  return caml_call1(I[5],_y3_)}}
              function of_string(str)
               {var
                 lexbuf=from_string(0,str),
                 result=
                  try_with
                   (function(param)
                     {var ocaml_lex_state=0;
                      for(;;)
                       {var
                         ocaml_lex_state$0=
                          engine(ocaml_lex_tables,ocaml_lex_state,lexbuf);
                        if(0 === ocaml_lex_state$0)
                         {var body=sub_lexeme(lexbuf,lexbuf[5] + 3 | 0,lexbuf[6]);
                          return [0,body]}
                        if(1 === ocaml_lex_state$0)
                         {var body$0=sub_lexeme(lexbuf,lexbuf[5] + 2 | 0,lexbuf[6]);
                          return [1,body$0]}
                        caml_call1(lexbuf[1],lexbuf);
                        var ocaml_lex_state=ocaml_lex_state$0;
                        continue}});
                if(lexbuf[6] === lexbuf[3])
                 {if(result)
                   {var _y1_=result[1];
                    if(0 === _y1_[0])
                     {var body=_y1_[1],_y2_=of_string_with_delimiter(body);
                      return caml_call1(I[8],_y2_)}
                    var body$0=_y1_[1];
                    return of_string_with_delimiter(body$0)}
                  return invalid(str)}
                return invalid(str)}
              function t_of_sexp(sexp)
               {if(0 === sexp[0])
                 {var s=sexp[1];
                  try
                   {var _y0_=of_string(s);return _y0_}
                  catch(exn)
                   {exn = caml_wrap_exception(exn);
                    return of_sexp_error_exn(exn,sexp)}}
                return of_sexp_error(_is_,sexp)}
              function sexp_of_t(t){return [0,to_string$0(t)]}
              return [0,
                      [0,
                       t_of_sexp,
                       sexp_of_t,
                       t_sexp_grammar,
                       compare,
                       hash_fold_t,
                       hash,
                       of_string,
                       to_string$0,
                       to_string_hum]]},
           _iT_=
            function(I)
             {var chars_per_delimiter=3;
              function to_string_hum(opt,t)
               {if(opt)var sth=opt[1],delimiter=sth;else var delimiter=95;
                return insert_delimiter_every
                        (caml_call1(I[1],t),delimiter,chars_per_delimiter)}
              function sexp_of_t(t){var s=caml_call1(I[1],t);return [0,s]}
              return [0,to_string_hum,sexp_of_t]},
           int32_positive_overflow_bounds=_iU_.slice(),
           int_positive_overflow_bounds=
            map$3(int32_positive_overflow_bounds,function(_yZ_){return _yZ_}),
           int63_on_int64_positive_overfl=_iV_.slice(),
           negative_exponent=
            function(param){return caml_call1(invalid_argf(_iW_),0)},
           overflow=function(param){return caml_call1(invalid_argf(_iX_),0)},
           pow=
            function(base,exponent)
             {if(exponent < 0)negative_exponent(0);
              var _yV_=1 < abs(base)?1:0;
              if(_yV_)
               {var _yW_=63 < exponent?1:0;
                if(_yW_)
                 var _yX_=_yW_;
                else
                 var
                  _yY_=
                   caml_check_bound(int_positive_overflow_bounds,exponent)
                    [1 + exponent],
                  _yX_=_yY_ < abs(base)?1:0}
              else
               var _yX_=_yV_;
              if(_yX_)overflow(0);
              return Base_int_math_int_pow_stub(base,exponent)},
           _i3_=
            function(X)
             {function symbol(x,y)
               {if(caml_call2(X[11],y,X[18]))
                 {var _yT_=caml_call1(X[4],y),_yU_=caml_call1(X[4],x);
                  caml_call3(invalid_argf(_i1_),_yU_,_yT_,0)}
                var rval=caml_call2(X[20],x,y);
                return caml_call2(X[14],rval,X[18])
                        ?caml_call2(X[5],rval,y)
                        :rval}
              var one=caml_call1(X[19],1);
              function symbol$0(x,y)
               {if(caml_call2(X[11],y,X[18]))
                 {var _yP_=caml_call1(X[4],y),_yQ_=caml_call1(X[4],x);
                  caml_call3(invalid_argf(_i2_),_yQ_,_yP_,0)}
                if(caml_call2(X[14],x,X[18]))
                 {var
                   _yR_=caml_call2(X[5],x,one),
                   _yS_=caml_call2(X[8],_yR_,y);
                  return caml_call2(X[6],_yS_,one)}
                return caml_call2(X[8],x,y)}
              function symbol$1(x,y)
               {var _yO_=caml_call1(X[2],y);return caml_call1(X[2],x) / _yO_}
              function round_down(i,modulus)
               {var _yN_=symbol(i,modulus);return caml_call2(X[6],i,_yN_)}
              function round_up(i,modulus)
               {var remainder=symbol(i,modulus);
                if(caml_call2(X[12],remainder,X[18]))return i;
                var _yM_=caml_call2(X[5],i,modulus);
                return caml_call2(X[6],_yM_,remainder)}
              function round_towards_zero(i,to_multiple_of)
               {return caml_call2(X[12],i,X[18])
                        ?X[18]
                        :caml_call2(X[13],i,X[18])
                          ?round_down(i,to_multiple_of)
                          :round_up(i,to_multiple_of)}
              function round_nearest(i,modulus)
               {var
                 remainder=symbol(i,modulus),
                 modulus_minus_remainder=caml_call2(X[6],modulus,remainder);
                return caml_call2(X[11],modulus_minus_remainder,remainder)
                        ?caml_call2(X[5],i,modulus_minus_remainder)
                        :caml_call2(X[6],i,remainder)}
              function round(opt,i,to_multiple_of)
               {if(opt)var sth=opt[1],dir=sth;else var dir=857423934;
                return 857423934 <= dir
                        ?1003109192 <= dir
                          ?round_towards_zero(i,to_multiple_of)
                          :round_nearest(i,to_multiple_of)
                        :759637122 <= dir
                          ?round_down(i,to_multiple_of)
                          :round_up(i,to_multiple_of)}
              return [0,
                      symbol,
                      symbol$0,
                      symbol$1,
                      round,
                      round_towards_zero,
                      round_down,
                      round_up,
                      round_nearest]},
           popcount=Base_int_math_int_popcount;
          _in_
           ([0,
             compare$8,
             hash_fold_t$5,
             to_int,
             t_of_sexp$1,
             sexp_of_t$8,
             of_string,
             to_string$2,
             module_name$2]);
          var
           func$1=function(x){return func$0(x)},
           hashable=[0,func$1,caml_int_compare,sexp_of_t$3],
           compare$12=caml_int_compare,
           of_string$2=
            function(s)
             {try
               {var _yK_=caml_int_of_string(s);return _yK_}
              catch(_yL_){return caml_call2(failwithf(_i4_),s,0)}},
           float_lower_bound=lower_bound_for_int(num_bits_int),
           float_upper_bound=upper_bound_for_int(num_bits_int),
           of_int=function(_yJ_){return _yJ_},
           of_float_unchecked=function(_yI_){return _yI_ | 0},
           to_int$0=
            function(f)
             {if(float_lower_bound <= f && f <= float_upper_bound)
               return f | 0;
              return caml_call2(invalid_argf(_i5_),f + 0.,0)},
           comparator=_hH_([0,compare$12,sexp_of_t$3])[1],
           _i6_=_im_([0,compare$12,sexp_of_t$3,0]),
           is_positive=_i6_[1],
           is_non_negative=_i6_[2],
           is_negative=_i6_[3],
           is_non_positive=_i6_[4],
           include$1=_iT_([0,int_to_string]),
           to_string_hum$0=include$1[1],
           sexp_of_int=include$1[2],
           zero$2=0,
           one=1,
           minus_one$0=-1,
           hash$2=function(x){return func$0(x)},
           symbol$6=function(_yH_,_yG_){return _yH_ < _yG_?1:0},
           to_string$5=function(i){return caml_call1(sprintf(_i7_),i)},
           of_string$3=
            function(s)
             {function _yE_(_yF_){return _yF_}
              return caml_call1(sscanf(s,_i8_),_yE_)},
           include$2=
            _iS_
             ([0,
               compare$6,
               hash_fold_t$1,
               hash$2,
               to_string$5,
               of_string$3,
               zero$2,
               symbol$6,
               neg,
               module_name$6]),
           Hex=include$2[1],
           include$3=_hy_([0,module_name$7,int_to_string]),
           pp$3=include$3[1],
           invariant=function(param){return 0},
           between=
            function(t,low,high)
             {var _yC_=low <= t?1:0,_yD_=_yC_?t <= high?1:0:_yC_;return _yD_},
           clamp_unchecked=
            function(t,min,max){return t < min?min:t <= max?t:max},
           clamp_exn=
            function(t,min,max)
             {if(min <= max)return clamp_unchecked(t,min,max);
              throw [0,Assert_failure,_i9_]},
           clamp=
            function(t,min,max)
             {if(max < min)
               {var _yB_=[0,[0,_i__,sexp_of_t$3(max)],0];
                return error_s
                        (message(_ja_,[0,[0,_i$_,sexp_of_t$3(min)],_yB_]))}
              return [0,clamp_unchecked(t,min,max)]},
           pred$0=function(i){return i - 1 | 0},
           succ=function(i){return i + 1 | 0},
           to_int_exn=function(i){return i},
           of_int$0=function(i){return i},
           abs$3=function(x){return abs(x)},
           rem=caml_mod,
           incr$0=function(_yA_){_yA_[1]++;return 0},
           decr$0=function(_yz_){_yz_[1] += -1;return 0},
           shift_right=function(a,b){return a >> b},
           shift_right_logical=function(a,b){return a >>> b | 0},
           shift_left=function(a,b){return a << b},
           bit_not=function(a){return a ^ -1},
           bit_or=function(a,b){return a | b},
           bit_and=function(a,b){return a & b},
           bit_xor=function(a,b){return a ^ b},
           symbol$7=function(b,e){return pow(b,e)},
           non_positive_argument=
            function(param){return caml_call1(invalid_argf(_jb_),0)},
           ceil_pow2=
            function(x)
             {if(x <= 0)non_positive_argument(0);
              var
               x$0=x - 1 | 0,
               x$1=x$0 | x$0 >>> 1 | 0,
               x$2=x$1 | x$1 >>> 2 | 0,
               x$3=x$2 | x$2 >>> 4 | 0,
               x$4=x$3 | x$3 >>> 8 | 0,
               x$5=x$4 | x$4 >>> 16 | 0,
               x$6=x$5 | x$5 >>> 32 | 0;
              return x$6 + 1 | 0},
           floor_pow2=
            function(x)
             {if(x <= 0)non_positive_argument(0);
              var
               x$0=x | x >>> 1 | 0,
               x$1=x$0 | x$0 >>> 2 | 0,
               x$2=x$1 | x$1 >>> 4 | 0,
               x$3=x$2 | x$2 >>> 8 | 0,
               x$4=x$3 | x$3 >>> 16 | 0,
               x$5=x$4 | x$4 >>> 32 | 0;
              return x$5 - (x$5 >>> 1 | 0) | 0},
           is_pow2=
            function(x)
             {if(x <= 0)non_positive_argument(0);
              return 0 === (x & (x - 1 | 0))?1:0},
           floor_log2=
            function(i)
             {if(i <= 0)raise_s(message(_jd_,[0,[0,_jc_,sexp_of_t$3(i)],0]));
              return 31 - Base_int_math_int_clz(i) | 0},
           ceil_log2=
            function(i)
             {if(i <= 0)raise_s(message(_jf_,[0,[0,_je_,sexp_of_t$3(i)],0]));
              return 1 === i?0:32 - Base_int_math_int_clz(i - 1 | 0) | 0},
           _jg_=function(_yy_){return - _yy_ | 0},
           _jh_=function(_yx_,_yw_){return _yx_ !== _yw_?1:0},
           _ji_=function(_yv_,_yu_){return _yv_ < _yu_?1:0},
           _jj_=function(_yt_,_ys_){return _ys_ < _yt_?1:0},
           _jk_=function(_yr_,_yq_){return _yr_ === _yq_?1:0},
           _jl_=function(_yp_,_yo_){return _yp_ <= _yo_?1:0},
           _jm_=function(_yn_,_ym_){return _ym_ <= _yn_?1:0},
           _jn_=function(_yl_){return - _yl_ | 0},
           _jo_=caml_div,
           _jp_=caml_mul,
           _jq_=function(_yk_,_yj_){return _yk_ - _yj_ | 0},
           F=
            _i3_
             ([0,
               to_int$0,
               of_int,
               of_string$2,
               int_to_string,
               function(_yi_,_yh_){return _yi_ + _yh_ | 0},
               _jq_,
               _jp_,
               _jo_,
               _jn_,
               _jm_,
               _jl_,
               _jk_,
               _jj_,
               _ji_,
               _jh_,
               abs$3,
               _jg_,
               zero$2,
               of_int$0,
               rem]),
           round=F[4],
           round_towards_zero=F[5],
           round_down=F[6],
           round_up=F[7],
           round_nearest=F[8],
           symbol$8=
            function(x,y)
             {if(y <= 0)
               caml_call3
                (invalid_argf(_jr_),
                 caml_string_of_jsbytes("" + x),
                 caml_string_of_jsbytes("" + y),
                 0);
              var rval=caml_mod(x,y);
              return rval < 0?rval + y | 0:rval},
           symbol$9=
            function(x,y)
             {if(y <= 0)
               caml_call3
                (invalid_argf(_js_),
                 caml_string_of_jsbytes("" + x),
                 caml_string_of_jsbytes("" + y),
                 0);
              return x < 0?caml_div(x + 1 | 0,y) - 1 | 0:caml_div(x,y)},
           symbol$10=function(x,y){return x / y},
           ctz=Base_int_math_int_ctz,
           clz=Base_int_math_int_clz,
           compare_int=caml_int_compare,
           equal_int=function(_yg_,_yf_){return _yg_ === _yf_?1:0};
          Make$0([0,compare_elt,sexp_of_t]);
          var of_string$4=caml_int_of_string;
          _hy_([0,module_name$8,nativeint_to_string]);
          var
           num_bits$0=num_bits(word_size),
           float_lower_bound$0=lower_bound_for_int(num_bits$0),
           float_upper_bound$0=upper_bound_for_int(num_bits$0),
           rem$0=caml_mod,
           neg$0=function(_ye_){return - _ye_ | 0},
           to_float=function(_yd_){return _yd_},
           of_float=
            function(f)
             {if(float_lower_bound$0 <= f && f <= float_upper_bound$0)
               return f | 0;
              return caml_call2(invalid_argf(_jt_),f + 0.,0)},
           symbol$11=caml_div,
           symbol$12=caml_mul,
           symbol$13=function(_yc_,_yb_){return _yc_ - _yb_ | 0},
           symbol$14=function(_ya_,_x$_){return _ya_ + _x$_ | 0};
          _i3_
           ([0,
             of_float,
             to_float,
             of_string$4,
             nativeint_to_string,
             symbol$14,
             symbol$13,
             symbol$12,
             symbol$11,
             neg$0,
             symbol$5,
             symbol$1,
             symbol$3,
             symbol$4,
             symbol$0,
             symbol$2,
             abs$2,
             neg$0,
             zero$1,
             int_to_nativeint,
             rem$0]);
          var
           of_string$5=caml_int64_of_string,
           float_lower_bound$1=lower_bound_for_int(64),
           float_upper_bound$1=upper_bound_for_int(64),
           rem$1=caml_int64_mod,
           to_float$0=caml_int64_to_float,
           of_float$0=
            function(f)
             {if(float_lower_bound$1 <= f && f <= float_upper_bound$1)
               return caml_int64_of_float(f);
              return caml_call2(invalid_argf(_ju_),f + 0.,0)},
           bswap32=
            function(x)
             {return caml_int64_shift_right_unsigned(caml_int64_bswap(x),32)},
           bswap48=
            function(x)
             {return caml_int64_shift_right_unsigned(caml_int64_bswap(x),16)},
           of_int_exn=caml_int64_of_int32,
           non_positive_argument$0=
            function(param){return caml_call1(invalid_argf(_jv_),0)},
           floor_pow2$0=
            function(x)
             {if(caml_lessequal(x,zero$0))non_positive_argument$0(0);
              var
               x$0=caml_int64_or(x,caml_int64_shift_right_unsigned(x,1)),
               x$1=caml_int64_or(x$0,caml_int64_shift_right_unsigned(x$0,2)),
               x$2=caml_int64_or(x$1,caml_int64_shift_right_unsigned(x$1,4)),
               x$3=caml_int64_or(x$2,caml_int64_shift_right_unsigned(x$2,8)),
               x$4=caml_int64_or(x$3,caml_int64_shift_right_unsigned(x$3,16)),
               x$5=caml_int64_or(x$4,caml_int64_shift_right_unsigned(x$4,32));
              return caml_int64_sub
                      (x$5,caml_int64_shift_right_unsigned(x$5,1))};
          _hy_([0,module_name$9,int64_to_string]);
          _i3_
           ([0,
             of_float$0,
             to_float$0,
             of_string$5,
             int64_to_string,
             caml_int64_add,
             caml_int64_sub,
             caml_int64_mul,
             caml_int64_div,
             caml_int64_neg,
             caml_greaterequal,
             caml_lessequal,
             caml_equal,
             caml_greaterthan,
             caml_lessthan,
             caml_notequal,
             abs$1,
             caml_int64_neg,
             zero$0,
             of_int_exn,
             rem$1]);
          var
           include$4=_hH_([0,compare$7,sexp_of_t$4]),
           comparator$0=include$4[1],
           wrap_exn=
            function(x)
             {if(! int64_is_representable_as_int6(x))
               convert_failure(x,_iO_,_iN_,int64_to_string);
              return caml_int64_mul(x,_jA_)},
           wrap_modulo=function(x){return caml_int64_mul(x,_jC_)},
           m=function(x){return caml_int64_and(x,mask)},
           invariant$0=
            function(t)
             {if(caml_equal(m(t),t))return 0;throw [0,Assert_failure,_jE_]},
           symbol$15=caml_int64_add,
           symbol$16=caml_int64_sub,
           neg$1=caml_int64_neg,
           abs$4=function(x){return abs$1(x)},
           one$0=wrap_exn(_jF_),
           succ$0=function(a){return caml_int64_add(a,one$0)},
           pred$1=function(a){return caml_int64_sub(a,one$0)},
           min_value=m(min_int64),
           max_value=m(max_int64),
           lnot$0=function(x){return m(caml_int64_xor(x,_N_))},
           land=caml_int64_and,
           lxor=caml_int64_xor,
           lor=caml_int64_or,
           lsl=caml_int64_shift_left,
           asr=function(x,i){return m(caml_int64_shift_right(x,i))},
           lsr=function(x,i){return m(caml_int64_shift_right_unsigned(x,i))},
           pow$0=
            function(a,b)
             {var
               exponent=caml_int64_shift_right(b,1),
               base=caml_int64_shift_right(a,1);
              if(caml_lessthan(exponent,_iY_))negative_exponent(0);
              var _x6_=caml_greaterthan(abs$1(base),_iZ_);
              if(_x6_)
               {var _x7_=caml_greaterthan(exponent,_i0_);
                if(_x7_)
                 var _x8_=_x7_;
                else
                 var
                  _x9_=caml_int64_to_int32(exponent),
                  _x__=
                   caml_check_bound(int63_on_int64_positive_overfl,_x9_)
                    [1 + _x9_],
                  _x8_=caml_greaterthan(abs$1(base),_x__)}
              else
               var _x8_=_x6_;
              if(_x8_)overflow(0);
              return caml_int64_mul
                      (Base_int_math_int64_pow_stub(base,exponent),_jD_)},
           symbol$17=
            function(a,b)
             {return caml_int64_mul(a,caml_int64_shift_right(b,1))},
           symbol$18=function(a,b){return wrap_modulo(caml_int64_div(a,b))},
           rem$2=caml_int64_mod,
           popcount$0=
            function(x$2)
             {var
               x=
                caml_int64_sub
                 (x$2,
                  caml_int64_and(caml_int64_shift_right_unsigned(x$2,1),m1)),
               x$0=
                caml_int64_add
                 (caml_int64_and(x,m2),
                  caml_int64_and(caml_int64_shift_right_unsigned(x,2),m2)),
               x$1=
                caml_int64_and
                 (caml_int64_add(x$0,caml_int64_shift_right_unsigned(x$0,4)),
                  m4);
              return caml_int64_to_int32
                      (caml_int64_shift_right_unsigned(caml_int64_mul(x$1,h01),56))},
           to_int64=function(t){return caml_int64_shift_right(t,1)},
           of_int64=
            function(t)
             {return int64_is_representable_as_int6(t)
                      ?[0,caml_int64_mul(t,_jB_)]
                      :0},
           of_int64_exn=function(t){return wrap_exn(t)},
           of_int64_trunc=function(t){return wrap_modulo(t)},
           t_of_sexp$2=function(x){return wrap_exn(int64_of_sexp(x))},
           sexp_of_t$9=
            function(x){return sexp_of_t$4(caml_int64_shift_right(x,1))},
           compare$13=function(x,y){return caml_int64_compare(x,y)},
           is_pow2$0=
            function(x)
             {var x$0=caml_int64_shift_right(x,1);
              if(caml_lessequal(x$0,zero$0))non_positive_argument$0(0);
              return caml_equal(caml_int64_and(x$0,pred(x$0)),zero$0)},
           clz$0=Base_int_math_int64_clz,
           ctz$0=
            function(x)
             {return Base_int_math_int64_ctz(caml_int64_shift_right(x,1))},
           floor_pow2$1=
            function(x)
             {return wrap_exn(floor_pow2$0(caml_int64_shift_right(x,1)))},
           ceil_pow2$0=
            function(x)
             {return wrap_exn(floor_pow2$0(caml_int64_shift_right(x,1)))},
           floor_log2$0=
            function(x)
             {var i=caml_int64_shift_right(x,1);
              if(caml_lessequal(i,zero$0))
               raise_s(message(_jx_,[0,[0,_jw_,sexp_of_t$4(i)],0]));
              return 63 - Base_int_math_int64_clz(i) | 0},
           ceil_log2$0=
            function(x)
             {var i=caml_int64_shift_right(x,1);
              if(caml_lessequal(i,zero$0))
               raise_s(message(_jz_,[0,[0,_jy_,sexp_of_t$4(i)],0]));
              return 0 === caml_int64_compare(i,y)
                      ?0
                      :64 - Base_int_math_int64_clz(pred(i)) | 0},
           func$2=function(x){return caml_hash(10,100,0,x)},
           hashable$0=[0,func$2,compare$13,sexp_of_t$9],
           invalid_str=function(x){return caml_call2(failwithf(_jG_),x,0)},
           sign_and_signedness=
            function(x)
             {var len=caml_ml_string_length(x);
              if(0 < len)
               {var
                 match=caml_string_get(x,0),
                 switcher=match - 43 | 0,
                 switch$0=0;
                if(2 < switcher >>> 0)
                 switch$0 = 1;
                else
                 switch(switcher)
                  {case 0:var sign=4003188,pos=1;break;
                   case 1:switch$0 = 1;break;
                   default:var sign=3901488,pos=1}
                if(switch$0)var sign=4003188,pos=0}
              else
               var sign=4003188,pos=0;
              if((pos + 2 | 0) < len)
               {var
                 c1=caml_string_get(x,pos),
                 match$0=caml_string_get(x,pos + 1 | 0);
                return 48 === c1
                        ?9 < match$0 - 48 >>> 0?[0,sign,0]:[0,sign,1]
                        :[0,sign,1]}
              return [0,sign,1]},
           to_string$6=
            function(x){return int64_to_string(caml_int64_shift_right(x,1))},
           of_string$6=
            function(str)
             {try
               {var
                 match=sign_and_signedness(str),
                 signedness=match[2],
                 sign=match[1];
                if(signedness)
                 var _x4_=of_int64_exn(caml_int64_of_string(str));
                else
                 {var
                   pos_str=
                    4003188 <= sign
                     ?str
                     :sub$2(str,1,caml_ml_string_length(str) - 1 | 0),
                   int64=caml_int64_of_string(pos_str);
                  if(caml_lessthan(int64,_jH_))invalid_str(str);
                  var
                   int63=wrap_modulo(int64),
                   int63$0=4003188 <= sign?int63:caml_int64_neg(int63),
                   _x4_=int63$0}
                return _x4_}
              catch(_x5_){return invalid_str(str)}},
           bswap16=
            function(t)
             {var x=caml_int64_shift_right(t,1);
              return wrap_modulo
                      (caml_int64_shift_right_unsigned(caml_int64_bswap(x),48))},
           bswap32$0=
            function(t)
             {return wrap_modulo(bswap32(caml_int64_shift_right(t,1)))},
           bswap48$0=
            function(t)
             {return wrap_modulo(bswap48(caml_int64_shift_right(t,1)))},
           float_lower_bound$2=lower_bound_for_int(63),
           float_upper_bound$2=upper_bound_for_int(63),
           minus_one$1=wrap_exn(minus_one),
           one$1=wrap_exn(y),
           zero$3=wrap_exn(zero$0),
           num_bits$1=63,
           to_float$1=
            function(x)
             {return caml_int64_to_float(caml_int64_shift_right(x,1))},
           of_float_unchecked$0=
            function(x){return wrap_modulo(caml_int64_of_float(x))},
           of_float$1=
            function(t)
             {if(float_lower_bound$2 <= t && t <= float_upper_bound$2)
               return wrap_modulo(caml_int64_of_float(t));
              return caml_call2(invalid_argf(_jI_),t + 0.,0)},
           _jJ_=_im_([0,compare$13,sexp_of_t$9,zero$3]),
           is_positive$0=_jJ_[1],
           is_non_negative$0=_jJ_[2],
           is_negative$0=_jJ_[3],
           is_non_positive$0=_jJ_[4],
           sign$0=_jJ_[5],
           between$0=
            function(t,low,high)
             {var
               _x2_=caml_lessequal(low,t),
               _x3_=_x2_?caml_lessequal(t,high):_x2_;
              return _x3_},
           clamp_unchecked$0=
            function(t,min,max)
             {return caml_lessthan(t,min)?min:caml_lessequal(t,max)?t:max},
           clamp_exn$0=
            function(t,min,max)
             {if(caml_lessequal(min,max))return clamp_unchecked$0(t,min,max);
              throw [0,Assert_failure,_jK_]},
           clamp$0=
            function(t,min,max)
             {if(caml_greaterthan(min,max))
               {var _x1_=[0,[0,_jL_,sexp_of_t$9(max)],0];
                return error_s
                        (message(_jN_,[0,[0,_jM_,sexp_of_t$9(min)],_x1_]))}
              return [0,clamp_unchecked$0(t,min,max)]},
           symbol$19=function(b,e){return pow$0(b,e)},
           incr$1=function(r){r[1] = caml_int64_add(r[1],one$1);return 0},
           decr$1=function(r){r[1] = caml_int64_sub(r[1],one$1);return 0},
           of_int$1=function(x){return wrap_exn(caml_int64_of_int32(x))},
           of_int_exn$0=function(x){return of_int$1(x)},
           to_int$1=
            function(x){return int64_to_int(caml_int64_shift_right(x,1))},
           to_int_exn$0=
            function(x){return int64_to_int_exn(caml_int64_shift_right(x,1))},
           to_int_trunc=
            function(x)
             {return caml_int64_to_int32(caml_int64_shift_right(x,1))},
           of_int32=function(x){return wrap_exn(caml_int64_of_int32(x))},
           of_int32_exn=function(x){return of_int32(x)},
           to_int32=
            function(x)
             {var x$0=caml_int64_shift_right(x,1);
              return int64_is_representable_as_int3(x$0)
                      ?[0,caml_int64_to_int32(x$0)]
                      :0},
           to_int32_exn=
            function(x)
             {var x$0=caml_int64_shift_right(x,1);
              return int64_is_representable_as_int3(x$0)
                      ?caml_int64_to_int32(x$0)
                      :convert_failure(x$0,_iK_,_iJ_,int64_to_string)},
           to_int32_trunc=
            function(x)
             {return caml_int64_to_int32(caml_int64_shift_right(x,1))},
           of_nativeint=function(x){return of_int64(caml_int64_of_int32(x))},
           of_nativeint_exn=
            function(x){return wrap_exn(caml_int64_of_int32(x))},
           of_nativeint_trunc=
            function(x){return of_int64_trunc(caml_int64_of_int32(x))},
           to_nativeint=
            function(x)
             {var x$0=caml_int64_shift_right(x,1);
              return int64_is_representable_as_nati(x$0)
                      ?[0,caml_int64_to_int32(x$0)]
                      :0},
           to_nativeint_exn=
            function(x)
             {var x$0=caml_int64_shift_right(x,1);
              return int64_is_representable_as_nati(x$0)
                      ?caml_int64_to_int32(x$0)
                      :convert_failure(x$0,_iM_,_iL_,int64_to_string)},
           to_nativeint_trunc=
            function(x)
             {return caml_int64_to_int32(caml_int64_shift_right(x,1))},
           include$5=_iT_([0,to_string$6]),
           to_string_hum$1=include$5[1],
           sexp_of_t$10=include$5[2],
           hash$3=function(x){return caml_hash(10,100,0,x)},
           symbol$20=caml_lessthan,
           to_string$7=
            function(i)
             {return caml_call1
                      (sprintf(_jO_),caml_int64_shift_right_unsigned(i,1))},
           of_string$7=function(s){return of_string$6(symbol(_jP_,s))},
           include$6=
            _iS_
             ([0,
               compare$13,
               hash_fold_t,
               hash$3,
               to_string$7,
               of_string$7,
               zero$3,
               symbol$20,
               neg$1,
               module_name$10]),
           Hex$0=include$6[1],
           to_string$8=function(x){return to_string$6(x)},
           pp$4=_hy_([0,module_name$11,to_string$8])[1],
           symbol$21=caml_notequal,
           symbol$22=caml_lessthan,
           symbol$23=caml_greaterthan,
           symbol$24=caml_equal,
           symbol$25=caml_lessequal,
           symbol$26=caml_greaterequal,
           include$7=
            _i3_
             ([0,
               of_float$1,
               to_float$1,
               of_string$6,
               to_string$6,
               symbol$15,
               symbol$16,
               symbol$17,
               symbol$18,
               neg$1,
               symbol$26,
               symbol$25,
               symbol$24,
               symbol$23,
               symbol$22,
               symbol$21,
               abs$4,
               neg$1,
               zero$3,
               of_int_exn$0,
               rem$2]),
           symbol$27=include$7[1],
           symbol$28=include$7[2],
           symbol$29=include$7[3],
           round$0=include$7[4],
           round_towards_zero$0=include$7[5],
           round_down$0=include$7[6],
           round_up$0=include$7[7],
           round_nearest$0=include$7[8],
           repr=1,
           _jQ_=
            [0,
             symbol$15,
             symbol$16,
             symbol$17,
             symbol$18,
             neg$1,
             symbol$19,
             symbol$26,
             symbol$25,
             symbol$24,
             symbol$23,
             symbol$22,
             symbol$21,
             abs$4,
             neg$1,
             zero$3,
             symbol$27,
             symbol$28,
             symbol$29,
             land,
             lor,
             lxor,
             lnot$0,
             lsl,
             asr,
             lsr],
           _jR_=function(_x0_,_xZ_){return caml_int64_compare(_x0_,_xZ_)};
          _hy_([0,module_name$12,to_string]);
          var
           of_string$8=caml_int_of_string,
           float_lower_bound$3=lower_bound_for_int(32),
           float_upper_bound$3=upper_bound_for_int(32),
           rem$3=caml_mod,
           _jS_=caml_equal,
           _jT_=caml_notequal,
           _jU_=caml_lessthan,
           _jV_=caml_greaterthan,
           _jW_=caml_equal,
           _jX_=caml_lessequal,
           _jY_=caml_greaterequal,
           neg$2=function(_xY_){return - _xY_ | 0},
           to_float$2=function(_xX_){return _xX_},
           of_float$2=
            function(f)
             {if(float_lower_bound$3 <= f && f <= float_upper_bound$3)
               return f | 0;
              return caml_call2(invalid_argf(_jZ_),f + 0.,0)},
           symbol$30=caml_greaterequal,
           symbol$31=caml_lessequal,
           symbol$32=caml_equal,
           symbol$33=caml_greaterthan,
           symbol$34=caml_lessthan,
           symbol$35=caml_notequal,
           symbol$36=caml_div,
           symbol$37=caml_mul,
           symbol$38=function(_xW_,_xV_){return _xW_ - _xV_ | 0},
           symbol$39=function(_xU_,_xT_){return _xU_ + _xT_ | 0};
          _hy_([0,module_name$13,int32_to_string]);
          _i3_
           ([0,
             of_float$2,
             to_float$2,
             of_string$8,
             int32_to_string,
             symbol$39,
             symbol$38,
             symbol$37,
             symbol$36,
             neg$2,
             symbol$30,
             symbol$31,
             symbol$32,
             symbol$33,
             symbol$34,
             symbol$35,
             abs$0,
             neg$2,
             zero,
             int_to_int32_exn,
             rem$3]);
          var
           _j0_=[0],
           include$8=function(_xS_){return [0,1]}(_j0_),
           _j1_=include$8[1],
           to_int$2=function(x){return [0,x]},
           to_int_trunc$0=function(x){return x},
           to_nativeint_trunc$0=function(x){return x},
           to_nativeint$0=function(x){return [0,x]},
           repr$0=0,
           bswap32$1=
            function(t)
             {return caml_int64_to_int32(bswap32(caml_int64_of_int32(t)))},
           bswap48$1=
            function(t)
             {return caml_int64_to_int32(bswap48(caml_int64_of_int32(t)))};
          if(_j1_)
           var
            include$9=
             [0,
              int64_sexp_grammar,
              of_float$1,
              to_float$1,
              of_int_exn$0,
              to_int_exn$0,
              hash_fold_t,
              func$2,
              t_of_sexp$2,
              sexp_of_t$10,
              of_string$6,
              to_string$6,
              _jY_,
              _jX_,
              _jW_,
              _jV_,
              _jU_,
              _jT_,
              _jS_,
              _jR_,
              min$2,
              max$2,
              ascending$0,
              descending$0,
              between$0,
              clamp_exn$0,
              clamp$0,
              comparator$0,
              pp$4,
              hashable$0,
              is_positive$0,
              is_non_negative$0,
              is_negative$0,
              is_non_positive$0,
              sign$0,
              invariant$0,
              Hex$0,
              to_string_hum$1,
              zero$3,
              one$1,
              minus_one$1,
              symbol$15,
              symbol$16,
              symbol$17,
              symbol$19,
              neg$1,
              neg$1,
              symbol$28,
              symbol$27,
              symbol$18,
              rem$2,
              symbol$29,
              land,
              lor,
              lxor,
              lnot$0,
              lsl,
              asr,
              round$0,
              round_towards_zero$0,
              round_down$0,
              round_up$0,
              round_nearest$0,
              abs$4,
              succ$0,
              pred$1,
              pow$0,
              land,
              lor,
              lxor,
              lnot$0,
              popcount$0,
              lsl,
              asr,
              decr$1,
              incr$1,
              of_int32_exn,
              to_int32_exn,
              of_int64_exn,
              to_int64,
              of_nativeint_exn,
              to_nativeint_exn,
              num_bits$1,
              max_value,
              min_value,
              lsr,
              lsr,
              ceil_pow2$0,
              floor_pow2$1,
              ceil_log2$0,
              floor_log2$0,
              is_pow2$0,
              clz$0,
              ctz$0,
              _jQ_,
              of_int$1,
              to_int$1,
              to_int_trunc,
              of_int32,
              to_int32,
              to_int32_trunc,
              of_int64,
              of_int64_trunc,
              of_nativeint,
              to_nativeint,
              of_nativeint_trunc,
              to_nativeint_trunc,
              of_float_unchecked$0,
              repr,
              bswap16,
              bswap32$0,
              bswap48$0];
          else
           var
            _qw_=caml_bswap16,
            _qx_=function(_xR_){return _xR_},
            _qy_=caml_int64_to_int32,
            _qz_=function(_xQ_){return _xQ_},
            _qA_=function(_xP_,_xO_){return _xP_ >>> _xO_ | 0},
            _qB_=function(_xN_,_xM_){return _xN_ >> _xM_},
            _qC_=function(_xL_,_xK_){return _xL_ << _xK_},
            _qD_=function(_xJ_,_xI_){return _xJ_ ^ _xI_},
            _qE_=function(_xH_,_xG_){return _xH_ | _xG_},
            _qF_=function(_xF_,_xE_){return _xF_ & _xE_},
            _qG_=function(_xD_){return - _xD_ | 0},
            _qH_=function(_xC_,_xB_){return _xC_ !== _xB_?1:0},
            _qI_=function(_xA_,_xz_){return _xA_ < _xz_?1:0},
            _qJ_=function(_xy_,_xx_){return _xx_ < _xy_?1:0},
            _qK_=function(_xw_,_xv_){return _xw_ === _xv_?1:0},
            _qL_=function(_xu_,_xt_){return _xu_ <= _xt_?1:0},
            _qM_=function(_xs_,_xr_){return _xr_ <= _xs_?1:0},
            _qN_=function(_xq_){return - _xq_ | 0},
            _qO_=caml_div,
            _qP_=caml_mul,
            _qQ_=function(_xp_,_xo_){return _xp_ - _xo_ | 0},
            _qR_=
             [0,
              function(_xn_,_xm_){return _xn_ + _xm_ | 0},
              _qQ_,
              _qP_,
              _qO_,
              _qN_,
              symbol$7,
              _qM_,
              _qL_,
              _qK_,
              _qJ_,
              _qI_,
              _qH_,
              abs$3,
              _qG_,
              zero$2,
              symbol$8,
              symbol$9,
              symbol$10,
              _qF_,
              _qE_,
              _qD_,
              lnot,
              _qC_,
              _qB_,
              _qA_],
            _qS_=function(_xl_,_xk_){return _xl_ >>> _xk_ | 0},
            _qT_=function(_xj_,_xi_){return _xj_ >> _xi_},
            _qU_=function(_xh_,_xg_){return _xh_ << _xg_},
            _qV_=function(_xf_,_xe_){return _xf_ ^ _xe_},
            _qW_=function(_xd_,_xc_){return _xd_ | _xc_},
            _qX_=function(_xb_,_xa_){return _xb_ & _xa_},
            _qY_=caml_div,
            _qZ_=function(_w$_){return - _w$_ | 0},
            _q0_=function(_w__){return - _w__ | 0},
            _q1_=caml_mul,
            _q2_=function(_w9_,_w8_){return _w9_ - _w8_ | 0},
            _q3_=function(_w7_,_w6_){return _w7_ + _w6_ | 0},
            _q4_=function(_w5_,_w4_){return _w5_ !== _w4_?1:0},
            _q5_=function(_w3_,_w2_){return _w3_ < _w2_?1:0},
            _q6_=function(_w1_,_w0_){return _w0_ < _w1_?1:0},
            _q7_=function(_wZ_,_wY_){return _wZ_ === _wY_?1:0},
            _q8_=function(_wX_,_wW_){return _wX_ <= _wW_?1:0},
            include$9=
             [0,
              int_sexp_grammar,
              to_int$0,
              of_int,
              of_int$0,
              to_int_exn,
              hash_fold_t$1,
              func$1,
              int_of_sexp,
              sexp_of_int,
              of_string$2,
              int_to_string,
              function(_wV_,_wU_){return _wU_ <= _wV_?1:0},
              _q8_,
              _q7_,
              _q6_,
              _q5_,
              _q4_,
              equal_int,
              compare_int,
              min$1,
              max$1,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              pp$3,
              hashable,
              is_positive,
              is_non_negative,
              is_negative,
              is_non_positive,
              sign,
              invariant,
              Hex,
              to_string_hum$0,
              zero$2,
              one,
              minus_one$0,
              _q3_,
              _q2_,
              _q1_,
              symbol$7,
              _q0_,
              _qZ_,
              symbol$9,
              symbol$8,
              _qY_,
              rem,
              symbol$10,
              _qX_,
              _qW_,
              _qV_,
              lnot,
              _qU_,
              _qT_,
              round,
              round_towards_zero,
              round_down,
              round_up,
              round_nearest,
              abs$3,
              succ,
              pred$0,
              pow,
              bit_and,
              bit_or,
              bit_xor,
              bit_not,
              popcount,
              shift_left,
              shift_right,
              decr$0,
              incr$0,
              int32_to_int_exn,
              int_to_int32_exn,
              int64_to_int_exn,
              int_to_int64,
              nativeint_to_int_exn,
              int_to_nativeint,
              num_bits_int,
              max$0,
              min$0,
              _qS_,
              shift_right_logical,
              ceil_pow2,
              floor_pow2,
              ceil_log2,
              floor_log2,
              is_pow2,
              clz,
              ctz,
              _qR_,
              of_int$0,
              to_int$2,
              to_int_trunc$0,
              int32_to_int_exn,
              int_to_int32,
              _qz_,
              int64_to_int,
              _qy_,
              nativeint_to_int,
              to_nativeint$0,
              _qx_,
              to_nativeint_trunc$0,
              of_float_unchecked,
              repr$0,
              _qw_,
              bswap32$1,
              bswap48$1];
          var
           to_float$3=include$9[3],
           symbol$40=include$9[17],
           zero$4=include$9[38],
           one$2=include$9[39],
           _j2_=include$9[42],
           shift_left$0=include$9[72],
           to_int64$0=include$9[79],
           num_bits$2=include$9[82],
           of_int$2=include$9[95];
          of_int$2(-1);
          if(63 === num_bits$2)
           {var
             to_string$9=
              function(x)
               {var
                 y=caml_format_float(_j4_,x),
                 y$0=caml_float_of_string(y) == x?y:caml_format_float(_j5_,x),
                 l=caml_ml_string_length(y$0),
                 i=0;
                for(;;)
                 {if(l <= i)return symbol(y$0,_j3_);
                  var match=caml_string_get(y$0,i),switch$0=0;
                  if(48 <= match)
                   {if(! (58 <= match))switch$0 = 1}
                  else
                   if(45 === match)switch$0 = 1;
                  if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
                  return y$0}};
            lower_bound_for_int(num_bits_int);
            lower_bound_for_int(num_bits$2);
            var exponent_mask64=caml_int64_sub(caml_int64_shift_left(y,11),y);
            int64_to_int_exn(exponent_mask64);
            var mantissa_mask=_j2_(shift_left$0(one$2,52),one$2);
            to_int64$0(mantissa_mask);
            _hy_([0,module_name$14,to_string$9]);
            var
             initialize_module=
              function(param)
               {var match=getenv(_j6_);
                if(match)
                 {var
                   x=match[1],
                   f=
                    function(s)
                     {var
                       string_len=caml_ml_string_length(s),
                       _wT_=1 <= string_len?1:0;
                      if(_wT_)
                       {var str_len=caml_ml_string_length(s),str_pos$1=0;
                        if(str_len < 0)
                         caml_call3(invalid_argf(_iB_),str_pos$1,str_len,0);
                        var _wS_=1 <= str_len?1:0;
                        if(_wS_)
                         {var str_pos=str_pos$1,sub_pos=0;
                          for(;;)
                           {if(sub_pos === 1)return 1;
                            if
                             (caml_string_unsafe_get(s,str_pos)
                              ===
                              caml_string_unsafe_get(prefix,sub_pos))
                             {var
                               sub_pos$0=sub_pos + 1 | 0,
                               str_pos$0=str_pos + 1 | 0,
                               str_pos=str_pos$0,
                               sub_pos=sub_pos$0;
                              continue}
                            return 0}}
                        return _wS_}
                      return _wT_},
                   last_pos=caml_ml_string_length(x),
                   pos$2=last_pos - 1 | 0,
                   acc=0,
                   last_pos$0=last_pos,
                   pos=pos$2;
                  for(;;)
                   {if(-1 !== pos)
                     {if(caml_string_get(x,pos) === 44)
                       {var
                         pos1=pos + 1 | 0,
                         sub_str=sub$2(x,pos1,last_pos$0 - pos1 | 0),
                         pos$0=pos - 1 | 0,
                         acc$0=[0,sub_str,acc],
                         acc=acc$0,
                         last_pos$0=pos,
                         pos=pos$0;
                        continue}
                      var pos$1=pos - 1 | 0,pos=pos$1;
                      continue}
                    var
                     t=[0,sub$2(x,0,last_pos$0),acc],
                     ocamlrunparam_mentions_backtra=exists(f,t);
                    break}}
                else
                 var ocamlrunparam_mentions_backtra=0;
                var _wR_=1 - ocamlrunparam_mentions_backtra;
                return _wR_?caml_record_backtrace(1):_wR_};
            initialize_module(0);
            var
             tests_ran=[0,0],
             tests_failed=[0,0],
             dynamic_lib=[0,0],
             action=[0,-950194894];
            try
             {caml_sys_getenv(_qt_);var _qu_=1,force_drop=_qu_}
            catch(_wQ_)
             {_wQ_ = caml_wrap_exception(_wQ_);
              if(_wQ_ !== Not_found)throw _wQ_;
              var force_drop=0}
            var
             get=function(param){return force_drop?-950194894:action[1]},
             set=function(v){action[1] = v;return 0},
             _j__=create$1(0,23),
             current$0=[0,_j$_],
             verbose=[0,0],
             strict=[0,0],
             show_counts=[0,0],
             list_test_names=[0,0],
             delayed_errors=[0,0],
             stop_on_error=[0,0],
             log=[0,0],
             time_sec=[0,0.],
             use_color=[0,1],
             in_place=[0,0],
             diff_command=[0,0],
             source_tree_root=[0,0],
             allow_output_patterns=[0,0],
             match$0=to_list(caml_sys_argv(0)),
             switch$0=0,
             t$0=0;
            if(match$0)
             {var _ki_=match$0[2];
              if(_ki_)
               {var _kj_=match$0[1];
                if(! caml_string_notequal(_ki_[1],_kk_))
                 {var _pF_=_ki_[2];
                  if(_pF_)
                   {var rest=_pF_[2],lib=_pF_[1];
                    if(am_testing)
                     {var
                       tests=[0,0],
                       list_partitions=[0,0],
                       partition=[0,0],
                       tag_predicate=[0,enable_everything],
                       name_filter=[0,0],
                       msg$2=caml_call3(sprintf(_pH_),_kj_,_pG_,lib),
                       f$0=
                        function(anon)
                         {caml_call2(eprintf(_pI_),_kj_,anon);return exit(1)},
                       _pJ_=0,
                       _pO_=
                        [0,
                         [0,_pN_,[2,allow_output_patterns],_pM_],
                         [0,
                          [0,
                           _pL_,
                           [4,function(s){source_tree_root[1] = [0,s];return 0}],
                           _pK_],
                          _pJ_]],
                       _pV_=
                        [0,
                         [0,_pU_,[3,use_color],_pT_],
                         [0,
                          [0,_pS_,[2,in_place],_pR_],
                          [0,
                           [0,
                            _pQ_,
                            [4,function(s){diff_command[1] = [0,s];return 0}],
                            _pP_],
                           _pO_]]],
                       _pZ_=
                        [0,
                         [0,
                          _pY_,
                          [4,
                           function(filename)
                            {try
                              {var
                                _wJ_=
                                 function(file,line,start_pos,end_pos)
                                  {return [0,file,[0,line]]},
                                _wK_=[0,caml_call1(sscanf(filename,_kh_),_wJ_)],
                                match=_wK_}
                             catch(_wN_)
                              {try
                                {var
                                  _wH_=function(file,line){return [0,file,[0,line]]},
                                  _wI_=[0,caml_call1(sscanf(filename,_kg_),_wH_)],
                                  match=_wI_}
                               catch(_wO_)
                                {try
                                  {var
                                    _wF_=function(file){return [0,file,0]},
                                    _wG_=[0,caml_call1(sscanf(filename,_kf_),_wF_)],
                                    match=_wG_}
                                 catch(_wP_){var match=0}}}
                             if(match)
                              var
                               match$0=match[1],
                               index$0=match$0[2],
                               file=match$0[1],
                               index$1=index$0,
                               filename$0=file;
                             else
                              if(contains(filename,58))
                               {var
                                 i=index(filename,58),
                                 filename$1=sub$0(filename,0,i),
                                 index_string=
                                  sub$0
                                   (filename,
                                    i + 1 | 0,
                                    (caml_ml_string_length(filename) - i | 0) - 1 | 0);
                                try
                                 {var _wL_=caml_int_of_string(index_string),index$2=_wL_}
                                catch(_wM_)
                                 {_wM_ = caml_wrap_exception(_wM_);
                                  if(_wM_[1] !== Failure)throw _wM_;
                                  caml_call1(eprintf(_pX_),filename);
                                  var index$2=exit(1)}
                                var index$1=[0,index$2],filename$0=filename$1}
                              else
                               var index$1=0,filename$0=filename;
                             tests[1] = [0,[0,filename$0,index$1,[0,0]],tests[1]];
                             return 0}],
                          _pW_],
                         _pV_],
                       _p2_=
                        [0,
                         [0,
                          _p1_,
                          [4,
                           function(s){name_filter[1] = [0,s,name_filter[1]];return 0}],
                          _p0_],
                         _pZ_],
                       _p5_=
                        [0,
                         [0,
                          _p4_,
                          [4,
                           function(s)
                            {var
                              _wD_=tag_predicate[1],
                              _wB_=_wD_[2],
                              _wC_=
                               caml_call1
                                (find_all
                                  (function(_wE_){return caml_string_notequal(s,_wE_)}),
                                 _wB_);
                             tag_predicate[1] = [0,[0,s,_wD_[1]],_wC_];
                             return 0}],
                          _p3_],
                         _p2_],
                       _p8_=
                        [0,
                         [0,
                          _p7_,
                          [4,
                           function(s)
                            {var _wz_=tag_predicate[1],_wx_=[0,s,_wz_[2]],_wy_=_wz_[1];
                             tag_predicate[1]
                             =
                             [0,
                              caml_call1
                               (find_all
                                 (function(_wA_){return caml_string_notequal(s,_wA_)}),
                                _wy_),
                              _wx_];
                             return 0}],
                          _p6_],
                         _p5_],
                       _qj_=
                        [0,
                         [0,_qi_,[2,verbose],_qh_],
                         [0,
                          [0,_qg_,[2,stop_on_error],_qf_],
                          [0,
                           [0,_qe_,[2,strict],_qd_],
                           [0,
                            [0,_qc_,[2,show_counts],_qb_],
                            [0,
                             [0,
                              _qa_,
                              [0,
                               function(param)
                                {try {caml_sys_remove(_p$_)}catch(_ww_){}
                                 log[1] = [0,open_out(_p__)];
                                 return 0}],
                              _p9_],
                             _p8_]]]]],
                       _qm_=
                        [0,
                         [0,_ql_,[4,function(i){partition[1] = [0,i];return 0}],_qk_],
                         _qj_],
                       _qp_=
                        [0,
                         [0,
                          _qo_,
                          [0,function(param){list_partitions[1] = 1;return 0}],
                          _qn_],
                         _qm_],
                       l=
                        align
                         (0,
                          [0,
                           [0,
                            _qr_,
                            [0,
                             function(param)
                              {list_test_names[1] = 1;verbose[1] = 1;return 0}],
                            _qq_],
                           _qp_]),
                       argv=to_array([0,_kj_,rest]);
                      try
                       {parse_argv(0,argv,l,f$0,msg$2)}
                      catch(exn)
                       {exn = caml_wrap_exception(exn);
                        if(exn[1] === Bad)
                         {var msg$0=exn[2];caml_call1(eprintf(_j8_),msg$0);exit(1)}
                        else
                         {if(exn[1] !== Help)throw exn;
                          var msg$1=exn[2];
                          caml_call1(printf(_j9_),msg$1);
                          exit(0)}}
                      var
                       _qs_=
                        list_partitions[1]?-260537174:[0,1025081494,partition[1]];
                      set
                       ([0,
                         -753295984,
                         [0,[0,lib,tests[1],name_filter[1],tag_predicate[1]],_qs_]]);
                      switch$0 = 1}}}}}
            var match$1=get(0),_kl_=typeof match$1 === "number"?0:1;
            try
             {var switch$1=0;caml_sys_getenv(_pE_);switch$1 = 1}
            catch(_wu_)
             {_wu_ = caml_wrap_exception(_wu_);
              if(_wu_ !== Not_found)throw _wu_;
              try
               {var
                 switch$2=0,
                 val=caml_sys_getenv(am_running_inline_test_env_var);
                switch$2 = 1}
              catch(_wv_)
               {_wv_ = caml_wrap_exception(_wv_);
                if(_wv_ !== Not_found)throw _wv_;
                var _km_=0}
              if(switch$2)
               var _pD_=caml_string_notequal(val,_pC_)?0:1,_km_=_pD_;
              var _kn_=_km_}
            if(switch$1)var _kn_=1;
            var
             wall_time_clock_ns=
              function(param)
               {var t=time_now_nanoseconds_since_unix_epoch_or_zero(0);
                return symbol$40(t,zero$4)?t:k(_j7_)},
             where_to_cut_backtrace=
              [246,
               function(param)
                {var pattern=symbol(_kq_,symbol(_kp_,_ko_));
                 return create$3(pattern,1)}],
             time_without_resetting_random_=
              function(f)
               {var before_ns=wall_time_clock_ns(0);
                try
                 {var _wt_=[0,caml_call1(f,0)],res=_wt_}
                catch(exn)
                 {exn = caml_wrap_exception(exn);
                  var res=[1,[0,exn,get_backtrace(0)]]}
                time_sec[1]
                =
                to_float$3(_j2_(wall_time_clock_ns(0),before_ns))
                /
                1000000000.;
                return res},
             saved_caml_random_state=
              [246,function(_ws_){return make$1([0,100,200,300])}],
             saved_base_random_state=
              [246,
               function(_wr_)
                {var seed=[0,111,222,333];return from_val(make$1(seed))}],
             string_of_module_descr=
              function(param)
               {var _wp_=map$0(function(m){return m[1]},t$0);
                return concat
                        (_ku_,
                         map$0
                          (function(s$0)
                            {var s=caml_bytes_of_string(s$0);
                             if(0 === caml_ml_bytes_length(s))
                              var _wq_=s;
                             else
                              {var r=copy(s);
                               caml_bytes_unsafe_set(r,0,f(caml_bytes_unsafe_get(s,0)));
                               var _wq_=r}
                             return symbol
                                     (_kt_,symbol(_ks_,symbol(caml_string_of_bytes(_wq_),_kr_)))},
                           _wp_))},
             eprintf_or_delay=
              function(fmt)
               {return ksprintf
                        (function(s)
                          {if(verbose[1])
                            delayed_errors[1] = [0,s,delayed_errors[1]];
                           else
                            caml_call1(eprintf(_kx_),s);
                           var _wo_=stop_on_error[1];
                           if(_wo_)
                            {var delayed_errors$0=rev(delayed_errors[1]);
                             if(delayed_errors$0)
                              {var _wn_=make$0(70,61);
                               caml_call1(eprintf(_kv_),_wn_);
                               iter
                                (function(message){return caml_call1(eprintf(_kw_),message)},
                                 delayed_errors$0)}
                             return exit(2)}
                           return _wo_},
                         fmt)},
             test_inner=
              function
               (config,
                descr,
                tags,
                filename,
                line,
                start_pos,
                end_pos,
                f$0,
                bool_of_f)
               {var match$0=get(0);
                if(typeof match$0 === "number")return 0;
                var
                 _vZ_=match$0[2],
                 what_to_do=_vZ_[2],
                 match$1=_vZ_[1],
                 which_tags=match$1[4],
                 name_filter=match$1[3],
                 only_test_location=match$1[2],
                 libname=match$1[1];
                function f$1(_wm_)
                 {caml_call1(config[1],0);return caml_call1(f$0,0)}
                var
                 descr$0=
                  [246,
                   function(_wl_)
                    {var
                      _wj_=caml_obj_tag(descr),
                      descr$0=
                       250 === _wj_
                        ?descr[1]
                        :246 === _wj_?force_lazy_block(descr):descr,
                      _wk_=
                       caml_string_equal(descr$0,_kb_)?_kc_:symbol(_ke_,descr$0);
                     return caml_call5
                             (sprintf(_kd_),filename,line,start_pos,end_pos,_wk_)}],
                 tags$0=
                  append(tags,flatten(map$0(function(m){return m[2]},t$0))),
                 _v0_=caml_equal([0,libname],dynamic_lib[1]);
                if(_v0_)
                 {var
                   _v1_=
                    only_test_location
                     ?exists
                       (function(param)
                         {var
                           used=param[3],
                           line_number_opt=param[2],
                           filename$0=param[1],
                           position_start=
                            caml_ml_string_length(filename)
                            -
                            caml_ml_string_length(filename$0)
                            |
                            0,
                           _we_=0 <= position_start?1:0;
                          if(_we_)
                           {var
                             end_of_def_filename=
                              sub$0
                               (filename,position_start,caml_ml_string_length(filename$0)),
                             _wf_=caml_string_equal(end_of_def_filename,filename$0);
                            if(_wf_)
                             {var
                               _wg_=0 === position_start?1:0,
                               _wh_=
                                _wg_
                                ||
                                (47 === caml_string_get(filename,position_start - 1 | 0)?1:0);
                              if(_wh_)
                               if(line_number_opt)
                                var
                                 line_number=line_number_opt[1],
                                 _wi_=caml_equal(line,line_number);
                               else
                                var _wi_=1;
                              else
                               var _wi_=_wh_}
                            else
                             var _wi_=_wf_;
                            var found=_wi_}
                          else
                           var found=_we_;
                          if(found)used[1] = 1;
                          return found},
                        only_test_location)
                     :1;
                  if(_v1_)
                   {var
                     _vN_=which_tags[1],
                     _vO_=exists(function(req){return 1 - mem(req,tags$0)},_vN_);
                    if(_vO_)
                     var _v2_=_vO_;
                    else
                     var
                      _vP_=which_tags[2],
                      _v2_=
                       exists(function(dropped){return mem(dropped,tags$0)},_vP_);
                    var _v3_=1 - _v2_;
                    if(_v3_)
                     var
                      _v4_=caml_obj_tag(descr$0),
                      _v5_=
                       250 === _v4_
                        ?descr$0[1]
                        :246 === _v4_?force_lazy_block(descr$0):descr$0,
                      _v6_=
                       name_filter
                        ?exists
                          (function(substring)
                            {var
                              t=create$3(substring,case_sensitive),
                              p=index_internal(0,t,_v5_),
                              _wd_=0 <= p?[0,p]:0;
                             return _wd_?1:0},
                           name_filter)
                        :1,
                      should_run=_v6_;
                    else
                     var should_run=_v3_}
                  else
                   var should_run=_v1_}
                else
                 var should_run=_v0_;
                if(should_run)
                 {if(typeof what_to_do === "number")
                   {var
                     _vQ_=caml_string_notequal(current$0[1],_ka_),
                     _vR_=_vQ_?1 - mem$0(_j__,current$0[1]):_vQ_;
                    return _vR_?add$0(_j__,current$0[1],0):_vR_}
                  var partition=what_to_do[2];
                  if(partition)
                   var p=partition[1],_v7_=caml_string_equal(p,current$0[1]);
                  else
                   var _v7_=1;
                  if(_v7_)
                   {var
                     _v8_=caml_obj_tag(descr$0),
                     descr$1=
                      250 === _v8_
                       ?descr$0[1]
                       :246 === _v8_?force_lazy_block(descr$0):descr$0;
                    tests_ran[1]++;
                    var _v9_=log[1];
                    if(_v9_)
                     {var ch=_v9_[1],_v__=string_of_module_descr(0);
                      caml_call2(fprintf(ch,_kA_),descr$1,_v__)}
                    if(verbose[1])caml_call1(printf(_kB_),descr$1);
                    if(list_test_names[1])
                     var result$0=_kC_;
                    else
                     {var
                       caml_random_state=get_state(0),
                       _vJ_=caml_obj_tag(_hQ_),
                       _vK_=
                        250 === _vJ_
                         ?_hQ_[1]
                         :246 === _vJ_?force_lazy_block(_hQ_):_hQ_,
                       base_random_state=from_val(copy$0(_vK_)),
                       _vS_=caml_obj_tag(saved_caml_random_state),
                       _vT_=
                        250 === _vS_
                         ?saved_caml_random_state[1]
                         :246 === _vS_
                           ?force_lazy_block(saved_caml_random_state)
                           :saved_caml_random_state;
                      set_state(_vT_);
                      var
                       _vU_=caml_obj_tag(saved_base_random_state),
                       _vV_=
                        250 === _vU_
                         ?saved_base_random_state[1]
                         :246 === _vU_
                           ?force_lazy_block(saved_base_random_state)
                           :saved_base_random_state;
                      set_state$0(_vV_);
                      var result=time_without_resetting_random_(f$1);
                      set_state(caml_random_state);
                      set_state$0(base_random_state);
                      var result$0=map(bool_of_f,result)}
                    if(verbose[1])
                     {var _v$_=time_sec[1];caml_call1(printf(_kD_),_v$_)}
                    if(0 === result$0[0])
                     {if(result$0[1])return 0;
                      tests_failed[1]++;
                      var _wa_=string_of_module_descr(0);
                      return caml_call2(eprintf_or_delay(_kE_),descr$1,_wa_)}
                    var
                     match$2=result$0[1],
                     backtrace$0=match$2[2],
                     exn=match$2[1];
                    tests_failed[1]++;
                    var n=caml_ml_string_length(backtrace$0);
                    if(0 === n)
                     var _vW_=0;
                    else
                     {var pos=[0,n - 1 | 0],eol=[0,n],ac=[0,0];
                      if(caml_string_get(backtrace$0,pos[1]) === 10)
                       back_up_at_newline(backtrace$0,pos,eol);
                      for(;;)
                       {if(0 <= pos[1])
                         {if(caml_string_get(backtrace$0,pos[1]) !== 10)
                           {decr(pos);continue}
                          var start=pos[1] + 1 | 0,_vL_=ac[1];
                          ac[1]
                          =
                          [0,sub$2(backtrace$0,start,eol[1] - start | 0),_vL_];
                          back_up_at_newline(backtrace$0,pos,eol);
                          continue}
                        var _vM_=ac[1],_vW_=[0,sub$2(backtrace$0,0,eol[1]),_vM_];
                        break}}
                    var acc=0,param=_vW_;
                    for(;;)
                     {if(param)
                       {var
                         tl=param[2],
                         hd=param[1],
                         _vX_=caml_obj_tag(where_to_cut_backtrace),
                         _vY_=
                          250 === _vX_
                           ?where_to_cut_backtrace[1]
                           :246 === _vX_
                             ?force_lazy_block(where_to_cut_backtrace)
                             :where_to_cut_backtrace;
                        if(1 - (0 <= index_internal(0,_vY_,hd)?1:0))
                         {var acc$0=[0,hd,acc],acc=acc$0,param=tl;continue}}
                      var
                       l=rev$0(acc),
                       f=function(str){return symbol(_kz_,symbol(str,_ky_))},
                       eta=count_map(f,l,0),
                       backtrace=arg(0,eta),
                       match=sexp_of_exn_opt(exn);
                      if(match)
                       var sexp=match[1],exn_str=to_string_hum(_gb_,sexp);
                      else
                       var exn_str=to_string$1(exn);
                      var
                       sep=contains(exn_str,10)?_kF_:_kH_,
                       _wb_=string_of_module_descr(0);
                      return caml_call5
                              (eprintf_or_delay(_kG_),descr$1,sep,exn_str,backtrace,_wb_)}}
                  var _wc_=_v7_}
                else
                 var _wc_=should_run;
                return _wc_},
             set_lib_and_partition=
              function(static_lib,partition)
               {if(dynamic_lib[1])return 0;
                dynamic_lib[1] = [0,static_lib];
                var match=get(0);
                if(typeof match === "number")return 0;
                var
                 match$0=match[2],
                 what_to_do=match$0[2],
                 which_tests=match$0[1],
                 _vI_=caml_string_equal(which_tests[1],static_lib);
                if(_vI_)
                 {var switch$0=0;
                  if(typeof what_to_do !== "number" && ! what_to_do[2])
                   {var requires_partition=0;switch$0 = 1}
                  if(! switch$0)var requires_partition=1;
                  if(caml_string_equal(partition,_kI_) && requires_partition)
                   return k(_kJ_);
                  current$0[1] = partition;
                  return 0}
                return _vI_},
             unset_lib=
              function(static_lib)
               {var _vF_=dynamic_lib[1];
                if(_vF_)
                 {var
                   lib=_vF_[1],
                   _vG_=caml_string_equal(lib,static_lib),
                   _vH_=_vG_?(dynamic_lib[1] = 0,0):_vG_;
                  return _vH_}
                return 0};
            try
             {var switch$3=0,v=caml_sys_getcwd(0);switch$3 = 1}
            catch(exn)
             {exn = caml_wrap_exception(exn);var dir_or_error=[0,3458171,exn]}
            if(switch$3)var dir_or_error=[0,17724,v];
            var
             sexp_of_t$11=
              function(param)
               {var
                 end_pos_037=param[5],
                 start_pos_035=param[4],
                 line_start_033=param[3],
                 line_number_031=param[2],
                 filename_029=param[1],
                 arg_038=caml_call1(sexp_of_int,end_pos_037),
                 bnds_028=[0,[1,[0,_kK_,[0,arg_038,0]]],0],
                 arg_036=caml_call1(sexp_of_int,start_pos_035),
                 bnds_028$0=[0,[1,[0,_kL_,[0,arg_036,0]]],bnds_028],
                 arg_034=caml_call1(sexp_of_int,line_start_033),
                 bnds_028$1=[0,[1,[0,_kM_,[0,arg_034,0]]],bnds_028$0],
                 arg_032=caml_call1(sexp_of_int,line_number_031),
                 bnds_028$2=[0,[1,[0,_kN_,[0,arg_032,0]]],bnds_028$1],
                 arg_030=[0,filename_029],
                 bnds_028$3=[0,[1,[0,_kO_,[0,arg_030,0]]],bnds_028$2];
                return [1,bnds_028$3]},
             compare$14=
              function(a_039,b_040)
               {if(a_039 === b_040)return 0;
                var n=caml_string_compare(a_039[1],b_040[1]);
                if(0 === n)
                 {var n$0=caml_int_compare(a_039[2],b_040[2]);
                  if(0 === n$0)
                   {var n$1=caml_int_compare(a_039[3],b_040[3]);
                    if(0 === n$1)
                     {var n$2=caml_int_compare(a_039[4],b_040[4]);
                      return 0 === n$2?caml_int_compare(a_039[5],b_040[5]):n$2}
                    return n$1}
                  return n$0}
                return n};
            Make$0([0,compare$14,sexp_of_t$11]);
            var
             of_string$9=
              function(s)
               {if(caml_ml_string_length(s) !== 32)invalid_arg(_kP_);
                var i=0;
                for(;;)
                 {var match=caml_string_get(s,i),switch$0=0;
                  if(58 <= match)
                   {if(! (5 < match - 97 >>> 0))switch$0 = 1}
                  else
                   if(48 <= match)switch$0 = 1;
                  if(! switch$0)invalid_arg(_kQ_);
                  var _vE_=i + 1 | 0;
                  if(31 !== i){var i=_vE_;continue}
                  return s}},
             tests_run=[0,0],
             protect$0=
              function(finally$0,f)
               {try
                 {var x=caml_call1(f,0)}
                catch(e)
                 {e = caml_wrap_exception(e);caml_call1(finally$0,0);throw e}
                caml_call1(finally$0,0);
                return x},
             current$1=[0,0],
             set$0=
              function(absolute_filename)
               {return current$1[1]
                        ?k(_kU_)
                        :(current$1[1] = [0,absolute_filename],0)},
             unset=
              function(param)
               {return current$1[1]?(current$1[1] = 0,0):k(_kV_)},
             get_position=
              function(param){return caml_out_channel_pos_fd(stdout)},
             create$4=
              function(param)
               {function try_name(counter)
                 {var counter$0=counter;
                  for(;;)
                   {var name=temp_file_name(temp_dir_name$1,prefix$0,suffix);
                    try
                     {caml_sys_close(caml_sys_open(name,_fW_,384));return name}
                    catch(e)
                     {e = caml_wrap_exception(e);
                      if(e[1] === Sys_error)
                       {if(1000 <= counter$0)throw e;
                        var counter$1=counter$0 + 1 | 0,counter$0=counter$1;
                        continue}
                      throw e}}}
                var name=try_name(0),chan=open_out_gen(_l_,438,name);
                expect_test_collector_before_test(chan,stdout,stderr);
                return [0,0,chan,name]},
             relative_filename=
              function(t)
               {var _vD_=t[3];
                if(3458171 <= dir_or_error[1])
                 {var exn=dir_or_error[2];throw exn}
                var v=dir_or_error[2];
                return is_relative$1(_vD_)?concat$0(v,_vD_):_vD_},
             with_ic=
              function(name,f)
               {var ic=caml_ml_open_descriptor_in(caml_sys_open(name,mode,0));
                caml_ml_set_channel_name(ic,name);
                function _vC_(param){return caml_call1(f,ic)}
                return protect$0
                        (function(param){return caml_ml_close_channel(ic)},_vC_)},
             current_test=[0,0],
             get_current=
              function(param)
               {var _vB_=current_test[1];
                if(_vB_){var match=_vB_[1],t=match[2];return t}
                return k(_kX_)},
             _k6_=
              function(C)
               {function symbol_bind(t,f){return caml_call2(C[2][2],t,f)}
                var
                 return$0=C[2][1],
                 IO_flush=C[2],
                 run=C[3],
                 flushed=C[4],
                 sanitize=C[5],
                 upon_unreleasable_issue=C[6];
                function flush(param)
                 {pp_print_flush(state,0);
                  pp_print_flush(err_formatter,0);
                  caml_ml_flush(stdout);
                  caml_ml_flush(stderr);
                  return caml_call1(C[2][1],0)}
                function extract_output_and_sanitize(ic,len)
                 {var
                   s=caml_call1(sanitize,really_input_string(ic,len)),
                   lexbuf=from_string(0,s),
                   ocaml_lex_state=0;
                  for(;;)
                   {var
                     ocaml_lex_state$0=
                      engine(ocaml_lex_tables$0,ocaml_lex_state,lexbuf);
                    if(0 === ocaml_lex_state$0)
                     var _vA_=1;
                    else
                     {if(1 !== ocaml_lex_state$0)
                       {caml_call1(lexbuf[1],lexbuf);
                        var ocaml_lex_state=ocaml_lex_state$0;
                        continue}
                      b:
                      for(;;)
                       {var ocaml_lex_state$1=44;
                        for(;;)
                         {var
                           ocaml_lex_state$2=
                            engine(ocaml_lex_tables$0,ocaml_lex_state$1,lexbuf);
                          if(2 < ocaml_lex_state$2 >>> 0)
                           {caml_call1(lexbuf[1],lexbuf);
                            var ocaml_lex_state$1=ocaml_lex_state$2;
                            continue}
                          switch(ocaml_lex_state$2)
                           {case 0:var _vz_=1;break;
                            case 1:continue b;
                            default:var _vz_=0}
                          var _vA_=_vz_;
                          break}
                        break}}
                    if(_vA_)
                     {var _vy_=15023 <= upon_unreleasable_issue?_kR_:_kS_;
                      return symbol(caml_call1(sprintf(_kT_),_vy_),s)}
                    return s}}
                function get_outputs_and_cleanup(t)
                 {var last_ofs=get_position(0);
                  expect_test_collector_after_test(stdout,stderr);
                  var _vu_=t[2];
                  caml_ml_flush(_vu_);
                  caml_ml_close_channel(_vu_);
                  var fname=relative_filename(t);
                  function _vv_(param)
                   {return with_ic
                            (fname,
                             function(ic)
                              {var
                                _vw_=rev(t[1]),
                                match=
                                 fold_left
                                  (function(param,_vx_)
                                    {var
                                      next_ofs=_vx_[2],
                                      loc=_vx_[1],
                                      acc=param[2],
                                      ofs=param[1],
                                      s=extract_output_and_sanitize(ic,next_ofs - ofs | 0);
                                     return [0,next_ofs,[0,[0,loc,s],acc]]},
                                   _kY_,
                                   _vw_),
                                outputs=match[2],
                                ofs=match[1],
                                trailing_output=
                                 extract_output_and_sanitize(ic,last_ofs - ofs | 0);
                               return [0,rev(outputs),trailing_output]})}
                  return protect$0
                          (function(param){return caml_sys_remove(fname)},_vv_)}
                function save_output(location)
                 {var t=get_current(0);
                  function _vt_(param)
                   {var pos=get_position(0);
                    t[1] = [0,[0,location,pos],t[1]];
                    return caml_call1(return$0,0)}
                  return symbol_bind(flush(0),_vt_)}
                function save_and_return_output(location)
                 {var t=get_current(0);
                  function _vq_(param)
                   {var pos=get_position(0),_vr_=t[1];
                    if(_vr_)
                     var match=_vr_[1],prev_pos=match[2],prev_pos$0=prev_pos;
                    else
                     var prev_pos$0=0;
                    t[1] = [0,[0,location,pos],t[1]];
                    caml_ml_flush(t[2]);
                    var len=pos - prev_pos$0 | 0;
                    function _vs_(ic)
                     {caml_ml_seek_in(ic,prev_pos$0);
                      return really_input_string(ic,len)}
                    return caml_call1
                            (return$0,with_ic(relative_filename(t),_vs_))}
                  return symbol_bind(flush(0),_vq_)}
                at_exit
                 (function(param)
                   {var _vl_=current_test[1];
                    if(_vl_)
                     {var
                       match=_vl_[1],
                       t=match[2],
                       loc=match[1],
                       match$0=get_outputs_and_cleanup(t),
                       trailing=match$0[2],
                       blocks=match$0[1],
                       _vm_=loc[5] - loc[3] | 0,
                       _vn_=loc[4] - loc[3] | 0,
                       _vo_=loc[2],
                       _vp_=loc[1];
                      caml_call4(eprintf(_kZ_),_vp_,_vo_,_vn_,_vm_);
                      iter
                       (function(param)
                         {var s=param[2];return caml_call1(eprintf(_k0_),s)},
                        blocks);
                      return caml_call1(eprintf(_k1_),trailing)}
                    return 0});
                function final_flush(opt,k)
                 {if(opt)var sth=opt[1],count=sth;else var count=0;
                  var max_attempts=10;
                  function _vk_(param)
                   {return caml_call1(flushed,0)
                            ?caml_call1(k,_k2_)
                            :count === 10
                              ?caml_call1(k,caml_call1(sprintf(_k3_),max_attempts))
                              :final_flush([0,count + 1 | 0],k)}
                  return symbol_bind(flush(0),_vk_)}
                function exec
                 (file_digest,
                  location,
                  expectations,
                  uncaught_exn_expectation,
                  f)
                 {var t=create$4(0);
                  current_test[1] = [0,[0,location,t]];
                  function finally$0(uncaught_exn)
                   {return caml_call1
                            (run,
                             function(param)
                              {var
                                _vi_=
                                 final_flush
                                  (0,
                                   function(append)
                                    {current_test[1] = 0;
                                     var
                                      match=get_outputs_and_cleanup(t),
                                      trailing_output=match[2],
                                      saved_output=match[1],
                                      _vj_=tests_run[1];
                                     tests_run[1]
                                     =
                                     [0,
                                      [0,
                                       file_digest,
                                       location,
                                       expectations,
                                       uncaught_exn_expectation,
                                       saved_output,
                                       symbol(trailing_output,append),
                                       upon_unreleasable_issue,
                                       uncaught_exn],
                                      _vj_];
                                     return caml_call1(return$0,0)});
                               return caml_call1(IO_flush[3],_vi_)})}
                  try
                   {caml_call1(run,f)}
                  catch(exn)
                   {exn = caml_wrap_exception(exn);
                    var bt=caml_get_exception_raw_backtrace(0);
                    return finally$0([0,[0,exn,bt]])}
                  return finally$0(0)}
                function run$0
                 (file_digest,
                  location,
                  defined_in,
                  description,
                  tags,
                  expectations,
                  uncaught_exn_expectation,
                  inline_test_config,
                  f)
                 {function f$0(param)
                   {var _vf_=current$1[1];
                    if(_vf_)
                     var fn=_vf_[1],registering_tests_for=fn;
                    else
                     var registering_tests_for=k(_kW_);
                    if(caml_string_notequal(defined_in,registering_tests_for))
                     {var _vg_=location[2];
                      return caml_call3
                              (ksprintf(k,_k4_),defined_in,_vg_,registering_tests_for)}
                    caml_call1
                     (run,
                      function(param)
                       {var _vh_=flush(0);return caml_call1(IO_flush[3],_vh_)});
                    exec
                     (file_digest,
                      location,
                      expectations,
                      uncaught_exn_expectation,
                      f);
                    return 1}
                  var
                   end_pos=location[5] - location[3] | 0,
                   start_pos=location[4] - location[3] | 0,
                   _vc_=location[2],
                   _vd_=location[1],
                   descr=
                    [246,
                     function(_ve_)
                      {if(description){var s=description[1];return s}return _k5_}];
                  return test_inner
                          (inline_test_config,
                           descr,
                           tags,
                           _vd_,
                           _vc_,
                           start_pos,
                           end_pos,
                           f$0,
                           function(b){return b})}
                return [0,save_output,save_and_return_output,run$0]},
             return$1=function(x){return x},
             bind$1=function(t,f){return caml_call1(f,t)},
             to_run=function(t){return t},
             IO_flush=[0,return$1,bind$1,to_run],
             sanitize=function(s){return s},
             run=function(f){return caml_call1(f,0)},
             flushed=function(param){return 1},
             Error$0=[248,_k8_,caml_fresh_oo_id(0)];
            register_exception(_k9_,[0,Error$0,[0]]);
            (function(exn){throw exn});
            var
             t1=globalThis,
             array_constructor=t1.Array,
             _k7_=[0,[0],IO_flush,run,flushed,sanitize,15023];
            register_printer
             (function(param)
               {if(param[1] === Error$0)
                 {var e=param[2];
                  return [0,caml_string_of_jsstring(e.toString())]}
                return 0});
            register_printer
             (function(e)
               {return e instanceof array_constructor
                        ?0
                        :[0,caml_string_of_jsstring(e.toString())]});
            var coverage=[246,function(_vb_){return create$1(0,17)}];
            make_self_init(0);
            var Unix_error=[248,_k__,caml_fresh_oo_id(0)];
            register_exception(_lb_,[0,Unix_error,0,_la_,_k$_]);
            register_printer
             (function(param)
               {if(param[1] === Unix_error)
                 {var s=param[4],s$0=param[3],e=param[2];
                  if(typeof e === "number")
                   {var _va_=e;
                    if(34 <= _va_)
                     switch(_va_)
                      {case 34:var msg=_lL_;break;
                       case 35:var msg=_lM_;break;
                       case 36:var msg=_lN_;break;
                       case 37:var msg=_lO_;break;
                       case 38:var msg=_lP_;break;
                       case 39:var msg=_lQ_;break;
                       case 40:var msg=_lR_;break;
                       case 41:var msg=_lS_;break;
                       case 42:var msg=_lT_;break;
                       case 43:var msg=_lU_;break;
                       case 44:var msg=_lV_;break;
                       case 45:var msg=_lW_;break;
                       case 46:var msg=_lX_;break;
                       case 47:var msg=_lY_;break;
                       case 48:var msg=_lZ_;break;
                       case 49:var msg=_l0_;break;
                       case 50:var msg=_l1_;break;
                       case 51:var msg=_l2_;break;
                       case 52:var msg=_l3_;break;
                       case 53:var msg=_l4_;break;
                       case 54:var msg=_l5_;break;
                       case 55:var msg=_l6_;break;
                       case 56:var msg=_l7_;break;
                       case 57:var msg=_l8_;break;
                       case 58:var msg=_l9_;break;
                       case 59:var msg=_l__;break;
                       case 60:var msg=_l$_;break;
                       case 61:var msg=_ma_;break;
                       case 62:var msg=_mb_;break;
                       case 63:var msg=_mc_;break;
                       case 64:var msg=_md_;break;
                       case 65:var msg=_me_;break;
                       case 66:var msg=_mf_;break;
                       default:var msg=_mg_}
                    else
                     switch(_va_)
                      {case 0:var msg=_lc_;break;
                       case 1:var msg=_le_;break;
                       case 2:var msg=_lf_;break;
                       case 3:var msg=_lg_;break;
                       case 4:var msg=_lh_;break;
                       case 5:var msg=_li_;break;
                       case 6:var msg=_lj_;break;
                       case 7:var msg=_lk_;break;
                       case 8:var msg=_ll_;break;
                       case 9:var msg=_lm_;break;
                       case 10:var msg=_ln_;break;
                       case 11:var msg=_lo_;break;
                       case 12:var msg=_lp_;break;
                       case 13:var msg=_lq_;break;
                       case 14:var msg=_lr_;break;
                       case 15:var msg=_ls_;break;
                       case 16:var msg=_lt_;break;
                       case 17:var msg=_lu_;break;
                       case 18:var msg=_lv_;break;
                       case 19:var msg=_lw_;break;
                       case 20:var msg=_lx_;break;
                       case 21:var msg=_ly_;break;
                       case 22:var msg=_lz_;break;
                       case 23:var msg=_lA_;break;
                       case 24:var msg=_lB_;break;
                       case 25:var msg=_lC_;break;
                       case 26:var msg=_lD_;break;
                       case 27:var msg=_lE_;break;
                       case 28:var msg=_lF_;break;
                       case 29:var msg=_lG_;break;
                       case 30:var msg=_lH_;break;
                       case 31:var msg=_lI_;break;
                       case 32:var msg=_lJ_;break;
                       default:var msg=_lK_}}
                  else
                   var x=e[1],msg=caml_call1(sprintf(_mh_),x);
                  return [0,caml_call3(sprintf(_ld_),msg,s$0,s)]}
                return 0});
            unix_inet_addr_of_string(_mi_);
            unix_inet_addr_of_string(_mj_);
            try
             {unix_inet_addr_of_string(_pB_)}
            catch(_u$_)
             {_u$_ = caml_wrap_exception(_u$_);
              if(_u$_[1] !== Failure)throw _u$_}
            try
             {unix_inet_addr_of_string(_pA_)}
            catch(_u__)
             {_u__ = caml_wrap_exception(_u__);
              if(_u__[1] !== Failure)throw _u__}
            create$1(0,7);
            var
             default_bisect_file=[0,_mk_],
             default_bisect_silent=[0,_ml_],
             sigterm_enable=[0,0],
             bisect_file_written=[0,0],
             env_to_boolean=
              function(env,default$0)
               {try
                 {var
                   match=uppercase$0(caml_sys_getenv(env)),
                   default$1=
                    caml_string_notequal(match,_mm_)
                     ?caml_string_notequal(match,_mn_)?default$0:1
                     :0;
                  return default$1}
                catch(_u9_)
                 {_u9_ = caml_wrap_exception(_u9_);
                  if(_u9_ === Not_found)return default$0;
                  throw _u9_}},
             dump_at_exit=
              function(param)
               {var _u8_=1 - bisect_file_written[1];
                return _u8_
                        ?sigterm_enable[1]?(bisect_file_written[1] = 1,0):0
                        :_u8_},
             register_dump=[246,function(_u7_){return at_exit(dump_at_exit)}],
             register_sigterm_hander=[246,function(param){return 0}],
             register_file=
              function
               (bisect_file,bisect_silent,bisect_sigterm,filename,points)
               {if(bisect_file)
                 {var v=bisect_file[1];default_bisect_file[1] = v}
                if(bisect_silent)
                 {var v$0=bisect_silent[1];default_bisect_silent[1] = v$0}
                sigterm_enable[1] = env_to_boolean(_mo_,bisect_sigterm);
                if(sigterm_enable[1])
                 {var _u3_=caml_obj_tag(register_sigterm_hander);
                  if(250 !== _u3_ && 246 === _u3_)
                   force_lazy_block(register_sigterm_hander)}
                var _u4_=caml_obj_tag(register_dump);
                if(250 !== _u4_ && 246 === _u4_)
                 force_lazy_block(register_dump);
                var
                 counts=caml_make_vect(points.length - 1,0),
                 _u2_=caml_obj_tag(coverage),
                 coverage$0=
                  250 === _u2_
                   ?coverage[1]
                   :246 === _u2_?force_lazy_block(coverage):coverage;
                if(1 - mem$0(coverage$0,filename))
                 add$0(coverage$0,filename,[0,filename,points,counts]);
                return [0,
                        -902501973,
                        function(index)
                         {var
                           current_count=caml_check_bound(counts,index)[1 + index],
                           _u5_=current_count < 2147483647?1:0,
                           _u6_=
                            _u5_
                             ?(caml_check_bound(counts,index)[1 + index]
                               =
                               current_count
                               +
                               1
                               |
                               0,
                               0)
                             :_u5_;
                          return _u6_}]},
             points=_mp_.slice(),
             match$2=register_file(0,0,0,_mq_,points),
             bisect_visit=match$2[2],
             bisect_post_visit=
              function(point_index,result)
               {caml_call1(bisect_visit,point_index);return result};
            set$0(_mr_);
            set_lib_and_partition(_mt_,_ms_);
            var
             cons$0=function(a,b){caml_call1(bisect_visit,0);return [2,a,b]},
             var$0=function(n){caml_call1(bisect_visit,2);return [0,n]},
             pp$5=
              function(ppf,param)
               {if(typeof param === "number")
                 {caml_call1(bisect_visit,6);
                  return caml_call1(fprintf$0(ppf),_mu_)}
                else
                 switch(param[0])
                  {case 0:
                    var s=param[1];
                    caml_call1(bisect_visit,3);
                    return caml_call2(fprintf$0(ppf),_mv_,s);
                   case 1:
                    var s$0=param[1];
                    caml_call1(bisect_visit,4);
                    return caml_call2(fprintf$0(ppf),_mw_,s$0);
                   default:
                    var r=param[2],l=param[1];
                    caml_call1(bisect_visit,5);
                    return caml_call5(fprintf$0(ppf),_mx_,pp$5,l,pp$5,r)}},
             _my_=function(n,acc){caml_call1(bisect_visit,7);return [3,n,acc]},
             fresh=
              bisect_post_visit
               (8,function(_u0_,_u1_){return fold_right(_my_,_u0_,_u1_)}),
             pp_goal=
              function(ppf,param)
               {switch(param[0])
                 {case 0:
                   var r=param[2],l=param[1];
                   caml_call1(bisect_visit,12);
                   return caml_call5(fprintf$0(ppf),_mz_,pp$5,l,pp$5,r);
                  case 1:
                   var _uQ_=param[1];
                   if(_uQ_)
                    {caml_call1(bisect_visit,14);
                     return pp_print_list
                             ([0,
                               function(ppf,param)
                                {caml_call1(bisect_visit,10);
                                 return caml_call1(fprintf$0(ppf),_mA_)}],
                              pp_goal,
                              ppf,
                              _uQ_)}
                   break;
                  case 2:
                   var _uR_=param[1];
                   if(_uR_)
                    {caml_call1(bisect_visit,13);
                     var
                      _uS_=[0,pp_print_space],
                      _uT_=
                       bisect_post_visit
                        (9,
                         function(_uY_,_uZ_)
                          {return pp_print_list(_uS_,pp_goal,_uY_,_uZ_)});
                     return caml_call3(fprintf$0(ppf),_mC_,_uT_,_uR_)}
                   break;
                  case 3:
                   var g=param[2],s=param[1];
                   caml_call1(bisect_visit,15);
                   return caml_call4(fprintf$0(ppf),_mD_,s,pp_goal,g);
                  case 4:
                   var args=param[2],name=param[1];
                   caml_call1(bisect_visit,16);
                   var
                    _uU_=[0,pp_print_space],
                    _uV_=
                     bisect_post_visit
                      (11,
                       function(_uW_,_uX_)
                        {return pp_print_list(_uU_,pp$5,_uW_,_uX_)});
                   return caml_call4(fprintf$0(ppf),_mE_,name,_uV_,args);
                  default:
                   caml_call1(bisect_visit,17);
                   return caml_call1(fprintf$0(ppf),_mF_)}
                throw [0,Assert_failure,_mB_]},
             include$10=___([0,compare$0]),
             empty=include$10[1],
             add$2=include$10[4],
             find=include$10[28],
             var$1=function(x){caml_call1(bisect_visit,22);return [0,x]},
             symbol$41=function(s){caml_call1(bisect_visit,23);return [1,s]},
             cons$1=function(x,y){caml_call1(bisect_visit,24);return [2,x,y]};
            bisect_post_visit(25,symbol$41(_mG_));
            bisect_post_visit(26,symbol$41(_mH_));
            var
             par=
              function(p,ppf,x)
               {caml_call1(bisect_visit,36);
                var switch$0=0;
                if(typeof x !== "number" && 2 === x[0])
                 {caml_call1(bisect_visit,40);var _uP_=1;switch$0 = 1}
                if(! switch$0)
                 {if(typeof x === "number")
                   caml_call1(bisect_visit,39);
                  else
                   switch(x[0])
                    {case 0:caml_call1(bisect_visit,38);break;
                     case 1:caml_call1(bisect_visit,37);break
                     }
                  var _uP_=0}
                return _uP_
                        ?(caml_call1(bisect_visit,35),
                          caml_call3(fprintf$0(ppf),_mI_,p,x))
                        :(caml_call1(bisect_visit,34),caml_call2(p,ppf,x))},
             helper=
              function(ppf,param)
               {if(typeof param === "number")
                 {caml_call1(bisect_visit,33);
                  return caml_call1(fprintf$0(ppf),_mJ_)}
                else
                 switch(param[0])
                  {case 0:
                    var n=param[1];
                    caml_call1(bisect_visit,30);
                    return caml_call2(fprintf$0(ppf),_mK_,n);
                   case 1:
                    var s=param[1];
                    caml_call1(bisect_visit,31);
                    return caml_call2(fprintf$0(ppf),_mL_,s);
                   default:
                    var r=param[2],l=param[1];
                    caml_call1(bisect_visit,32);
                    var
                     _uJ_=
                      bisect_post_visit
                       (29,function(_uN_,_uO_){return par(helper,_uN_,_uO_)}),
                     _uK_=
                      bisect_post_visit
                       (28,function(_uL_,_uM_){return par(helper,_uL_,_uM_)});
                    return caml_call5(fprintf$0(ppf),_mM_,_uK_,l,_uJ_,r)}},
             pp$6=
              bisect_post_visit
               (27,function(_uH_,_uI_){return par(helper,_uH_,_uI_)}),
             walk=
              function(subst)
               {caml_call1(bisect_visit,49);
                return function(param)
                 {if(typeof param === "number")
                   {caml_call1(bisect_visit,48);return 0}
                  else
                   switch(param[0])
                    {case 0:
                      var v=param[1];
                      caml_call1(bisect_visit,45);
                      try
                       {var t2=caml_call2(find,v,subst)}
                      catch(_uG_)
                       {_uG_ = caml_wrap_exception(_uG_);
                        if(_uG_ === Not_found)
                         {caml_call1(bisect_visit,41);return [0,v]}
                        throw _uG_}
                      caml_call1(bisect_visit,42);
                      return caml_call1(walk(subst),t2);
                     case 1:
                      var s=param[1];caml_call1(bisect_visit,46);return [1,s];
                     default:
                      var r=param[2],l=param[1];
                      caml_call1(bisect_visit,47);
                      var _uF_=bisect_post_visit(44,caml_call1(walk(subst),r));
                      return cons$1
                              (bisect_post_visit(43,caml_call1(walk(subst),l)),_uF_)}}},
             ppw=
              function(s,ppf,x)
               {caml_call1(bisect_visit,51);
                return caml_call2
                        (pp$6,ppf,bisect_post_visit(50,caml_call1(walk(s),x)))},
             unify=
              function(acc,x,y)
               {caml_call1(bisect_visit,74);
                var
                 rhs=bisect_post_visit(72,caml_call1(walk(acc),x)),
                 match=bisect_post_visit(73,caml_call1(walk(acc),y)),
                 switch$0=0;
                if(typeof rhs === "number")
                 {if(typeof match === "number")
                   {caml_call1(bisect_visit,62);return [0,acc]}
                  else
                   if(0 !== match[0])switch$0 = 1}
                else
                 switch(rhs[0])
                  {case 0:
                    if(typeof match !== "number" && 0 === match[0])
                     {var m=match[1],n$0=rhs[1];
                      caml_call1(bisect_visit,57);
                      return n$0 === m
                              ?(caml_call1(bisect_visit,56),[0,acc])
                              :(caml_call1(bisect_visit,58),
                                [0,bisect_post_visit(52,caml_call3(add$2,n$0,match,acc))])}
                    var n=rhs[1],rhs$0=match;
                    switch$0 = 2;
                    break;
                   case 1:
                    var switch$1=0,_uB_=rhs[1];
                    if(typeof match !== "number")
                     switch(match[0])
                      {case 2:break;
                       case 0:switch$1 = 1;break;
                       default:
                        var n$1=match[1];
                        caml_call1(bisect_visit,60);
                        return caml_string_equal(n$1,_uB_)
                                ?(caml_call1(bisect_visit,59),[0,acc])
                                :(caml_call1(bisect_visit,61),0)}
                    if(! switch$1)switch$0 = 1;
                    break;
                   default:
                    var switch$2=0,_uC_=rhs[2],_uD_=rhs[1];
                    if(typeof match !== "number")
                     switch(match[0])
                      {case 1:break;
                       case 0:switch$2 = 1;break;
                       default:
                        var r2=match[2],l2=match[1];
                        caml_call1(bisect_visit,65);
                        var
                         _uE_=
                          function(acc)
                           {caml_call1(bisect_visit,55);return unify(acc,_uC_,r2)};
                        return caml_call2
                                (symbol_bind,bisect_post_visit(54,unify(acc,_uD_,l2)),_uE_)}
                    if(! switch$2)switch$0 = 1}
                switch(switch$0)
                 {case 0:var n=match[1],rhs$0=rhs;break;
                  case 2:break;
                  default:
                   var switch$3=0;
                   if(typeof rhs === "number")
                    {var switch$4=0;
                     if(typeof match !== "number")
                      switch(match[0])
                       {case 0:break;
                        case 1:caml_call1(bisect_visit,71);switch$4 = 1;break;
                        default:caml_call1(bisect_visit,68);switch$4 = 1}
                     if(switch$4)switch$3 = 1}
                   else
                    switch(rhs[0])
                     {case 0:break;
                      case 1:
                       var switch$5=0;
                       if(typeof match === "number")
                        caml_call1(bisect_visit,70);
                       else
                        if(2 === match[0])
                         caml_call1(bisect_visit,66);
                        else
                         switch$5 = 1;
                       if(! switch$5)switch$3 = 1;
                       break;
                      default:
                       var switch$6=0;
                       if(typeof match === "number")
                        caml_call1(bisect_visit,69);
                       else
                        if(1 === match[0])
                         caml_call1(bisect_visit,67);
                        else
                         switch$6 = 1;
                       if(! switch$6)switch$3 = 1}
                   return 0}
                var switch$7=0;
                if(typeof match !== "number" && 0 === match[0])
                 {caml_call1(bisect_visit,63);switch$7 = 1}
                var switch$8=0;
                if(! switch$7)
                 {var switch$9=0;
                  if(typeof rhs !== "number" && 0 === rhs[0])
                   {caml_call1(bisect_visit,64);switch$9 = 1}
                  if(! switch$9)switch$8 = 1}
                return [0,bisect_post_visit(53,caml_call3(add$2,n,rhs$0,acc))]},
             include$11=___([0,compare]),
             empty$0=include$11[1],
             add$3=include$11[4],
             merge=include$11[8],
             iter$1=include$11[12],
             find$0=include$11[28],
             find_opt=include$11[29],
             pp$7=
              function(onval,ppf,s)
               {caml_call1(bisect_visit,78);
                bisect_post_visit(77,caml_call1(fprintf$0(ppf),_mN_));
                bisect_post_visit
                 (76,
                  caml_call2
                   (iter$1,
                    function(n)
                     {caml_call1(bisect_visit,75);
                      return caml_call3(fprintf$0(ppf),_mO_,n,onval)},
                    s));
                return caml_call1(fprintf$0(ppf),_mP_)},
             default_env=[0,empty$0,empty,empty$0],
             add_var=
              function(name,t,st)
               {caml_call1(bisect_visit,80);
                var _uz_=st[3],_uA_=st[2];
                return [0,
                        bisect_post_visit(79,caml_call3(add$3,name,t,st[1])),
                        _uA_,
                        _uz_]},
             add_rel=
              function(name,args,g,st)
               {caml_call1(bisect_visit,84);
                var
                 _uy_=
                  bisect_post_visit
                   (83,caml_call3(add$3,name,[0,name,args,g],st[3]));
                return [0,st[1],st[2],_uy_]},
             pp_error=
              function(ppf,param)
               {if(typeof param === "number")
                 {caml_call1(bisect_visit,85);
                  return caml_call1(fprintf$0(ppf),_mQ_)}
                if(-818909439 <= param[1])
                 {var s=param[2];
                  caml_call1(bisect_visit,87);
                  return caml_call2(fprintf$0(ppf),_mR_,s)}
                var s$0=param[2];
                caml_call1(bisect_visit,86);
                return caml_call2(fprintf$0(ppf),_mS_,s$0)},
             fail=function(e,st){caml_call1(bisect_visit,89);return [1,e]},
             return$2=
              function(x,st){caml_call1(bisect_visit,90);return [0,[0,st,x]]},
             bind$2=
              function(x,f,st)
               {caml_call1(bisect_visit,97);
                var match=caml_call1(x,st);
                if(0 === match[0])
                 {var match$0=match[1],r=match$0[2],st$0=match$0[1];
                  caml_call1(bisect_visit,95);
                  return caml_call2(f,r,st$0)}
                var e=match[1];
                caml_call1(bisect_visit,96);
                return [1,e]},
             symbol$42=
              function(f,x,st)
               {caml_call1(bisect_visit,103);
                function _uw_(param)
                 {var f=param[2],st=param[1];
                  caml_call1(bisect_visit,102);
                  function _ux_(param)
                   {var x=param[2],st=param[1];
                    caml_call1(bisect_visit,101);
                    return [0,[0,st,bisect_post_visit(100,caml_call1(f,x))]]}
                  return bind(bisect_post_visit(99,caml_call1(x,st)),_ux_)}
                return bind(bisect_post_visit(98,caml_call1(f,st)),_uw_)},
             read=
              function(st){caml_call1(bisect_visit,106);return [0,[0,st,st]]},
             put=
              function(st0,st)
               {caml_call1(bisect_visit,113);return return$2(0,st0)},
             mapm=
              function(f,param)
               {if(param)
                 {var xs=param[2],x=param[1];
                  caml_call1(bisect_visit,123);
                  var
                   _un_=bisect_post_visit(121,mapm(f,xs)),
                   _uo_=bisect_post_visit(119,caml_call1(f,x)),
                   _up_=
                    bisect_post_visit
                     (118,function(_uv_){return return$2(cons,_uv_)}),
                   _uq_=
                    bisect_post_visit
                     (120,function(_uu_){return symbol$42(_up_,_uo_,_uu_)});
                  return function(_ut_){return symbol$42(_uq_,_un_,_ut_)}}
                caml_call1(bisect_visit,122);
                var _ur_=0;
                return function(_us_){return return$2(_ur_,_us_)}},
             nil=0,
             return$3=function(x){caml_call1(bisect_visit,137);return [0,x,0]},
             mplus=
              function(x,y)
               {var x$0=x,y$0=y;
                for(;;)
                 {caml_call1(bisect_visit,149);
                  if(typeof x$0 === "number")
                   {caml_call1(bisect_visit,146);return y$0}
                  else
                   {if(0 === x$0[0])
                     {var l=x$0[2],x$1=x$0[1];
                      caml_call1(bisect_visit,148);
                      return [0,
                              x$1,
                              [246,
                               function(param)
                                {caml_call1(bisect_visit,145);
                                 var
                                  _ul_=caml_obj_tag(l),
                                  _um_=250 === _ul_?l[1]:246 === _ul_?force_lazy_block(l):l;
                                 return mplus(y$0,bisect_post_visit(144,_um_))}]]}
                    var l$0=x$0[1];
                    caml_call1(bisect_visit,147);
                    var
                     _uj_=caml_obj_tag(l$0),
                     _uk_=
                      250 === _uj_?l$0[1]:246 === _uj_?force_lazy_block(l$0):l$0,
                     y$1=bisect_post_visit(143,_uk_),
                     x$0=y$0,
                     y$0=y$1;
                    continue}}},
             from_funm=
              function(f)
               {caml_call1(bisect_visit,162);
                function _ue_(param)
                 {caml_call1(bisect_visit,161);return caml_call1(f,0)}
                var
                 _uf_=0,
                 _ug_=
                  bisect_post_visit
                   (160,function(_ui_){return return$2(_uf_,_ui_)});
                return function(_uh_){return bind$2(_ug_,_ue_,_uh_)}},
             bindm=
              function(s,f)
               {caml_call1(bisect_visit,178);
                function _tW_(init)
                 {caml_call1(bisect_visit,177);
                  if(typeof init === "number")
                   {caml_call1(bisect_visit,174);
                    var _tY_=0;
                    return function(_t1_){return return$2(_tY_,_t1_)}}
                  else
                   {if(0 === init[0])
                     {var s=init[2],x=init[1];
                      caml_call1(bisect_visit,175);
                      var
                       _tZ_=
                        function(l)
                         {caml_call1(bisect_visit,169);
                          function _t7_(r)
                           {caml_call1(bisect_visit,164);
                            var _uc_=bisect_post_visit(163,mplus(l,r));
                            return function(_ud_){return return$2(_uc_,_ud_)}}
                          var
                           _t8_=
                            bisect_post_visit
                             (168,
                              from_funm
                               (function(param)
                                 {caml_call1(bisect_visit,167);
                                  var
                                   _t__=caml_obj_tag(s),
                                   _t$_=250 === _t__?s[1]:246 === _t__?force_lazy_block(s):s,
                                   _ua_=bisect_post_visit(165,_t$_);
                                  return bindm
                                          (bisect_post_visit
                                            (166,function(_ub_){return return$2(_ua_,_ub_)}),
                                           f)}));
                          return function(_t9_){return bind$2(_t8_,_t7_,_t9_)}},
                       _t0_=bisect_post_visit(170,caml_call1(f,x));
                      return function(_t6_){return bind$2(_t0_,_tZ_,_t6_)}}
                    var zz=init[1];
                    caml_call1(bisect_visit,176);
                    return from_funm
                            (function(param)
                              {caml_call1(bisect_visit,173);
                               var
                                _t2_=caml_obj_tag(zz),
                                _t3_=250 === _t2_?zz[1]:246 === _t2_?force_lazy_block(zz):zz,
                                _t4_=bisect_post_visit(171,_t3_);
                               return bindm
                                       (bisect_post_visit
                                         (172,function(_t5_){return return$2(_t4_,_t5_)}),
                                        f)})}}
                return function(_tX_){return bind$2(s,_tW_,_tX_)}},
             last=[0,10],
             ender=
              function(x)
               {caml_call1(bisect_visit,191);
                bisect_post_visit(190,caml_call1(t1.endf,0));
                return x};
            unset_lib(_m9_);
            unset(0);
            var
             points$0=_m__.slice(),
             match$3=register_file(0,0,0,_m$_,points$0),
             bisect_visit$0=match$3[2],
             bisect_post_visit$0=
              function(point_index,result)
               {caml_call1(bisect_visit$0,point_index);return result};
            set$0(_na_);
            set_lib_and_partition(_nc_,_nb_);
            var
             run_optimistically=
              function(opt,_rA_,_rz_,g,st)
               {if(opt)
                 var sth$0=opt[1],sth$1=sth$0;
                else
                 {caml_call1(bisect_visit$0,0);var sth$1=0}
                if(_rA_)
                 var sth$2=_rA_[1],sth$3=sth$2;
                else
                 {caml_call1(bisect_visit$0,1);var sth$3=0}
                if(_rz_)
                 var sth$4=_rz_[1],sth$5=sth$4;
                else
                 {caml_call1(bisect_visit$0,2);var sth$5=0}
                caml_call1(bisect_visit$0,7);
                bisect_post_visit$0(6,caml_call2(printf$0(_nd_),pp_goal,g));
                caml_call1(bisect_visit,325);
                function eval$0(root)
                 {var root$0=root;
                  for(;;)
                   {caml_call1(bisect_visit,311);
                    switch(root$0[0])
                     {case 0:
                       var r=root$0[2],l=root$0[1];
                       caml_call1(bisect_visit,305);
                       bisect_post_visit(225,caml_call1(t1.unifyf,[0,[0,l,r],0]));
                       var
                        _r2_=
                         function(l)
                          {caml_call1(bisect_visit,222);
                           function _tw_(r)
                            {caml_call1(bisect_visit,220);
                             function _tz_(st)
                              {var lvars=st[2];
                               caml_call1(bisect_visit,219);
                               var
                                ppw$0=
                                 bisect_post_visit
                                  (218,function(_tK_,_tL_){return ppw(lvars,_tK_,_tL_)}),
                                match=unify(lvars,l,r);
                               if(match)
                                {var subst2=match[1];
                                 caml_call1(bisect_visit,217);
                                 if(sth$3)
                                  {caml_call1(bisect_visit,215);
                                   bisect_post_visit
                                    (214,caml_call4(printf$0(_mT_),ppw$0,l,ppw$0,r))}
                                 caml_call1(bisect_visit,213);
                                 var
                                  _tB_=
                                   function(param)
                                    {caml_call1(bisect_visit,211);
                                     var _tH_=bisect_post_visit(210,return$3(subst2));
                                     return function(_tI_){return return$2(_tH_,_tI_)}},
                                  _tC_=[0,st[1],subst2,st[3]],
                                  _tD_=
                                   bisect_post_visit(212,function(_tG_){return put(_tC_,_tG_)}),
                                  _tE_=function(_tF_){return bind$2(_tD_,_tB_,_tF_)}}
                               else
                                {caml_call1(bisect_visit,216);
                                 if(sth$3)
                                  {caml_call1(bisect_visit,209);
                                   bisect_post_visit
                                    (208,caml_call4(printf$0(_mU_),ppw$0,l,ppw$0,r))}
                                 caml_call1(bisect_visit,207);
                                 var
                                  _tE_=
                                   bisect_post_visit
                                    (206,function(_tJ_){return return$2(nil,_tJ_)})}
                               return ender(_tE_)}
                             return function(_tA_){return bind$2(read,_tz_,_tA_)}}
                           var _tx_=bisect_post_visit(221,eval_term(r));
                           return function(_ty_){return bind$2(_tx_,_tw_,_ty_)}},
                        _r3_=bisect_post_visit(223,eval_term(l));
                       return function(_tv_){return bind$2(_r3_,_r2_,_tv_)};
                      case 1:
                       var _r4_=root$0[1];
                       if(_r4_)
                        {var _r5_=_r4_[1];
                         if(_r4_[2])
                          {var xs=_r4_[2];
                           caml_call1(bisect_visit,308);
                           bisect_post_visit(245,caml_call1(t1.anyf,_mV_));
                           var
                            _r6_=
                             function(st)
                              {caml_call1(bisect_visit,243);
                               function _tp_(subst)
                                {caml_call1(bisect_visit,241);
                                 function _tq_(param)
                                  {caml_call1(bisect_visit,240);return eval$0([1,xs])}
                                 var
                                  _tr_=[0,st[1],subst,st[3]],
                                  _ts_=
                                   bisect_post_visit(239,function(_tu_){return put(_tr_,_tu_)});
                                 return function(_tt_){return bind$2(_ts_,_tq_,_tt_)}}
                               return ender
                                       (bisect_post_visit
                                         (242,bindm(bisect_post_visit(238,eval$0(_r5_)),_tp_)))};
                           return function(_to_){return bind$2(read,_r6_,_to_)}}
                         caml_call1(bisect_visit,307);
                         bisect_post_visit(237,caml_call1(t1.anyf,_mW_));
                         var root$0=_r5_;
                         continue}
                       throw [0,Assert_failure,_mX_];
                      case 2:
                       var _r7_=root$0[1];
                       if(_r7_)
                        {var xs$0=_r7_[2],x=_r7_[1];
                         caml_call1(bisect_visit,306);
                         bisect_post_visit(235,caml_call1(t1.anyf,_mY_));
                         var
                          _r8_=
                           function(st)
                            {caml_call1(bisect_visit,233);
                             var
                              acc$1=bisect_post_visit(232,eval$0(x)),
                              acc=acc$1,
                              param=xs$0;
                             for(;;)
                              {if(param)
                                {var param$0=param[2],x$0=param[1];
                                 caml_call1(bisect_visit,127);
                                 var
                                  _tb_=
                                   function(x)
                                     {return function(acc)
                                       {caml_call1(bisect_visit,124);
                                        caml_call1(bisect_visit,231);
                                        function _te_(param)
                                         {caml_call1(bisect_visit,229);
                                          var
                                           _ti_=bisect_post_visit(228,eval$0(x)),
                                           _tj_=
                                            bisect_post_visit
                                             (226,function(_tn_){return mplus(acc,_tn_)}),
                                           _tk_=
                                            bisect_post_visit
                                             (227,function(_tm_){return return$2(_tj_,_tm_)});
                                          return function(_tl_){return symbol$42(_tk_,_ti_,_tl_)}}
                                        var
                                         _tf_=
                                          bisect_post_visit(230,function(_th_){return put(st,_th_)});
                                        return function(_tg_){return bind$2(_tf_,_te_,_tg_)}}}
                                    (x$0),
                                  acc$0=
                                   bisect_post_visit
                                    (125,
                                     function(acc,_tc_)
                                       {return function(_td_){return bind$2(acc,_tc_,_td_)}}
                                      (acc,_tb_)),
                                  acc=acc$0,
                                  param=param$0;
                                 continue}
                               caml_call1(bisect_visit,126);
                               return acc}};
                         return function(_ta_){return bind$2(read,_r8_,_ta_)}}
                       throw [0,Assert_failure,_mZ_];
                      case 3:
                       var rhs=root$0[2],name=root$0[1];
                       caml_call1(bisect_visit,309);
                       bisect_post_visit(254,caml_call1(t1.freshf,name));
                       var
                        _r9_=
                         function(st)
                          {caml_call1(bisect_visit,252);
                           caml_call1(bisect_visit,188);
                           last[1]++;
                           bisect_post_visit(187,0);
                           var
                            term=
                             bisect_post_visit(251,var$1(bisect_post_visit(250,last[1]))),
                            svars=
                             bisect_post_visit(249,caml_call3(add$3,name,term,st[1]));
                           function _s7_(param)
                            {caml_call1(bisect_visit,247);
                             return from_funm
                                     (function(param)
                                       {caml_call1(bisect_visit,246);return eval$0(rhs)})}
                           var
                            _s8_=[0,svars,st[2],st[3]],
                            _s9_=
                             bisect_post_visit(248,function(_s$_){return put(_s8_,_s$_)});
                           return function(_s__){return bind$2(_s9_,_s7_,_s__)}};
                       return function(_s6_){return bind$2(read,_r9_,_s6_)};
                      case 4:
                       var args=root$0[2],fname=root$0[1];
                       caml_call1(bisect_visit,310);
                       bisect_post_visit
                        (303,caml_call1(t1.callf,[0,[0,fname,args],0]));
                       var
                        _r__=
                         function(st)
                          {caml_call1(bisect_visit,301);
                           try
                            {var val=caml_call2(find$0,fname,st[3])}
                           catch(_s4_)
                            {_s4_ = caml_wrap_exception(_s4_);
                             if(_s4_ === Not_found)
                              {caml_call1(bisect_visit,299);
                               var _sb_=[0,-818909439,fname];
                               return function(_s5_){return fail(_sb_,_s5_)}}
                             throw _s4_}
                           var body=val[3],formal_args=val[2];
                           caml_call1(bisect_visit,300);
                           var _sc_=bisect_post_visit(297,length(args));
                           if(bisect_post_visit(296,length(formal_args)) === _sc_)
                            {bisect_post_visit(298,0);
                             var
                              _sd_=
                               function(walked_args)
                                {caml_call1(bisect_visit,291);
                                 function _sl_(new_svars)
                                  {caml_call1(bisect_visit,285);
                                   if(sth$5)
                                    {caml_call1(bisect_visit,284);
                                     var
                                      _sv_=
                                       function(ppf,t)
                                        {caml_call1(bisect_visit,281);
                                         return caml_call2
                                                 (pp$6,ppf,bisect_post_visit(280,caml_call1(walk(st[2]),t)))},
                                      _sw_=
                                       bisect_post_visit
                                        (282,function(_s2_,_s3_){return pp$7(_sv_,_s2_,_s3_)});
                                     bisect_post_visit
                                      (283,caml_call2(printf$0(_m0_),_sw_,new_svars));
                                     var
                                      _sx_=st[1],
                                      _sy_=
                                       function(ppf,t)
                                        {caml_call1(bisect_visit,277);
                                         return caml_call2
                                                 (pp$6,ppf,bisect_post_visit(276,caml_call1(walk(st[2]),t)))},
                                      _sz_=
                                       bisect_post_visit
                                        (278,function(_s0_,_s1_){return pp$7(_sy_,_s0_,_s1_)});
                                     bisect_post_visit(279,caml_call2(printf$0(_m1_),_sz_,_sx_))}
                                   caml_call1(bisect_visit,275);
                                   var
                                    _sA_=st[1],
                                    new_svars$0=
                                     bisect_post_visit
                                      (274,
                                       caml_call3
                                        (merge,
                                         function(k,old,match)
                                          {caml_call1(bisect_visit,273);
                                           if(match)
                                            {var n=match[1];caml_call1(bisect_visit,271);return [0,n]}
                                           if(old)
                                            {var n$0=old[1];caml_call1(bisect_visit,272);return [0,n$0]}
                                           throw [0,Assert_failure,_m2_]},
                                         _sA_,
                                         new_svars));
                                   if(sth$5)
                                    {caml_call1(bisect_visit,270);
                                     var
                                      _sB_=
                                       function(ppf,t)
                                        {caml_call1(bisect_visit,267);
                                         return caml_call2
                                                 (pp$6,ppf,bisect_post_visit(266,caml_call1(walk(st[2]),t)))},
                                      _sC_=
                                       bisect_post_visit
                                        (268,function(_sY_,_sZ_){return pp$7(_sB_,_sY_,_sZ_)});
                                     bisect_post_visit
                                      (269,caml_call2(printf$0(_m3_),_sC_,new_svars$0))}
                                   caml_call1(bisect_visit,265);
                                   function _sD_(param)
                                    {caml_call1(bisect_visit,263);
                                     if(sth$5)
                                      {caml_call1(bisect_visit,262);
                                       var
                                        _sI_=[0,pp_print_space],
                                        _sJ_=
                                         bisect_post_visit
                                          (260,
                                           function(_sW_,_sX_)
                                            {return pp_print_list(_sI_,pp$6,_sW_,_sX_)});
                                       bisect_post_visit
                                        (261,caml_call3(printf$0(_m4_),fname,_sJ_,walked_args))}
                                     caml_call1(bisect_visit,259);
                                     function _sK_(x)
                                      {caml_call1(bisect_visit,258);
                                       function _sO_(param)
                                        {caml_call1(bisect_visit,257);
                                         return function(_sV_){return return$2(x,_sV_)}}
                                       var _sP_=st[1];
                                       caml_call1(bisect_visit,115);
                                       function _sN_(st)
                                        {caml_call1(bisect_visit,114);
                                         var _sT_=[0,_sP_,st[2],st[3]];
                                         return function(_sU_){return put(_sT_,_sU_)}}
                                       var
                                        _sQ_=
                                         bisect_post_visit
                                          (256,function(_sS_){return bind$2(read,_sN_,_sS_)});
                                       return function(_sR_){return bind$2(_sQ_,_sO_,_sR_)}}
                                     var _sL_=bisect_post_visit(255,eval$0(body));
                                     return function(_sM_){return bind$2(_sL_,_sK_,_sM_)}}
                                   var
                                    _sE_=[0,new_svars$0,st[2],st[3]],
                                    _sF_=
                                     bisect_post_visit(264,function(_sH_){return put(_sE_,_sH_)});
                                   return function(_sG_){return bind$2(_sF_,_sD_,_sG_)}}
                                 var
                                  acc$1=
                                   bisect_post_visit
                                    (288,function(_su_){return return$2(empty$0,_su_)}),
                                  _sm_=889821688,
                                  on_fail=
                                   bisect_post_visit
                                    (289,function(_st_){return fail(_sm_,_st_)});
                                 caml_call1(bisect_visit,133);
                                 var
                                  param$1=[0,formal_args,walked_args],
                                  acc=acc$1,
                                  param=param$1;
                                 for(;;)
                                  {var _sh_=param[1],switch$0=0;
                                   if(_sh_)
                                    {var _si_=param[2];
                                     if(_si_)
                                      {var ys=_si_[2],y=_si_[1],xs=_sh_[2],x=_sh_[1];
                                       caml_call1(bisect_visit,131);
                                       var
                                        param$0=[0,xs,ys],
                                        _sj_=
                                         function(y,x)
                                           {return function(acc)
                                             {caml_call1(bisect_visit,128);
                                              caml_call1(bisect_visit,287);
                                              var _sr_=bisect_post_visit(286,caml_call3(add$3,x,y,acc));
                                              return function(_ss_){return return$2(_sr_,_ss_)}}}
                                          (y,x),
                                        acc$0=
                                         bisect_post_visit
                                          (129,
                                           function(acc,_sp_)
                                             {return function(_sq_){return bind$2(acc,_sp_,_sq_)}}
                                            (acc,_sj_)),
                                        acc=acc$0,
                                        param=param$0;
                                       continue}}
                                   else
                                    if(! param[2])
                                     {caml_call1(bisect_visit,130);var _sk_=acc;switch$0 = 1}
                                   if(! switch$0)
                                    {caml_call1(bisect_visit,132);var _sk_=on_fail}
                                   var _sn_=bisect_post_visit(290,_sk_);
                                   return function(_so_){return bind$2(_sn_,_sl_,_so_)}}},
                              _se_=
                               bisect_post_visit
                                (295,
                                 mapm
                                  (function(t)
                                    {caml_call1(bisect_visit,294);
                                     var
                                      f=bisect_post_visit(293,walk(st[2])),
                                      x=bisect_post_visit(292,eval_term(t));
                                     return function(st)
                                      {caml_call1(bisect_visit,94);
                                       var _sg_=bisect_post_visit(93,caml_call1(x,st));
                                       return map
                                               (function(param)
                                                 {var x=param[2],st=param[1];
                                                  caml_call1(bisect_visit,92);
                                                  return [0,st,bisect_post_visit(91,caml_call1(f,x))]},
                                                _sg_)}},
                                   args));
                             return function(_sf_){return bind$2(_se_,_sd_,_sf_)}}
                           throw [0,Assert_failure,_m5_]};
                       return function(_sa_){return bind$2(read,_r__,_sa_)};
                      default:
                       var xs$1=root$0[1];
                       caml_call1(bisect_visit,304);
                       bisect_post_visit(205,caml_call1(t1.anyf,_m6_));
                       var
                        _r$_=
                         function(param)
                          {var subst=param[2],svars=param[1];
                           caml_call1(bisect_visit,203);
                           if(sth$1)
                            {caml_call1(bisect_visit,202);
                             var
                              _tN_=
                               function(ppf,name)
                                {caml_call1(bisect_visit,199);
                                 var
                                  _tU_=bisect_post_visit(197,caml_call2(find$0,name,svars)),
                                  _tV_=bisect_post_visit(198,caml_call1(walk(subst),_tU_));
                                 return caml_call4(fprintf$0(ppf),_m7_,name,pp$6,_tV_)},
                              _tO_=[0,pp_print_space],
                              _tP_=
                               bisect_post_visit
                                (200,
                                 function(_tS_,_tT_)
                                  {return pp_print_list(_tO_,_tN_,_tS_,_tT_)});
                             bisect_post_visit(201,caml_call2(printf$0(_m8_),_tP_,xs$1))}
                           caml_call1(bisect_visit,196);
                           var _tQ_=bisect_post_visit(195,return$3(subst));
                           return function(_tR_){return return$2(_tQ_,_tR_)}};
                       return function(_tM_){return bind$2(read,_r$_,_tM_)}}}}
                function eval_term(param)
                 {if(typeof param === "number")
                   {caml_call1(bisect_visit,321);
                    var _rI_=0;
                    return function(_rQ_){return return$2(_rI_,_rQ_)}}
                  else
                   switch(param[0])
                    {case 0:
                      var s=param[1];
                      caml_call1(bisect_visit,324);
                      var
                       _rJ_=
                        function(next)
                         {caml_call1(bisect_visit,319);
                          if(next)
                           {var t2=next[1];
                            caml_call1(bisect_visit,318);
                            return function(_rY_){return return$2(t2,_rY_)}}
                          caml_call1(bisect_visit,317);
                          var _rW_=[0,-1019238972,s];
                          return function(_rX_){return fail(_rW_,_rX_)}};
                      caml_call1(bisect_visit,109);
                      var
                       _rH_=
                        function(param)
                         {var svars=param[1];
                          caml_call1(bisect_visit,108);
                          var
                           _rU_=
                            bisect_post_visit(107,caml_call2(find_opt,s,svars));
                          return function(_rV_){return return$2(_rU_,_rV_)}},
                       _rK_=
                        bisect_post_visit
                         (320,function(_rT_){return bind$2(read,_rH_,_rT_)});
                      return function(_rS_){return bind$2(_rK_,_rJ_,_rS_)};
                     case 1:
                      var s$0=param[1];
                      caml_call1(bisect_visit,322);
                      var _rL_=bisect_post_visit(312,symbol$41(s$0));
                      return function(_rR_){return return$2(_rL_,_rR_)};
                     default:
                      var r=param[2],l=param[1];
                      caml_call1(bisect_visit,323);
                      var
                       _rM_=bisect_post_visit(316,eval_term(r)),
                       _rN_=bisect_post_visit(314,eval_term(l)),
                       _rO_=
                        bisect_post_visit
                         (313,function(_r1_){return return$2(cons$1,_r1_)}),
                       _rP_=
                        bisect_post_visit
                         (315,function(_r0_){return symbol$42(_rO_,_rN_,_r0_)});
                      return function(_rZ_){return symbol$42(_rP_,_rM_,_rZ_)}}}
                var m=bisect_post_visit$0(5,eval$0(g));
                caml_call1(bisect_visit,105);
                var
                 _ry_=bisect_post_visit(104,caml_call1(m,st)),
                 match=map(function(_rG_){return _rG_[2]},_ry_);
                if(0 === match[0])
                 {var r=match[1];
                  caml_call1(bisect_visit$0,3);
                  var sth=opt$0[1];
                  caml_call1(bisect_visit,186);
                  var
                   helper=
                    function(n,param)
                     {var param$0=param;
                      for(;;)
                       {if(typeof param$0 === "number")
                         {caml_call1(bisect_visit,181);return 0}
                        caml_call1(bisect_visit,183);
                        if(0 === n){caml_call1(bisect_visit,182);return 0}
                        if(typeof param$0 !== "number" && 0 !== param$0[0])
                         {var
                           _rE_=param$0[1],
                           _rF_=caml_obj_tag(_rE_),
                           param$1=
                            250 === _rF_
                             ?_rE_[1]
                             :246 === _rF_?force_lazy_block(_rE_):_rE_;
                          caml_call1(bisect_visit,185);
                          var param$0=param$1;
                          continue}
                        var
                         _rB_=param$0[2],
                         _rC_=param$0[1],
                         _rD_=caml_obj_tag(_rB_),
                         tl=
                          250 === _rD_
                           ?_rB_[1]
                           :246 === _rD_?force_lazy_block(_rB_):_rB_;
                        caml_call1(bisect_visit,184);
                        return [0,_rC_,bisect_post_visit(180,helper(n - 1 | 0,tl))]}};
                  return helper(sth,r)}
                var e=match[1];
                caml_call1(bisect_visit$0,4);
                caml_call1(bisect_visit,88);
                var
                 fmt$0=fmt[1],
                 buf=pp_make_buffer(0),
                 ppf=formatter_of_buffer(buf);
                function k$0(acc)
                 {output_acc$0(ppf,acc);
                  pp_flush_queue(ppf,0);
                  var s=contents(buf);
                  reset(buf);
                  return k(s)}
                return caml_call2(make_printf(k$0,0,fmt$0),pp_error,e)},
             build_num=
              function(n)
               {caml_call1(bisect_visit$0,15);
                if(1 === (n % 2 | 0))
                 {caml_call1(bisect_visit$0,14);
                  return [2,
                          _ne_,
                          bisect_post_visit$0(13,build_num((n - 1 | 0) / 2 | 0))]}
                caml_call1(bisect_visit$0,12);
                if(0 === n){caml_call1(bisect_visit$0,11);return 0}
                caml_call1(bisect_visit$0,10);
                if(0 === (n % 2 | 0))
                 {bisect_post_visit$0(9,0);
                  return [2,_nf_,bisect_post_visit$0(8,build_num(n / 2 | 0))]}
                throw [0,Assert_failure,_ng_]},
             symbol$43=
              function(a,b){caml_call1(bisect_visit$0,52);return [0,a,b]},
             _nl_=
              bisect_post_visit$0
               (46,
                add_rel
                 (_nk_,
                  _nj_,
                  bisect_post_visit$0(45,caml_call2(fresh,_ni_,_nh_)),
                  default_env)),
             _nn_=bisect_post_visit$0(41,var$0(_nm_)),
             _np_=
              bisect_post_visit$0
               (42,cons$0(bisect_post_visit$0(40,var$0(_no_)),_nn_)),
             _nr_=
              bisect_post_visit$0
               (43,cons$0(bisect_post_visit$0(39,var$0(_nq_)),_np_)),
             _nw_=
              bisect_post_visit$0
               (47,
                add_rel
                 (_nv_,
                  _nu_,
                  bisect_post_visit$0
                   (44,
                    caml_call2
                     (fresh,_nt_,[0,bisect_post_visit$0(38,var$0(_ns_)),_nr_])),
                  _nl_)),
             _nx_=[0,symbol$43(_1,c),0],
             _ny_=[0,symbol$43(_1,r$0),_nx_],
             _nz_=[0,symbol$43(_1,y$0),_ny_],
             _nA_=[0,symbol$43(_1,x),_nz_],
             _nB_=[0,[1,[0,symbol$43(_1,b),_nA_]],0],
             _nC_=[0,symbol$43(_1,c),0],
             _nD_=[0,symbol$43(_0,r$0),_nC_],
             _nE_=[0,symbol$43(_1,y$0),_nD_],
             _nF_=[0,symbol$43(_1,x),_nE_],
             _nG_=[0,[1,[0,symbol$43(_0,b),_nF_]],_nB_],
             _nH_=[0,symbol$43(_1,c),0],
             _nI_=[0,symbol$43(_0,r$0),_nH_],
             _nJ_=[0,symbol$43(_1,y$0),_nI_],
             _nK_=[0,symbol$43(_0,x),_nJ_],
             _nL_=[0,[1,[0,symbol$43(_1,b),_nK_]],_nG_],
             _nM_=[0,symbol$43(_0,c),0],
             _nN_=[0,symbol$43(_1,r$0),_nM_],
             _nO_=[0,symbol$43(_1,y$0),_nN_],
             _nP_=[0,symbol$43(_0,x),_nO_],
             _nQ_=[0,[1,[0,symbol$43(_0,b),_nP_]],_nL_],
             _nR_=[0,symbol$43(_1,c),0],
             _nS_=[0,symbol$43(_0,r$0),_nR_],
             _nT_=[0,symbol$43(_0,y$0),_nS_],
             _nU_=[0,symbol$43(_1,x),_nT_],
             _nV_=[0,[1,[0,symbol$43(_1,b),_nU_]],_nQ_],
             _nW_=[0,symbol$43(_0,c),0],
             _nX_=[0,symbol$43(_1,r$0),_nW_],
             _nY_=[0,symbol$43(_0,y$0),_nX_],
             _nZ_=[0,symbol$43(_1,x),_nY_],
             _n0_=[0,[1,[0,symbol$43(_0,b),_nZ_]],_nV_],
             _n1_=[0,symbol$43(_0,c),0],
             _n2_=[0,symbol$43(_1,r$0),_n1_],
             _n3_=[0,symbol$43(_0,y$0),_n2_],
             _n4_=[0,symbol$43(_0,x),_n3_],
             _n5_=[0,[1,[0,symbol$43(_1,b),_n4_]],_n0_],
             _n6_=[0,symbol$43(_0,c),0],
             _n7_=[0,symbol$43(_0,r$0),_n6_],
             _n8_=[0,symbol$43(_0,y$0),_n7_],
             _n9_=[0,symbol$43(_0,x),_n8_],
             _oa_=
              bisect_post_visit$0
               (48,
                add_rel
                 (_n$_,_n__,[2,[0,[1,[0,symbol$43(_0,b),_n9_]],_n5_]],_nw_)),
             _og_=
              [0,
               [4,_of_,[0,n,0]],
               [0,
                [4,_oe_,[0,r$1,0]],
                [0,
                 [4,
                  _od_,
                  [0,
                   d,
                   [0,bisect_post_visit$0(37,cons$0(_1,0)),[0,n,[0,r$1,0]]]]],
                 0]]],
             _oh_=
              [0,
               [1,
                [0,symbol$43(bisect_post_visit$0(36,cons$0(_1,0)),m$0),_og_]],
               [0,
                [1,
                 [0,
                  [4,_oc_,[0,n,0]],
                  [0,[4,_ob_,[0,d,[0,n,[0,m$0,[0,r$1,0]]]]],0]]],
                0]],
             _oj_=
              [0,
               [1,
                [0,
                 symbol$43(bisect_post_visit$0(35,cons$0(_1,0)),n),
                 [0,[4,_oi_,[0,d,[0,n,[0,m$0,[0,r$1,0]]]]],0]]],
               _oh_],
             _om_=
              [0,
               bisect_post_visit$0
                (34,
                 caml_call2
                  (fresh,
                   _ol_,
                   [1,
                    [0,
                     symbol$43(r$1,bisect_post_visit$0(33,cons$0(a,c$0))),
                     [0,[4,_ok_,[0,d,[0,_1,[0,_1,[0,a,[0,c$0,0]]]]]],0]]])),
               0],
             _on_=[0,symbol$43(bisect_post_visit$0(32,cons$0(_1,0)),m$0),_om_],
             _oo_=
              [0,
               [1,[0,symbol$43(bisect_post_visit$0(31,cons$0(_1,0)),n),_on_]],
               _oj_],
             _or_=
              [0,
               [4,_oq_,[0,m$0,0]],
               [0,
                [4,
                 _op_,
                 [0,
                  _0,
                  [0,m$0,[0,bisect_post_visit$0(30,cons$0(_1,0)),[0,r$1,0]]]]],
                0]],
             _os_=[0,symbol$43(0,n),_or_],
             _ot_=[0,[1,[0,symbol$43(_1,d),_os_]],_oo_],
             _ov_=
              [0,
               [4,
                _ou_,
                [0,
                 _0,
                 [0,n,[0,bisect_post_visit$0(29,cons$0(_1,0)),[0,r$1,0]]]]],
               0],
             _ow_=[0,symbol$43(0,m$0),_ov_],
             _ox_=[0,[1,[0,symbol$43(_1,d),_ow_]],_ot_],
             _oz_=[0,symbol$43(m$0,r$1),[0,[4,_oy_,[0,m$0,0]],0]],
             _oA_=[0,symbol$43(0,n),_oz_],
             _oB_=[0,[1,[0,symbol$43(_0,d),_oA_]],_ox_],
             _oC_=[0,symbol$43(n,r$1),0],
             _oD_=[0,symbol$43(0,m$0),_oC_],
             _oG_=
              bisect_post_visit$0
               (49,
                add_rel
                 (_oF_,_oE_,[2,[0,[1,[0,symbol$43(_0,d),_oD_]],_oB_]],_oa_)),
             _oJ_=bisect_post_visit$0(27,var$0(_oI_)),
             _oL_=bisect_post_visit$0(25,var$0(_oK_)),
             _oO_=
              [0,
               _oN_,
               [0,
                symbol$43
                 (bisect_post_visit$0
                   (26,cons$0(bisect_post_visit$0(24,var$0(_oM_)),_oL_)),
                  _oJ_),
                _oH_]],
             _oQ_=bisect_post_visit$0(23,var$0(_oP_)),
             _oS_=bisect_post_visit$0(21,var$0(_oR_)),
             _oU_=
              [0,
               symbol$43
                (bisect_post_visit$0
                  (22,cons$0(bisect_post_visit$0(20,var$0(_oT_)),_oS_)),
                 _oQ_),
               _oO_],
             _oW_=bisect_post_visit$0(19,var$0(_oV_)),
             _oY_=bisect_post_visit$0(17,var$0(_oX_)),
             default_env$0=
              bisect_post_visit$0
               (51,
                add_rel
                 (_o6_,
                  _o5_,
                  [4,_o4_,[0,_0,_o3_]],
                  bisect_post_visit$0
                   (50,
                    add_rel
                     (_o2_,
                      _o1_,
                      bisect_post_visit$0
                       (28,
                        caml_call2
                         (fresh,
                          _o0_,
                          [1,
                           [0,
                            symbol$43
                             (bisect_post_visit$0
                               (18,cons$0(bisect_post_visit$0(16,var$0(_oZ_)),_oY_)),
                              _oW_),
                            _oU_]])),
                      _oG_)))),
             Expect_test_collector=_k6_(_k7_),
             _o7_=
              function(param)
               {caml_call1(bisect_visit$0,61);
                var
                 _ru_=[0,bisect_post_visit$0(60,build_num(2)),_o8_],
                 goal=[4,_o9_,[0,bisect_post_visit$0(59,build_num(1)),_ru_]],
                 _rv_=
                  bisect_post_visit$0
                   (57,
                    run_optimistically
                     (0,
                      0,
                      0,
                      goal,
                      bisect_post_visit$0(56,add_var(_o$_,_o__,default_env$0))));
                bisect_post_visit$0
                 (58,
                  iter
                   (function(st)
                     {caml_call1(bisect_visit$0,55);
                      var _rx_=bisect_post_visit$0(54,caml_call1(walk(st),_pa_));
                      return caml_call4(printf$0(_pb_),pp_goal,goal,pp$6,_rx_)},
                    _rv_));
                var _rw_=[0,bisect_post_visit$0(53,_pc_),126,4201,4205,4211];
                return caml_call1(Expect_test_collector[1],_rw_)},
             _pe_=[0,bisect_post_visit$0(53,_pd_),127,4212,4216,4392],
             _pi_=
              [0,
               [0,
                _ph_,
                _pg_,
                [0,bisect_post_visit$0(53,_pf_),126,4201,4205,4211],
                _pe_],
               0],
             _pm_=of_string$9(_pl_);
            caml_call9
             (Expect_test_collector[3],
              _pm_,
              [0,_pk_,116,3868,3868,4393],
              _pj_,
              0,
              0,
              _pi_,
              0,
              _fX_,
              _o7_);
            unset_lib(_pn_);
            unset(0);
            set_margin(1000);
            set_max_indent(100);
            var
             run_appendo=
              function(param)
               {var
                 env=
                  add_rel
                   (_pr_,_pq_,appendo_body,add_var(_pp_,_po_,default_env)),
                 xs=run_optimistically(0,0,0,goal,env);
                printf$0(_ps_);
                iter
                 (function(st)
                   {var _rq_=var$1(10);
                    function _rr_(_rs_,_rt_){return ppw(st,_rs_,_rt_)}
                    return caml_call2(printf$0(_pt_),_rr_,_rq_)},
                  xs);
                return printf$0(_pu_)},
             _pv_=[0,0,0,0],
             _pw_=
              function(self,runAppendo)
               {if(! _pv_[1])
                 {if(0 === public_methods)
                   var _rl_=new_table([0]);
                  else
                   {var
                     tags=map$2(public_method_label,public_methods),
                     table=new_table(tags),
                     _rj_=public_methods.length - 1 - 1 | 0,
                     _ri_=0;
                    if(! (_rj_ < 0))
                     {var i=_ri_;
                      for(;;)
                       {var met=public_methods[1 + i],lab=(i * 2 | 0) + 2 | 0;
                        table[3] = caml_call3(Meths[4],met,lab,table[3]);
                        table[4] = caml_call3(Labs[4],lab,1,table[4]);
                        var _rk_=i + 1 | 0;
                        if(_rj_ !== i){var i=_rk_;continue}
                        break}}
                    var _rl_=table}
                  var
                   _rm_=new_variable(_rl_,_px_),
                   label=get_method_label(_rl_,_py_),
                   element=
                    function(self_1)
                     {var env=self_1[1 + _rm_];return caml_call1(env[2],env[1])};
                  method_count[1]++;
                  if(caml_call2(Labs[28],label,_rl_[4]))
                   {resize$0(_rl_,label + 1 | 0);
                    caml_check_bound(_rl_[2],label)[1 + label] = element}
                  else
                   _rl_[6] = [0,[0,label,element],_rl_[6]];
                  var
                   _rn_=
                    function(_rp_)
                     {var obj=caml_obj_block(248,_rl_[1]);
                      obj[1] = _rl_[2];
                      var _ro_=caml_set_oo_id(obj);
                      _ro_[1 + _rm_] = _rp_;
                      return _ro_};
                  inst_var_count[1]
                  =
                  (inst_var_count[1] + _rl_[1] | 0)
                  -
                  1
                  |
                  0;
                  _rl_[8] = rev(_rl_[8]);
                  resize$0
                   (_rl_,
                    3 + ((caml_check_bound(_rl_[2],1)[2] * 16 | 0) / 32 | 0) | 0);
                  _pv_[1] = _rn_}
                return caml_call1(_pv_[1],[0,self,runAppendo])},
             _pz_=function(param){return run_appendo};
            t1.jscode
            =
            function(t0,param)
              {return {"runAppendo":caml_js_wrap_meth_callback(t0)}}
             (_pz_,_pw_);
            do_at_exit(0);
            return}
          throw [0,Assert_failure,_qv_]}
        throw [0,Assert_failure,_q9_]}
      throw [0,Assert_failure,_q__]}
    throw [0,Assert_failure,_q$_]}
  (globalThis));
